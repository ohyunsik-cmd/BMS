
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d9c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800a070  0800a070  0000b070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a52c  0800a52c  0000b52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a534  0800a534  0000b534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a538  0800a538  0000b538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f4  24000000  0800a53c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  240001f4  0800a730  0000c1f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000508  0800a730  0000c508  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014efa  00000000  00000000  0000c222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002980  00000000  00000000  0002111c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd0  00000000  00000000  00023aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c3a  00000000  00000000  00024a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033ebf  00000000  00000000  000256aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000151fe  00000000  00000000  00059569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00146a48  00000000  00000000  0006e767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b51af  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005144  00000000  00000000  001b51f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001ba338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f4 	.word	0x240001f4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a054 	.word	0x0800a054

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f8 	.word	0x240001f8
 800030c:	0800a054 	.word	0x0800a054

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <Checksum>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
   unsigned char i;
   unsigned char checksum = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73bb      	strb	r3, [r7, #14]

   for(i=0; i<len; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e009      	b.n	8000716 <Checksum+0x2a>
      checksum += ptr[i];
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	4413      	add	r3, r2
 800070e:	73bb      	strb	r3, [r7, #14]
   for(i=0; i<len; i++)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3301      	adds	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	7bfa      	ldrb	r2, [r7, #15]
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3f1      	bcc.n	8000702 <Checksum+0x16>

   checksum = 0xff & ~checksum;
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	43db      	mvns	r3, r3
 8000722:	73bb      	strb	r3, [r7, #14]

   return(checksum);
 8000724:	7bbb      	ldrb	r3, [r7, #14]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af04      	add	r7, sp, #16
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]

   if( HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, 100) != HAL_OK) {
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	b29a      	uxth	r2, r3
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	b29b      	uxth	r3, r3
 800074c:	2164      	movs	r1, #100	@ 0x64
 800074e:	9102      	str	r1, [sp, #8]
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	2110      	movs	r1, #16
 800075a:	4808      	ldr	r0, [pc, #32]	@ (800077c <I2C_ReadReg+0x48>)
 800075c:	f002 fa6a 	bl	8002c34 <HAL_I2C_Mem_Read>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <I2C_ReadReg+0x38>
      return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e003      	b.n	8000774 <I2C_ReadReg+0x40>
   }
   HAL_Delay(10);
 800076c:	200a      	movs	r0, #10
 800076e:	f001 fcdf 	bl	8002130 <HAL_Delay>
   return 0;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2400025c 	.word	0x2400025c

08000780 <I2C_WriteReg>:

int I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af04      	add	r7, sp, #16
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]

   if( HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, 100) != HAL_OK) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	b29a      	uxth	r2, r3
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	b29b      	uxth	r3, r3
 8000798:	2164      	movs	r1, #100	@ 0x64
 800079a:	9102      	str	r1, [sp, #8]
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	2110      	movs	r1, #16
 80007a6:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <I2C_WriteReg+0x48>)
 80007a8:	f002 f930 	bl	8002a0c <HAL_I2C_Mem_Write>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <I2C_WriteReg+0x38>
         return -1;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	e003      	b.n	80007c0 <I2C_WriteReg+0x40>
      }
      HAL_Delay(10);
 80007b8:	200a      	movs	r0, #10
 80007ba:	f001 fcb9 	bl	8002130 <HAL_Delay>
   return 0;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2400025c 	.word	0x2400025c

080007cc <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	80fb      	strh	r3, [r7, #6]
 80007d8:	4613      	mov	r3, r2
 80007da:	717b      	strb	r3, [r7, #5]
   uint8_t TX_Buffer[2] = {0x00, 0x00};
 80007dc:	2300      	movs	r3, #0
 80007de:	82bb      	strh	r3, [r7, #20]
   uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	809a      	strh	r2, [r3, #4]

   //TX_RegData in little endian format
   TX_RegData[0] = reg_addr & 0xff;
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	733b      	strb	r3, [r7, #12]
   TX_RegData[1] = (reg_addr >> 8) & 0xff;
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	737b      	strb	r3, [r7, #13]
   TX_RegData[2] = reg_data & 0xff; //1st byte of data
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	73bb      	strb	r3, [r7, #14]

   switch(datalen)
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d048      	beq.n	8000898 <BQ769x2_SetRegister+0xcc>
 8000806:	2b04      	cmp	r3, #4
 8000808:	dc71      	bgt.n	80008ee <BQ769x2_SetRegister+0x122>
 800080a:	2b01      	cmp	r3, #1
 800080c:	d002      	beq.n	8000814 <BQ769x2_SetRegister+0x48>
 800080e:	2b02      	cmp	r3, #2
 8000810:	d01f      	beq.n	8000852 <BQ769x2_SetRegister+0x86>
         TX_Buffer[1] = 0x08; //combined length of register address and data
            I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
            HAL_Delay(10);
         break;
    }
}
 8000812:	e06c      	b.n	80008ee <BQ769x2_SetRegister+0x122>
            I2C_WriteReg(0x3E, TX_RegData, 3);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2203      	movs	r2, #3
 800081a:	4619      	mov	r1, r3
 800081c:	203e      	movs	r0, #62	@ 0x3e
 800081e:	f7ff ffaf 	bl	8000780 <I2C_WriteReg>
            HAL_Delay(10);
 8000822:	200a      	movs	r0, #10
 8000824:	f001 fc84 	bl	8002130 <HAL_Delay>
         TX_Buffer[0] = Checksum(TX_RegData, 3);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2103      	movs	r1, #3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff5c 	bl	80006ec <Checksum>
 8000834:	4603      	mov	r3, r0
 8000836:	753b      	strb	r3, [r7, #20]
         TX_Buffer[1] = 0x05; //combined length of register address and data
 8000838:	2305      	movs	r3, #5
 800083a:	757b      	strb	r3, [r7, #21]
            I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2202      	movs	r2, #2
 8000842:	4619      	mov	r1, r3
 8000844:	2060      	movs	r0, #96	@ 0x60
 8000846:	f7ff ff9b 	bl	8000780 <I2C_WriteReg>
            HAL_Delay(10);
 800084a:	200a      	movs	r0, #10
 800084c:	f001 fc70 	bl	8002130 <HAL_Delay>
         break;
 8000850:	e04d      	b.n	80008ee <BQ769x2_SetRegister+0x122>
         TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b2db      	uxtb	r3, r3
 8000858:	73fb      	strb	r3, [r7, #15]
         I2C_WriteReg(0x3E, TX_RegData, 4);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2204      	movs	r2, #4
 8000860:	4619      	mov	r1, r3
 8000862:	203e      	movs	r0, #62	@ 0x3e
 8000864:	f7ff ff8c 	bl	8000780 <I2C_WriteReg>
         HAL_Delay(10);
 8000868:	200a      	movs	r0, #10
 800086a:	f001 fc61 	bl	8002130 <HAL_Delay>
         TX_Buffer[0] = Checksum(TX_RegData, 4);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2104      	movs	r1, #4
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff39 	bl	80006ec <Checksum>
 800087a:	4603      	mov	r3, r0
 800087c:	753b      	strb	r3, [r7, #20]
         TX_Buffer[1] = 0x06; //combined length of register address and data
 800087e:	2306      	movs	r3, #6
 8000880:	757b      	strb	r3, [r7, #21]
            I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2202      	movs	r2, #2
 8000888:	4619      	mov	r1, r3
 800088a:	2060      	movs	r0, #96	@ 0x60
 800088c:	f7ff ff78 	bl	8000780 <I2C_WriteReg>
            HAL_Delay(10);
 8000890:	200a      	movs	r0, #10
 8000892:	f001 fc4d 	bl	8002130 <HAL_Delay>
         break;
 8000896:	e02a      	b.n	80008ee <BQ769x2_SetRegister+0x122>
         TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b2db      	uxtb	r3, r3
 800089e:	73fb      	strb	r3, [r7, #15]
         TX_RegData[4] = (reg_data >> 16) & 0xff;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	0c1b      	lsrs	r3, r3, #16
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	743b      	strb	r3, [r7, #16]
         TX_RegData[5] = (reg_data >> 24) & 0xff;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	0e1b      	lsrs	r3, r3, #24
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	747b      	strb	r3, [r7, #17]
         I2C_WriteReg(0x3E, TX_RegData, 6);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2206      	movs	r2, #6
 80008b6:	4619      	mov	r1, r3
 80008b8:	203e      	movs	r0, #62	@ 0x3e
 80008ba:	f7ff ff61 	bl	8000780 <I2C_WriteReg>
         HAL_Delay(10);
 80008be:	200a      	movs	r0, #10
 80008c0:	f001 fc36 	bl	8002130 <HAL_Delay>
         TX_Buffer[0] = Checksum(TX_RegData, 6);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2106      	movs	r1, #6
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff0e 	bl	80006ec <Checksum>
 80008d0:	4603      	mov	r3, r0
 80008d2:	753b      	strb	r3, [r7, #20]
         TX_Buffer[1] = 0x08; //combined length of register address and data
 80008d4:	2308      	movs	r3, #8
 80008d6:	757b      	strb	r3, [r7, #21]
            I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2202      	movs	r2, #2
 80008de:	4619      	mov	r1, r3
 80008e0:	2060      	movs	r0, #96	@ 0x60
 80008e2:	f7ff ff4d 	bl	8000780 <I2C_WriteReg>
            HAL_Delay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f001 fc22 	bl	8002130 <HAL_Delay>
         break;
 80008ec:	bf00      	nop
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <CommandSubcommands>:



void CommandSubcommands(uint16_t command) //For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{   //For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	80fb      	strh	r3, [r7, #6]

   uint8_t TX_Reg[2] = {0x00, 0x00};
 8000900:	2300      	movs	r3, #0
 8000902:	81bb      	strh	r3, [r7, #12]

   //TX_Reg in little endian format
   TX_Reg[0] = command & 0xff;
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	733b      	strb	r3, [r7, #12]
   TX_Reg[1] = (command >> 8) & 0xff;
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b29b      	uxth	r3, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	737b      	strb	r3, [r7, #13]

   I2C_WriteReg(0x3E,TX_Reg,2);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2202      	movs	r2, #2
 800091a:	4619      	mov	r1, r3
 800091c:	203e      	movs	r0, #62	@ 0x3e
 800091e:	f7ff ff2f 	bl	8000780 <I2C_WriteReg>
   HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f001 fc04 	bl	8002130 <HAL_Delay>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <Subcommands>:

void Subcommands(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	460b      	mov	r3, r1
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	70fb      	strb	r3, [r7, #3]
   //security keys and Manu_data writes dont work with this function (reading these commands works)
   //max readback size is 32 bytes i.e. DASTATUS, CUV/COV snapshot
   uint8_t TX_Reg[4] = {0x00, 0x00, 0x00, 0x00};
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
   uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000946:	2300      	movs	r3, #0
 8000948:	813b      	strh	r3, [r7, #8]

   //TX_Reg in little endian format
   TX_Reg[0] = command & 0xff;
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	733b      	strb	r3, [r7, #12]
   TX_Reg[1] = (command >> 8) & 0xff;
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	b29b      	uxth	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	737b      	strb	r3, [r7, #13]

   if (type == R) {//read
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10f      	bne.n	8000980 <Subcommands+0x50>
      I2C_WriteReg(0x3E,TX_Reg,2);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2202      	movs	r2, #2
 8000966:	4619      	mov	r1, r3
 8000968:	203e      	movs	r0, #62	@ 0x3e
 800096a:	f7ff ff09 	bl	8000780 <I2C_WriteReg>
      HAL_Delay(10);
 800096e:	200a      	movs	r0, #10
 8000970:	f001 fbde 	bl	8002130 <HAL_Delay>
      I2C_ReadReg(0x40, RX_32Byte, 32); //RX_32Byte is a global variable
 8000974:	2220      	movs	r2, #32
 8000976:	492b      	ldr	r1, [pc, #172]	@ (8000a24 <Subcommands+0xf4>)
 8000978:	2040      	movs	r0, #64	@ 0x40
 800097a:	f7ff fedb 	bl	8000734 <I2C_ReadReg>
      TX_Buffer[0] = Checksum(TX_Reg, 4);
      TX_Buffer[1] = 0x06; //combined length of registers address and data
      I2C_WriteReg(0x60, TX_Buffer, 2);
      HAL_Delay(10);
   }
}
 800097e:	e04d      	b.n	8000a1c <Subcommands+0xec>
   else if (type == W) {
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d121      	bne.n	80009ca <Subcommands+0x9a>
      TX_Reg[2] = data & 0xff;
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
      I2C_WriteReg(0x3E,TX_Reg,3);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2203      	movs	r2, #3
 8000992:	4619      	mov	r1, r3
 8000994:	203e      	movs	r0, #62	@ 0x3e
 8000996:	f7ff fef3 	bl	8000780 <I2C_WriteReg>
      HAL_Delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f001 fbc8 	bl	8002130 <HAL_Delay>
      TX_Buffer[0] = Checksum(TX_Reg, 3);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2103      	movs	r1, #3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fea0 	bl	80006ec <Checksum>
 80009ac:	4603      	mov	r3, r0
 80009ae:	723b      	strb	r3, [r7, #8]
      TX_Buffer[1] = 0x05; //combined length of registers address and data
 80009b0:	2305      	movs	r3, #5
 80009b2:	727b      	strb	r3, [r7, #9]
      I2C_WriteReg(0x60, TX_Buffer, 2);
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2202      	movs	r2, #2
 80009ba:	4619      	mov	r1, r3
 80009bc:	2060      	movs	r0, #96	@ 0x60
 80009be:	f7ff fedf 	bl	8000780 <I2C_WriteReg>
      HAL_Delay(10);
 80009c2:	200a      	movs	r0, #10
 80009c4:	f001 fbb4 	bl	8002130 <HAL_Delay>
}
 80009c8:	e028      	b.n	8000a1c <Subcommands+0xec>
   else if (type == W2){ //write data with 2 bytes
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d125      	bne.n	8000a1c <Subcommands+0xec>
      TX_Reg[2] = data & 0xff;
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	73bb      	strb	r3, [r7, #14]
      TX_Reg[3] = (data >> 8) & 0xff;
 80009d6:	88bb      	ldrh	r3, [r7, #4]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	b29b      	uxth	r3, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	73fb      	strb	r3, [r7, #15]
      I2C_WriteReg(0x3E,TX_Reg,4);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2204      	movs	r2, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	203e      	movs	r0, #62	@ 0x3e
 80009ea:	f7ff fec9 	bl	8000780 <I2C_WriteReg>
      HAL_Delay(10);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f001 fb9e 	bl	8002130 <HAL_Delay>
      TX_Buffer[0] = Checksum(TX_Reg, 4);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2104      	movs	r1, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe76 	bl	80006ec <Checksum>
 8000a00:	4603      	mov	r3, r0
 8000a02:	723b      	strb	r3, [r7, #8]
      TX_Buffer[1] = 0x06; //combined length of registers address and data
 8000a04:	2306      	movs	r3, #6
 8000a06:	727b      	strb	r3, [r7, #9]
      I2C_WriteReg(0x60, TX_Buffer, 2);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2060      	movs	r0, #96	@ 0x60
 8000a12:	f7ff feb5 	bl	8000780 <I2C_WriteReg>
      HAL_Delay(10);
 8000a16:	200a      	movs	r0, #10
 8000a18:	f001 fb8a 	bl	8002130 <HAL_Delay>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000368 	.word	0x24000368

08000a28 <DirectCommands>:

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{   //type: R = read, W = write
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	460b      	mov	r3, r1
 8000a34:	80bb      	strh	r3, [r7, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	71bb      	strb	r3, [r7, #6]
   uint8_t TX_data[2] = {0x00, 0x00};
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	81bb      	strh	r3, [r7, #12]

   //little endian format
   TX_data[0] = data & 0xff;
 8000a3e:	88bb      	ldrh	r3, [r7, #4]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	733b      	strb	r3, [r7, #12]
   TX_data[1] = (data >> 8) & 0xff;
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	737b      	strb	r3, [r7, #13]

   if (type == R) {//Read
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d108      	bne.n	8000a66 <DirectCommands+0x3e>
      I2C_ReadReg(command, RX_data, 2); //RX_data is a global variable
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2202      	movs	r2, #2
 8000a58:	490b      	ldr	r1, [pc, #44]	@ (8000a88 <DirectCommands+0x60>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fe6a 	bl	8000734 <I2C_ReadReg>
      HAL_Delay(10);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 fb65 	bl	8002130 <HAL_Delay>
   }
   if (type == W) {//write
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d109      	bne.n	8000a80 <DirectCommands+0x58>
    //Control_status, alarm_status, alarm_enable all 2 bytes long
      I2C_WriteReg(command,TX_data,2);
 8000a6c:	f107 010c 	add.w	r1, r7, #12
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2202      	movs	r2, #2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe83 	bl	8000780 <I2C_WriteReg>
      HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f001 fb58 	bl	8002130 <HAL_Delay>
   }
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000344 	.word	0x24000344

08000a8c <BQ769x2_Init>:
        HAL_Delay(2);
    }
    // 필요시 write 동작도 추가 가능 (지금은 read만 사용 중)
}

void BQ769x2_Init() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
   // Configures all parameters in device RAM

   // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
   // See TRM for full description of CONFIG_UPDATE mode
   CommandSubcommands(SET_CFGUPDATE);
 8000a90:	2090      	movs	r0, #144	@ 0x90
 8000a92:	f7ff ff30 	bl	80008f6 <CommandSubcommands>
   // a full description of the register and the bits will pop up on the screen.

   // 'Power Config' - 0x9234 = 0x2D80
   // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
     // Set wake speed bits to 00 for best performance
   BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 8000a96:	2202      	movs	r2, #2
 8000a98:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8000a9c:	f249 2034 	movw	r0, #37428	@ 0x9234
 8000aa0:	f7ff fe94 	bl	80007cc <BQ769x2_SetRegister>

   // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
   BQ769x2_SetRegister(REG0Config, 0x01, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	f249 2037 	movw	r0, #37431	@ 0x9237
 8000aac:	f7ff fe8e 	bl	80007cc <BQ769x2_SetRegister>

   // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
   BQ769x2_SetRegister(REG12Config, 0xFD, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	21fd      	movs	r1, #253	@ 0xfd
 8000ab4:	f249 2036 	movw	r0, #37430	@ 0x9236
 8000ab8:	f7ff fe88 	bl	80007cc <BQ769x2_SetRegister>

   // Set DFETOFF pin to control BOTH CHG and DSG FET - 0x92FB = 0x42 (set to 0x00 to disable)
   BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2142      	movs	r1, #66	@ 0x42
 8000ac0:	f249 20fb 	movw	r0, #37627	@ 0x92fb
 8000ac4:	f7ff fe82 	bl	80007cc <BQ769x2_SetRegister>

   // Set up ALERT Pin - 0x92FC = 0x2A
   // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
   // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
   BQ769x2_SetRegister(ALERTPinConfig, 0x2A, 1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	212a      	movs	r1, #42	@ 0x2a
 8000acc:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 8000ad0:	f7ff fe7c 	bl	80007cc <BQ769x2_SetRegister>

   // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
   BQ769x2_SetRegister(TS1Config, 0x07, 1);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 8000adc:	f7ff fe76 	bl	80007cc <BQ769x2_SetRegister>

   // Set TS3 to measure FET Temperature - 0x92FF = 0x0F
   BQ769x2_SetRegister(TS3Config, 0x0F, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f249 20ff 	movw	r0, #37631	@ 0x92ff
 8000ae8:	f7ff fe70 	bl	80007cc <BQ769x2_SetRegister>

   // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
   BQ769x2_SetRegister(HDQPinConfig, 0x00, 1);  // No thermistor installed on EVM HDQ pin, so set to 0x00
 8000aec:	2201      	movs	r2, #1
 8000aee:	2100      	movs	r1, #0
 8000af0:	f44f 4013 	mov.w	r0, #37632	@ 0x9300
 8000af4:	f7ff fe6a 	bl	80007cc <BQ769x2_SetRegister>

   // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
   BQ769x2_SetRegister(VCellMode, 0x037B, 2);
 8000af8:	2202      	movs	r2, #2
 8000afa:	f240 317b 	movw	r1, #891	@ 0x37b
 8000afe:	f249 3004 	movw	r0, #37636	@ 0x9304
 8000b02:	f7ff fe63 	bl	80007cc <BQ769x2_SetRegister>

   // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
   // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
   // COV (over-voltage), CUV (under-voltage)
   BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	21bc      	movs	r1, #188	@ 0xbc
 8000b0a:	f249 2061 	movw	r0, #37473	@ 0x9261
 8000b0e:	f7ff fe5d 	bl	80007cc <BQ769x2_SetRegister>

   // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
   // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
   // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
   BQ769x2_SetRegister(EnabledProtectionsB, 0xF0, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	21f0      	movs	r1, #240	@ 0xf0
 8000b16:	f249 2062 	movw	r0, #37474	@ 0x9262
 8000b1a:	f7ff fe57 	bl	80007cc <BQ769x2_SetRegister>

   // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
   BQ769x2_SetRegister(DefaultAlarmMask, 0xF882, 2);
 8000b1e:	2202      	movs	r2, #2
 8000b20:	f64f 0182 	movw	r1, #63618	@ 0xf882
 8000b24:	f249 206d 	movw	r0, #37485	@ 0x926d
 8000b28:	f7ff fe50 	bl	80007cc <BQ769x2_SetRegister>

   // Set up Cell Balancing Configuration - 0x9335 = 0x03   -  Automated balancing while in Relax or Charge modes
   // Also see "Cell Balancing with BQ769x2 Battery Monitors" document on ti.com
   BQ769x2_SetRegister(BalancingConfiguration, 0x03, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2103      	movs	r1, #3
 8000b30:	f249 3035 	movw	r0, #37685	@ 0x9335
 8000b34:	f7ff fe4a 	bl	80007cc <BQ769x2_SetRegister>

   // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
   // CUV Threshold is this value multiplied by 50.6mV
   BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2131      	movs	r1, #49	@ 0x31
 8000b3c:	f249 2075 	movw	r0, #37493	@ 0x9275
 8000b40:	f7ff fe44 	bl	80007cc <BQ769x2_SetRegister>

   // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
   // COV Threshold is this value multiplied by 50.6mV
   BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2155      	movs	r1, #85	@ 0x55
 8000b48:	f249 2078 	movw	r0, #37496	@ 0x9278
 8000b4c:	f7ff fe3e 	bl	80007cc <BQ769x2_SetRegister>

   // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
   BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2105      	movs	r1, #5
 8000b54:	f249 2080 	movw	r0, #37504	@ 0x9280
 8000b58:	f7ff fe38 	bl	80007cc <BQ769x2_SetRegister>

   // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
   BQ769x2_SetRegister(OCD1Threshold, 0x0A, 1);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	210a      	movs	r1, #10
 8000b60:	f249 2082 	movw	r0, #37506	@ 0x9282
 8000b64:	f7ff fe32 	bl	80007cc <BQ769x2_SetRegister>

   // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
   BQ769x2_SetRegister(SCDThreshold, 0x05, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	f249 2086 	movw	r0, #37510	@ 0x9286
 8000b70:	f7ff fe2c 	bl	80007cc <BQ769x2_SetRegister>

   // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
   BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2103      	movs	r1, #3
 8000b78:	f249 2087 	movw	r0, #37511	@ 0x9287
 8000b7c:	f7ff fe26 	bl	80007cc <BQ769x2_SetRegister>

   // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
   // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
   BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	f249 2095 	movw	r0, #37525	@ 0x9295
 8000b88:	f7ff fe20 	bl	80007cc <BQ769x2_SetRegister>

   BQ769x2_SetRegister(OTDThreshold, 0x21, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2121      	movs	r1, #33	@ 0x21
 8000b90:	f249 209d 	movw	r0, #37533	@ 0x929d
 8000b94:	f7ff fe1a 	bl	80007cc <BQ769x2_SetRegister>

   BQ769x2_SetRegister(OTCThreshold, 0x3C, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	213c      	movs	r1, #60	@ 0x3c
 8000b9c:	f249 209a 	movw	r0, #37530	@ 0x929a
 8000ba0:	f7ff fe14 	bl	80007cc <BQ769x2_SetRegister>

   BQ769x2_SetRegister(OTINTThreshold, 0x37, 1); //0x1E = 30, 0x23 = 35, 0x21 = 33
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2137      	movs	r1, #55	@ 0x37
 8000ba8:	f249 20a3 	movw	r0, #37539	@ 0x92a3
 8000bac:	f7ff fe0e 	bl	80007cc <BQ769x2_SetRegister>

   // Exit CONFIGUPDATE mode  - Subcommand 0x0092

   BQ769x2_SetRegister(CellBalanceMinCellVRelax, 3600, 2);
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000bb6:	f249 303f 	movw	r0, #37695	@ 0x933f
 8000bba:	f7ff fe07 	bl	80007cc <BQ769x2_SetRegister>

   BQ769x2_SetRegister(CellBalanceMinDeltaRelax, 50, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2132      	movs	r1, #50	@ 0x32
 8000bc2:	f249 3041 	movw	r0, #37697	@ 0x9341
 8000bc6:	f7ff fe01 	bl	80007cc <BQ769x2_SetRegister>

   BQ769x2_SetRegister(CellBalanceStopDeltaRelax, 5, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2105      	movs	r1, #5
 8000bce:	f249 3042 	movw	r0, #37698	@ 0x9342
 8000bd2:	f7ff fdfb 	bl	80007cc <BQ769x2_SetRegister>

   BQ769x2_SetRegister(CellBalanceMaxCells, 0x02, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2102      	movs	r1, #2
 8000bda:	f249 303a 	movw	r0, #37690	@ 0x933a
 8000bde:	f7ff fdf5 	bl	80007cc <BQ769x2_SetRegister>

   CommandSubcommands(EXIT_CFGUPDATE);
 8000be2:	2092      	movs	r0, #146	@ 0x92
 8000be4:	f7ff fe87 	bl	80008f6 <CommandSubcommands>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <BQ769x2_ReadFETStatus>:
   // Resets DFETOFF (BOTHOFF) pin
   // The DFETOFF pin on the BQ76952EVM should be connected to the MCU board to use this function
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  // DFETOFF pin (BOTHOFF) set low
}

void BQ769x2_ReadFETStatus() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
   // Read FET Status to see which FETs are enabled
   DirectCommands(FETStatus, 0x00, R);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	207f      	movs	r0, #127	@ 0x7f
 8000bf6:	f7ff ff17 	bl	8000a28 <DirectCommands>
   FET_Status = (RX_data[1]*256 + RX_data[0]);
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <BQ769x2_ReadFETStatus+0x60>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <BQ769x2_ReadFETStatus+0x64>)
 8000c00:	701a      	strb	r2, [r3, #0]
   DSG = ((0x4 & RX_data[0])>>2);// discharge FET state
 8000c02:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <BQ769x2_ReadFETStatus+0x60>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <BQ769x2_ReadFETStatus+0x68>)
 8000c12:	701a      	strb	r2, [r3, #0]
   CHG = (0x1 & RX_data[0]);// charge FET state
 8000c14:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <BQ769x2_ReadFETStatus+0x60>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <BQ769x2_ReadFETStatus+0x6c>)
 8000c20:	701a      	strb	r2, [r3, #0]
   PCHG = ((0x2 & RX_data[0])>>1);// pre-charge FET state
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <BQ769x2_ReadFETStatus+0x60>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	085b      	lsrs	r3, r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <BQ769x2_ReadFETStatus+0x70>)
 8000c32:	701a      	strb	r2, [r3, #0]
   PDSG = ((0x8 & RX_data[0])>>3);// pre-discharge FET state
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <BQ769x2_ReadFETStatus+0x60>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <BQ769x2_ReadFETStatus+0x74>)
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24000344 	.word	0x24000344
 8000c50:	2400039d 	.word	0x2400039d
 8000c54:	240003a7 	.word	0x240003a7
 8000c58:	240003a8 	.word	0x240003a8
 8000c5c:	240003a9 	.word	0x240003a9
 8000c60:	240003aa 	.word	0x240003aa

08000c64 <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************


// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
   // Read this register to find out why the ALERT pin was asserted
   DirectCommands(AlarmStatus, 0x00, R);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2062      	movs	r0, #98	@ 0x62
 8000c6e:	f7ff fedb 	bl	8000a28 <DirectCommands>
   return (RX_data[1]*256 + RX_data[0]);
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <BQ769x2_ReadAlarmStatus+0x24>)
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4a03      	ldr	r2, [pc, #12]	@ (8000c88 <BQ769x2_ReadAlarmStatus+0x24>)
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29b      	uxth	r3, r3
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000344 	.word	0x24000344

08000c8c <BQ769x2_ReadSafetyStatus>:

void BQ769x2_ReadSafetyStatus() { //good example functions
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
   // Read Safety Status A/B/C and find which bits are set
   // This shows which primary protections have been triggered
   DirectCommands(SafetyStatusA, 0x00, R);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2003      	movs	r0, #3
 8000c96:	f7ff fec7 	bl	8000a28 <DirectCommands>
   value_SafetyStatusA = (RX_data[1]*256 + RX_data[0]);
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	4b34      	ldr	r3, [pc, #208]	@ (8000d70 <BQ769x2_ReadSafetyStatus+0xe4>)
 8000ca0:	701a      	strb	r2, [r3, #0]
   //Example Fault Flags
   UV_Fault = ((0x4 & RX_data[0])>>2);
 8000ca2:	4b32      	ldr	r3, [pc, #200]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <BQ769x2_ReadSafetyStatus+0xe8>)
 8000cb2:	701a      	strb	r2, [r3, #0]
   OV_Fault = ((0x8 & RX_data[0])>>3);
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <BQ769x2_ReadSafetyStatus+0xec>)
 8000cc4:	701a      	strb	r2, [r3, #0]
   SCD_Fault = ((0x8 & RX_data[1])>>3);
 8000cc6:	4b29      	ldr	r3, [pc, #164]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <BQ769x2_ReadSafetyStatus+0xf0>)
 8000cd6:	701a      	strb	r2, [r3, #0]
   OCD_Fault = ((0x2 & RX_data[1])>>1);
 8000cd8:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000cda:	785b      	ldrb	r3, [r3, #1]
 8000cdc:	085b      	lsrs	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b26      	ldr	r3, [pc, #152]	@ (8000d80 <BQ769x2_ReadSafetyStatus+0xf4>)
 8000ce8:	701a      	strb	r2, [r3, #0]

   DirectCommands(SafetyStatusB, 0x00, R);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2005      	movs	r0, #5
 8000cf0:	f7ff fe9a 	bl	8000a28 <DirectCommands>
   value_SafetyStatusB = (RX_data[1]*256 + RX_data[0]);
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <BQ769x2_ReadSafetyStatus+0xf8>)
 8000cfa:	701a      	strb	r2, [r3, #0]
   OTINT_Fault = ((0x40 & RX_data[0])>>6);
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	099b      	lsrs	r3, r3, #6
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <BQ769x2_ReadSafetyStatus+0xfc>)
 8000d0c:	701a      	strb	r2, [r3, #0]
   OTD_Fault = ((0x20 & RX_data[0])>>5);
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <BQ769x2_ReadSafetyStatus+0x100>)
 8000d1e:	701a      	strb	r2, [r3, #0]
   OTC_Fault = ((0x10 & RX_data[0])>>4);
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <BQ769x2_ReadSafetyStatus+0x104>)
 8000d30:	701a      	strb	r2, [r3, #0]


   DirectCommands(SafetyStatusC, 0x00, R);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2007      	movs	r0, #7
 8000d38:	f7ff fe76 	bl	8000a28 <DirectCommands>
   value_SafetyStatusC = (RX_data[1]*256 + RX_data[0]);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <BQ769x2_ReadSafetyStatus+0xe0>)
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <BQ769x2_ReadSafetyStatus+0x108>)
 8000d42:	701a      	strb	r2, [r3, #0]
   if ((value_SafetyStatusA + value_SafetyStatusB + value_SafetyStatusC) > 1) {
 8000d44:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <BQ769x2_ReadSafetyStatus+0xe4>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <BQ769x2_ReadSafetyStatus+0xf8>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <BQ769x2_ReadSafetyStatus+0x108>)
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	dd03      	ble.n	8000d62 <BQ769x2_ReadSafetyStatus+0xd6>
      ProtectionsTriggered = 1; }
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <BQ769x2_ReadSafetyStatus+0x10c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
   else {
      ProtectionsTriggered = 0; }
}
 8000d60:	e002      	b.n	8000d68 <BQ769x2_ReadSafetyStatus+0xdc>
      ProtectionsTriggered = 0; }
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <BQ769x2_ReadSafetyStatus+0x10c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000344 	.word	0x24000344
 8000d70:	2400039a 	.word	0x2400039a
 8000d74:	2400039e 	.word	0x2400039e
 8000d78:	2400039f 	.word	0x2400039f
 8000d7c:	240003a0 	.word	0x240003a0
 8000d80:	240003a1 	.word	0x240003a1
 8000d84:	2400039b 	.word	0x2400039b
 8000d88:	240003a2 	.word	0x240003a2
 8000d8c:	240003a3 	.word	0x240003a3
 8000d90:	240003a4 	.word	0x240003a4
 8000d94:	2400039c 	.word	0x2400039c
 8000d98:	240003a6 	.word	0x240003a6

08000d9c <BQ769x2_ReadVoltage>:
// ********************************* BQ769x2 Measurement Commands   *****************************************


uint16_t BQ769x2_ReadVoltage(uint8_t command)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
   //RX_data is global var
   DirectCommands(command, 0x00, R);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fe3b 	bl	8000a28 <DirectCommands>
   if(command >= Cell1Voltage && command <= Cell10Voltage) {//Cells 1 through 10 (0x14 to 0x26)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b13      	cmp	r3, #19
 8000db6:	d90b      	bls.n	8000dd0 <BQ769x2_ReadVoltage+0x34>
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b26      	cmp	r3, #38	@ 0x26
 8000dbc:	d808      	bhi.n	8000dd0 <BQ769x2_ReadVoltage+0x34>
      return (RX_data[1]*256 + RX_data[0]); //voltage is reported in mV
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <BQ769x2_ReadVoltage+0x54>)
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <BQ769x2_ReadVoltage+0x54>)
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	e00b      	b.n	8000de8 <BQ769x2_ReadVoltage+0x4c>
   }
   else {//stack, Pack, LD
      return 10 * (RX_data[1]*256 + RX_data[0]); //voltage is reported in 0.01V units
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <BQ769x2_ReadVoltage+0x54>)
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <BQ769x2_ReadVoltage+0x54>)
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b29b      	uxth	r3, r3
   }

}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000344 	.word	0x24000344

08000df4 <BQ769x2_ReadAllVoltages>:
void BQ769x2_ReadAllVoltages()
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0

  int cellvoltageholder = Cell1Voltage; //Cell1Voltage is 0x14
 8000dfa:	2314      	movs	r3, #20
 8000dfc:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 10; x++){//Reads all cell voltages
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	e010      	b.n	8000e26 <BQ769x2_ReadAllVoltages+0x32>
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ffc7 	bl	8000d9c <BQ769x2_ReadVoltage>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4619      	mov	r1, r3
 8000e12:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <BQ769x2_ReadAllVoltages+0x88>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 10; x++){//Reads all cell voltages
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	ddeb      	ble.n	8000e04 <BQ769x2_ReadAllVoltages+0x10>
  }
  Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 8000e2c:	2034      	movs	r0, #52	@ 0x34
 8000e2e:	f7ff ffb5 	bl	8000d9c <BQ769x2_ReadVoltage>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <BQ769x2_ReadAllVoltages+0x8c>)
 8000e38:	801a      	strh	r2, [r3, #0]

  Pack_Voltage = 0;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <BQ769x2_ReadAllVoltages+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	801a      	strh	r2, [r3, #0]
  for (int y =0; y <10; y++) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	e00c      	b.n	8000e60 <BQ769x2_ReadAllVoltages+0x6c>
	  Pack_Voltage += CellVoltage[y];
 8000e46:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <BQ769x2_ReadAllVoltages+0x88>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <BQ769x2_ReadAllVoltages+0x90>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <BQ769x2_ReadAllVoltages+0x90>)
 8000e58:	801a      	strh	r2, [r3, #0]
  for (int y =0; y <10; y++) {
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	ddef      	ble.n	8000e46 <BQ769x2_ReadAllVoltages+0x52>
  }

  LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 8000e66:	2038      	movs	r0, #56	@ 0x38
 8000e68:	f7ff ff98 	bl	8000d9c <BQ769x2_ReadVoltage>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <BQ769x2_ReadAllVoltages+0x94>)
 8000e72:	801a      	strh	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000348 	.word	0x24000348
 8000e80:	2400038e 	.word	0x2400038e
 8000e84:	24000390 	.word	0x24000390
 8000e88:	24000392 	.word	0x24000392

08000e8c <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
   DirectCommands(CC2Current, 0x00, R);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	203a      	movs	r0, #58	@ 0x3a
 8000e96:	f7ff fdc7 	bl	8000a28 <DirectCommands>
   return (RX_data[1]*256 + RX_data[0]);  // current is reported in mA
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <BQ769x2_ReadCurrent+0x24>)
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4a03      	ldr	r2, [pc, #12]	@ (8000eb0 <BQ769x2_ReadCurrent+0x24>)
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	24000344 	.word	0x24000344
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <BQ769x2_ReadTemperature>:

float BQ769x2_ReadTemperature(uint8_t command)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
   DirectCommands(command, 0x00, R);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fdad 	bl	8000a28 <DirectCommands>
   //RX_data is a global var
   return (0.1 * (float)(RX_data[1]*256 + RX_data[0])) - 273.15;  // converts from 0.1K to Celcius
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <BQ769x2_ReadTemperature+0x60>)
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	4a10      	ldr	r2, [pc, #64]	@ (8000f18 <BQ769x2_ReadTemperature+0x60>)
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee6:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000f08 <BQ769x2_ReadTemperature+0x50>
 8000eea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eee:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000f10 <BQ769x2_ReadTemperature+0x58>
 8000ef2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ef6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8000efa:	eeb0 0a67 	vmov.f32	s0, s15
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	f3af 8000 	nop.w
 8000f08:	9999999a 	.word	0x9999999a
 8000f0c:	3fb99999 	.word	0x3fb99999
 8000f10:	66666666 	.word	0x66666666
 8000f14:	40711266 	.word	0x40711266
 8000f18:	24000344 	.word	0x24000344

08000f1c <BQ769x2_CheckPowerMode>:
   AccumulatedCharge_Frac = ((RX_32Byte[7]<<24) + (RX_32Byte[6]<<16) + (RX_32Byte[5]<<8) + RX_32Byte[4]); //Bytes 4-7
   AccumulatedCharge_Time = ((RX_32Byte[11]<<24) + (RX_32Byte[10]<<16) + (RX_32Byte[9]<<8) + RX_32Byte[8]); //Bytes 8-11
}

void BQ769x2_CheckPowerMode()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    DirectCommands(ControlStatus, 0x00, R);  // RX_data[0]에 값 들어감
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fd7f 	bl	8000a28 <DirectCommands>
    PowerMode = (RX_data[0] >> 3) & 0x03;    // 비트 4:3만 추출
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <BQ769x2_CheckPowerMode+0x24>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b02      	ldr	r3, [pc, #8]	@ (8000f44 <BQ769x2_CheckPowerMode+0x28>)
 8000f3a:	701a      	strb	r2, [r3, #0]
    // 0 = NORMAL, 1 = SLEEP, 2 = DEEPSLEEP, 3 = SHUTDOWN
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	24000344 	.word	0x24000344
 8000f44:	240003a5 	.word	0x240003a5

08000f48 <BQ769x2_CheckCellBalancing>:

void BQ769x2_CheckCellBalancing()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    Subcommands(CB_ACTIVE_CELLS, 0x00, R);  // 0x0074
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2083      	movs	r0, #131	@ 0x83
 8000f52:	f7ff fced 	bl	8000930 <Subcommands>
    CB_ActiveCells = ((uint16_t)RX_32Byte[3] << 24) |
                     ((uint16_t)RX_32Byte[2] << 16) |
                     ((uint16_t)RX_32Byte[1] << 8) |
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <BQ769x2_CheckCellBalancing+0x2c>)
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21a      	sxth	r2, r3
                     RX_32Byte[0];
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <BQ769x2_CheckCellBalancing+0x2c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b21b      	sxth	r3, r3
                     ((uint16_t)RX_32Byte[1] << 8) |
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29a      	uxth	r2, r3
    CB_ActiveCells = ((uint16_t)RX_32Byte[3] << 24) |
 8000f6c:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <BQ769x2_CheckCellBalancing+0x30>)
 8000f6e:	801a      	strh	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	24000368 	.word	0x24000368
 8000f78:	24000396 	.word	0x24000396
 8000f7c:	00000000 	.word	0x00000000

08000f80 <BMS_ReadRealData>:

// 실제 BMS 데이터 읽기 (I2C에서)
void BMS_ReadRealData(BMS_Data_t *bmsData) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    // 전압 데이터 읽기
    BQ769x2_ReadAllVoltages();
 8000f88:	f7ff ff34 	bl	8000df4 <BQ769x2_ReadAllVoltages>

    // Pack 전압: 0.01V 단위를 V 단위로 변환
    bmsData->packVoltage = (((Pack_Voltage * 0.001f) - 25.0) / 17.0)*100 ;
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80010b8 <BMS_ReadRealData+0x138>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f98:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80010bc <BMS_ReadRealData+0x13c>
 8000f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fa4:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 8000fa8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000fac:	eeb3 5b01 	vmov.f64	d5, #49	@ 0x41880000  17.0
 8000fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80010b0 <BMS_ReadRealData+0x130>
 8000fb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a00 	vstr	s15, [r3]

    // 셀 전압: mV를 V로 변환
    for (int i = 0; i < 10; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e016      	b.n	8000ffa <BMS_ReadRealData+0x7a>
        bmsData->cellVoltages[i] = CellVoltage[i] * 0.001f; // mV to V
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80010c0 <BMS_ReadRealData+0x140>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fdc:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80010bc <BMS_ReadRealData+0x13c>
 8000fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3306      	adds	r3, #6
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	3304      	adds	r3, #4
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 10; i++) {
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	dde5      	ble.n	8000fcc <BMS_ReadRealData+0x4c>
    }

    // 전류 읽기: mA를 A로 변환
    Pack_Current = BQ769x2_ReadCurrent();
 8001000:	f7ff ff44 	bl	8000e8c <BQ769x2_ReadCurrent>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b2e      	ldr	r3, [pc, #184]	@ (80010c4 <BMS_ReadRealData+0x144>)
 800100a:	801a      	strh	r2, [r3, #0]
    bmsData->current = (int16_t)Pack_Current; // mA to A (signed)
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <BMS_ReadRealData+0x144>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	edc3 7a01 	vstr	s15, [r3, #4]

    // 온도 읽기
    bmsData->temperatures[0] = BQ769x2_ReadTemperature(TS1Temperature);
 8001020:	2070      	movs	r0, #112	@ 0x70
 8001022:	f7ff ff49 	bl	8000eb8 <BQ769x2_ReadTemperature>
 8001026:	eef0 7a40 	vmov.f32	s15, s0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edc3 7a02 	vstr	s15, [r3, #8]
    bmsData->temperatures[1] = BQ769x2_ReadTemperature(TS3Temperature);
 8001030:	2074      	movs	r0, #116	@ 0x74
 8001032:	f7ff ff41 	bl	8000eb8 <BQ769x2_ReadTemperature>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	edc3 7a03 	vstr	s15, [r3, #12]
    bmsData->temperatures[2] = BQ769x2_ReadTemperature(0x68); // Internal temp
 8001040:	2068      	movs	r0, #104	@ 0x68
 8001042:	f7ff ff39 	bl	8000eb8 <BQ769x2_ReadTemperature>
 8001046:	eef0 7a40 	vmov.f32	s15, s0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edc3 7a04 	vstr	s15, [r3, #16]

    // 안전 상태 읽기
    BQ769x2_ReadSafetyStatus();
 8001050:	f7ff fe1c 	bl	8000c8c <BQ769x2_ReadSafetyStatus>

    // Protection 상태 설정 (UV_Fault, OV_Fault는 반전)
    bmsData->protection[0] = OV_Fault; // OVP (반전)
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <BMS_ReadRealData+0x148>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	751a      	strb	r2, [r3, #20]
    bmsData->protection[1] = UV_Fault; // UVP (반전)
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <BMS_ReadRealData+0x14c>)
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	755a      	strb	r2, [r3, #21]
    bmsData->protection[2] = OCD_Fault; // OCP
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <BMS_ReadRealData+0x150>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	759a      	strb	r2, [r3, #22]
    bmsData->protection[3] = (OTC_Fault || OTD_Fault || OTINT_Fault); // OTP
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <BMS_ReadRealData+0x154>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <BMS_ReadRealData+0x104>
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <BMS_ReadRealData+0x158>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <BMS_ReadRealData+0x104>
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <BMS_ReadRealData+0x15c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <BMS_ReadRealData+0x108>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <BMS_ReadRealData+0x10a>
 8001088:	2300      	movs	r3, #0
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	75da      	strb	r2, [r3, #23]
    bmsData->protection[4] = 0; // UTP (해당 신호 없음)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	761a      	strb	r2, [r3, #24]

    // 셀 밸런싱 상태
    BQ769x2_CheckCellBalancing();
 8001096:	f7ff ff57 	bl	8000f48 <BQ769x2_CheckCellBalancing>
    bmsData->cellBalancing = CB_ActiveCells;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <BMS_ReadRealData+0x160>)
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	f3af 8000 	nop.w
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40590000 	.word	0x40590000
 80010b8:	24000390 	.word	0x24000390
 80010bc:	3a83126f 	.word	0x3a83126f
 80010c0:	24000348 	.word	0x24000348
 80010c4:	24000394 	.word	0x24000394
 80010c8:	2400039f 	.word	0x2400039f
 80010cc:	2400039e 	.word	0x2400039e
 80010d0:	240003a1 	.word	0x240003a1
 80010d4:	240003a4 	.word	0x240003a4
 80010d8:	240003a3 	.word	0x240003a3
 80010dc:	240003a2 	.word	0x240003a2
 80010e0:	24000396 	.word	0x24000396

080010e4 <BMS_SendJSON>:

// JSON 형태로 UART 전송
void BMS_SendJSON(BMS_Data_t *bmsData) {
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	ed2d 8b0e 	vpush	{d8-d14}
 80010ea:	f2ad 4da4 	subw	sp, sp, #1188	@ 0x4a4
 80010ee:	af26      	add	r7, sp, #152	@ 0x98
 80010f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80010f4:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80010f8:	6018      	str	r0, [r3, #0]
        "},"
        "\"cellVoltages\":[%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f],"
        "\"cellBalancing\":%d"
        "}\r\n",

        bmsData->packVoltage,
 80010fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80010fe:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	edd3 7a00 	vldr	s15, [r3]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001108:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        bmsData->current,
 800110c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001110:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	edd3 6a01 	vldr	s13, [r3, #4]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 800111a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        bmsData->temperatures[0],
 800111e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001122:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	edd3 5a02 	vldr	s11, [r3, #8]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 800112c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
        bmsData->temperatures[1],
 8001130:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001134:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	edd3 4a03 	vldr	s9, [r3, #12]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 800113e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
        bmsData->temperatures[2],
 8001142:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001146:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	edd3 3a04 	vldr	s7, [r3, #16]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001150:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
        bmsData->protection[0] ? "true" : "false",
 8001154:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001158:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	7d1b      	ldrb	r3, [r3, #20]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <BMS_SendJSON+0x84>
 8001164:	4b64      	ldr	r3, [pc, #400]	@ (80012f8 <BMS_SendJSON+0x214>)
 8001166:	e000      	b.n	800116a <BMS_SendJSON+0x86>
 8001168:	4b64      	ldr	r3, [pc, #400]	@ (80012fc <BMS_SendJSON+0x218>)
        bmsData->protection[1] ? "true" : "false",
 800116a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 800116e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	7d52      	ldrb	r2, [r2, #21]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001176:	2a00      	cmp	r2, #0
 8001178:	d001      	beq.n	800117e <BMS_SendJSON+0x9a>
 800117a:	4a5f      	ldr	r2, [pc, #380]	@ (80012f8 <BMS_SendJSON+0x214>)
 800117c:	e000      	b.n	8001180 <BMS_SendJSON+0x9c>
 800117e:	4a5f      	ldr	r2, [pc, #380]	@ (80012fc <BMS_SendJSON+0x218>)
        bmsData->protection[2] ? "true" : "false",
 8001180:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8001184:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8001188:	6809      	ldr	r1, [r1, #0]
 800118a:	7d89      	ldrb	r1, [r1, #22]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 800118c:	2900      	cmp	r1, #0
 800118e:	d001      	beq.n	8001194 <BMS_SendJSON+0xb0>
 8001190:	4959      	ldr	r1, [pc, #356]	@ (80012f8 <BMS_SendJSON+0x214>)
 8001192:	e000      	b.n	8001196 <BMS_SendJSON+0xb2>
 8001194:	4959      	ldr	r1, [pc, #356]	@ (80012fc <BMS_SendJSON+0x218>)
        bmsData->protection[3] ? "true" : "false",
 8001196:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 800119a:	f2a0 4004 	subw	r0, r0, #1028	@ 0x404
 800119e:	6800      	ldr	r0, [r0, #0]
 80011a0:	7dc0      	ldrb	r0, [r0, #23]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d001      	beq.n	80011aa <BMS_SendJSON+0xc6>
 80011a6:	4854      	ldr	r0, [pc, #336]	@ (80012f8 <BMS_SendJSON+0x214>)
 80011a8:	e000      	b.n	80011ac <BMS_SendJSON+0xc8>
 80011aa:	4854      	ldr	r0, [pc, #336]	@ (80012fc <BMS_SendJSON+0x218>)
        bmsData->protection[4] ? "true" : "false",
 80011ac:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 80011b0:	f2a4 4404 	subw	r4, r4, #1028	@ 0x404
 80011b4:	6824      	ldr	r4, [r4, #0]
 80011b6:	7e24      	ldrb	r4, [r4, #24]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d001      	beq.n	80011c0 <BMS_SendJSON+0xdc>
 80011bc:	4c4e      	ldr	r4, [pc, #312]	@ (80012f8 <BMS_SendJSON+0x214>)
 80011be:	e000      	b.n	80011c2 <BMS_SendJSON+0xde>
 80011c0:	4c4e      	ldr	r4, [pc, #312]	@ (80012fc <BMS_SendJSON+0x218>)
        bmsData->cellVoltages[0], bmsData->cellVoltages[1],
 80011c2:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 80011c6:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 80011ca:	682d      	ldr	r5, [r5, #0]
 80011cc:	edd5 2a07 	vldr	s5, [r5, #28]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 80011d0:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
        bmsData->cellVoltages[0], bmsData->cellVoltages[1],
 80011d4:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 80011d8:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 80011dc:	682d      	ldr	r5, [r5, #0]
 80011de:	edd5 1a08 	vldr	s3, [r5, #32]
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 80011e2:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
        bmsData->cellVoltages[2], bmsData->cellVoltages[3],
 80011e6:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 80011ea:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 80011ee:	682d      	ldr	r5, [r5, #0]
 80011f0:	edd5 0a09 	vldr	s1, [r5, #36]	@ 0x24
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 80011f4:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
        bmsData->cellVoltages[2], bmsData->cellVoltages[3],
 80011f8:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 80011fc:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 8001200:	682d      	ldr	r5, [r5, #0]
 8001202:	ed95 8a0a 	vldr	s16, [r5, #40]	@ 0x28
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001206:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
        bmsData->cellVoltages[4], bmsData->cellVoltages[5],
 800120a:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 800120e:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 8001212:	682d      	ldr	r5, [r5, #0]
 8001214:	ed95 9a0b 	vldr	s18, [r5, #44]	@ 0x2c
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001218:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
        bmsData->cellVoltages[4], bmsData->cellVoltages[5],
 800121c:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 8001220:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 8001224:	682d      	ldr	r5, [r5, #0]
 8001226:	ed95 aa0c 	vldr	s20, [r5, #48]	@ 0x30
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 800122a:	eeb7 aaca 	vcvt.f64.f32	d10, s20
        bmsData->cellVoltages[6], bmsData->cellVoltages[7],
 800122e:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 8001232:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 8001236:	682d      	ldr	r5, [r5, #0]
 8001238:	ed95 ba0d 	vldr	s22, [r5, #52]	@ 0x34
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 800123c:	eeb7 bacb 	vcvt.f64.f32	d11, s22
        bmsData->cellVoltages[6], bmsData->cellVoltages[7],
 8001240:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 8001244:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 8001248:	682d      	ldr	r5, [r5, #0]
 800124a:	ed95 ca0e 	vldr	s24, [r5, #56]	@ 0x38
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 800124e:	eeb7 cacc 	vcvt.f64.f32	d12, s24
        bmsData->cellVoltages[8], bmsData->cellVoltages[9],
 8001252:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 8001256:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 800125a:	682d      	ldr	r5, [r5, #0]
 800125c:	ed95 da0f 	vldr	s26, [r5, #60]	@ 0x3c
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001260:	eeb7 dacd 	vcvt.f64.f32	d13, s26
        bmsData->cellVoltages[8], bmsData->cellVoltages[9],
 8001264:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 8001268:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 800126c:	682d      	ldr	r5, [r5, #0]
 800126e:	ed95 ea10 	vldr	s28, [r5, #64]	@ 0x40
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001272:	eeb7 eace 	vcvt.f64.f32	d14, s28
        bmsData->cellBalancing
 8001276:	f507 6581 	add.w	r5, r7, #1032	@ 0x408
 800127a:	f2a5 4504 	subw	r5, r5, #1028	@ 0x404
 800127e:	682d      	ldr	r5, [r5, #0]
 8001280:	f8b5 5044 	ldrh.w	r5, [r5, #68]	@ 0x44
    snprintf(jsonBuffer, sizeof(jsonBuffer),
 8001284:	462e      	mov	r6, r5
 8001286:	f107 0508 	add.w	r5, r7, #8
 800128a:	9624      	str	r6, [sp, #144]	@ 0x90
 800128c:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8001290:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8001294:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 8001298:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 800129c:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 80012a0:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 80012a4:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 80012a8:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 80012ac:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 80012b0:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 80012b4:	940e      	str	r4, [sp, #56]	@ 0x38
 80012b6:	900d      	str	r0, [sp, #52]	@ 0x34
 80012b8:	910c      	str	r1, [sp, #48]	@ 0x30
 80012ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80012bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80012be:	ed8d 3b08 	vstr	d3, [sp, #32]
 80012c2:	ed8d 4b06 	vstr	d4, [sp, #24]
 80012c6:	ed8d 5b04 	vstr	d5, [sp, #16]
 80012ca:	ed8d 6b02 	vstr	d6, [sp, #8]
 80012ce:	ed8d 7b00 	vstr	d7, [sp]
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <BMS_SendJSON+0x21c>)
 80012d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d8:	4628      	mov	r0, r5
 80012da:	f006 fde5 	bl	8007ea8 <sniprintf>
    );

    UART_Transmit_String(&huart3, jsonBuffer);
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <BMS_SendJSON+0x220>)
 80012e6:	f000 f80f 	bl	8001308 <UART_Transmit_String>
}
 80012ea:	bf00      	nop
 80012ec:	f207 470c 	addw	r7, r7, #1036	@ 0x40c
 80012f0:	46bd      	mov	sp, r7
 80012f2:	ecbd 8b0e 	vpop	{d8-d14}
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f8:	0800a070 	.word	0x0800a070
 80012fc:	0800a078 	.word	0x0800a078
 8001300:	0800a080 	.word	0x0800a080
 8001304:	240002b0 	.word	0x240002b0

08001308 <UART_Transmit_String>:

   // UART 문자열 전송
   HAL_StatusTypeDef UART_Transmit_String(UART_HandleTypeDef *huart, char *str) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
      return HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001312:	6838      	ldr	r0, [r7, #0]
 8001314:	f7ff f84c 	bl	80003b0 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f004 feac 	bl	8006080 <HAL_UART_Transmit>
 8001328:	4603      	mov	r3, r0
   }
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <BMS_Task>:

   // BMS 작업 함수
   void BMS_Task(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
      uint32_t currentTime = HAL_GetTick();
 800133a:	f000 feed 	bl	8002118 <HAL_GetTick>
 800133e:	6078      	str	r0, [r7, #4]

      if (currentTime - lastTransmissionTime >= TRANSMISSION_INTERVAL) {
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <BMS_Task+0x38>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800134c:	4293      	cmp	r3, r2
 800134e:	d308      	bcc.n	8001362 <BMS_Task+0x2e>
         // 실제 BMS 데이터 읽기
         BMS_ReadRealData(&g_bmsData);
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <BMS_Task+0x3c>)
 8001352:	f7ff fe15 	bl	8000f80 <BMS_ReadRealData>

         // UART로 JSON 데이터 전송
         BMS_SendJSON(&g_bmsData);
 8001356:	4806      	ldr	r0, [pc, #24]	@ (8001370 <BMS_Task+0x3c>)
 8001358:	f7ff fec4 	bl	80010e4 <BMS_SendJSON>

         lastTransmissionTime = currentTime;
 800135c:	4a03      	ldr	r2, [pc, #12]	@ (800136c <BMS_Task+0x38>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
      }
   }
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000258 	.word	0x24000258
 8001370:	24000210 	.word	0x24000210

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800137a:	f000 fa4b 	bl	8001814 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 fe45 	bl	800200c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001386:	f000 fed3 	bl	8002130 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f8b9 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f000 f9bd 	bl	800170c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001392:	f000 f927 	bl	80015e4 <MX_I2C1_Init>
  MX_USB_OTG_HS_USB_Init();
 8001396:	f000 f9b1 	bl	80016fc <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 800139a:	f000 f963 	bl	8001664 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);  // RST_SHUT pin set low
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a4:	484f      	ldr	r0, [pc, #316]	@ (80014e4 <main+0x170>)
 80013a6:	f001 fa7b 	bl	80028a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);  // DFETOFF pin (BOTHOFF) set low
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013b0:	484c      	ldr	r0, [pc, #304]	@ (80014e4 <main+0x170>)
 80013b2:	f001 fa75 	bl	80028a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80013b6:	200a      	movs	r0, #10
 80013b8:	f000 feba 	bl	8002130 <HAL_Delay>

  CommandSubcommands(BQ769x2_RESET);  // Resets the BQ769x2 registers
 80013bc:	2012      	movs	r0, #18
 80013be:	f7ff fa9a 	bl	80008f6 <CommandSubcommands>
  HAL_Delay(60);
 80013c2:	203c      	movs	r0, #60	@ 0x3c
 80013c4:	f000 feb4 	bl	8002130 <HAL_Delay>
  BQ769x2_Init();  // Configure all of the BQ769x2 register settings
 80013c8:	f7ff fb60 	bl	8000a8c <BQ769x2_Init>
  HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f000 feaf 	bl	8002130 <HAL_Delay>
  CommandSubcommands(FET_ENABLE); // Enable the CHG and DSG FETs
 80013d2:	2022      	movs	r0, #34	@ 0x22
 80013d4:	f7ff fa8f 	bl	80008f6 <CommandSubcommands>
  HAL_Delay(10);
 80013d8:	200a      	movs	r0, #10
 80013da:	f000 fea9 	bl	8002130 <HAL_Delay>
  CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 80013de:	209a      	movs	r0, #154	@ 0x9a
 80013e0:	f7ff fa89 	bl	80008f6 <CommandSubcommands>
                                // demonstrate full-speed measurements in Normal mode.

  HAL_Delay(60); HAL_Delay(60); HAL_Delay(60); HAL_Delay(60);  //wait to start measurements after FETs close
 80013e4:	203c      	movs	r0, #60	@ 0x3c
 80013e6:	f000 fea3 	bl	8002130 <HAL_Delay>
 80013ea:	203c      	movs	r0, #60	@ 0x3c
 80013ec:	f000 fea0 	bl	8002130 <HAL_Delay>
 80013f0:	203c      	movs	r0, #60	@ 0x3c
 80013f2:	f000 fe9d 	bl	8002130 <HAL_Delay>
 80013f6:	203c      	movs	r0, #60	@ 0x3c
 80013f8:	f000 fe9a 	bl	8002130 <HAL_Delay>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 fcf9 	bl	8001df4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001402:	2001      	movs	r0, #1
 8001404:	f000 fcf6 	bl	8001df4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001408:	2002      	movs	r0, #2
 800140a:	f000 fcf3 	bl	8001df4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800140e:	2101      	movs	r1, #1
 8001410:	2000      	movs	r0, #0
 8001412:	f000 fd65 	bl	8001ee0 <BSP_PB_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     AlarmBits = BQ769x2_ReadAlarmStatus();
 8001416:	f7ff fc25 	bl	8000c64 <BQ769x2_ReadAlarmStatus>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <main+0x174>)
 8001420:	801a      	strh	r2, [r3, #0]
                       if (AlarmBits & 0x80) {  // Check if FULLSCAN is complete. If set, new measurements are available
 8001422:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <main+0x174>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <main+0x11c>
                             BQ769x2_ReadAllVoltages();
 800142e:	f7ff fce1 	bl	8000df4 <BQ769x2_ReadAllVoltages>
                             Pack_Current = BQ769x2_ReadCurrent();
 8001432:	f7ff fd2b 	bl	8000e8c <BQ769x2_ReadCurrent>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <main+0x178>)
 800143c:	801a      	strh	r2, [r3, #0]
                             Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
 800143e:	2070      	movs	r0, #112	@ 0x70
 8001440:	f7ff fd3a 	bl	8000eb8 <BQ769x2_ReadTemperature>
 8001444:	eef0 7a40 	vmov.f32	s15, s0
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <main+0x17c>)
 8001454:	801a      	strh	r2, [r3, #0]
                             Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
 8001456:	2074      	movs	r0, #116	@ 0x74
 8001458:	f7ff fd2e 	bl	8000eb8 <BQ769x2_ReadTemperature>
 800145c:	eef0 7a40 	vmov.f32	s15, s0
 8001460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001464:	ee17 3a90 	vmov	r3, s15
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <main+0x17c>)
 800146c:	805a      	strh	r2, [r3, #2]
                             Temperature[2] = BQ769x2_ReadTemperature(0x68);
 800146e:	2068      	movs	r0, #104	@ 0x68
 8001470:	f7ff fd22 	bl	8000eb8 <BQ769x2_ReadTemperature>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
 8001478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147c:	ee17 3a90 	vmov	r3, s15
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <main+0x17c>)
 8001484:	809a      	strh	r2, [r3, #4]

                          DirectCommands(AlarmStatus, 0x0080, W);  // Clear the FULLSCAN bit
 8001486:	2201      	movs	r2, #1
 8001488:	2180      	movs	r1, #128	@ 0x80
 800148a:	2062      	movs	r0, #98	@ 0x62
 800148c:	f7ff facc 	bl	8000a28 <DirectCommands>

                       // BMS 데이터 읽기 및 UART 전송 (1초마다)



                       BQ769x2_ReadSafetyStatus();
 8001490:	f7ff fbfc 	bl	8000c8c <BQ769x2_ReadSafetyStatus>

                       BQ769x2_ReadFETStatus();
 8001494:	f7ff fbaa 	bl	8000bec <BQ769x2_ReadFETStatus>

                       BQ769x2_CheckCellBalancing();
 8001498:	f7ff fd56 	bl	8000f48 <BQ769x2_CheckCellBalancing>

                       BQ769x2_CheckPowerMode();
 800149c:	f7ff fd3e 	bl	8000f1c <BQ769x2_CheckPowerMode>

                       HAL_I2C_Mem_Write(&hi2c1, 0x10, 0x3E, 1, Enable_Protection_A_Read, 2, 100);
 80014a0:	2364      	movs	r3, #100	@ 0x64
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2302      	movs	r3, #2
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <main+0x180>)
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	223e      	movs	r2, #62	@ 0x3e
 80014b0:	2110      	movs	r1, #16
 80014b2:	4811      	ldr	r0, [pc, #68]	@ (80014f8 <main+0x184>)
 80014b4:	f001 faaa 	bl	8002a0c <HAL_I2C_Mem_Write>
                       HAL_Delay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f000 fe39 	bl	8002130 <HAL_Delay>

                       HAL_I2C_Mem_Read(&hi2c1, 0x10, 0x40, 1, &RX_Buf, 1, 100);
 80014be:	2364      	movs	r3, #100	@ 0x64
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2301      	movs	r3, #1
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <main+0x188>)
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	2240      	movs	r2, #64	@ 0x40
 80014ce:	2110      	movs	r1, #16
 80014d0:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <main+0x184>)
 80014d2:	f001 fbaf 	bl	8002c34 <HAL_I2C_Mem_Read>
                       HAL_Delay(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f000 fe2a 	bl	8002130 <HAL_Delay>

                       BMS_Task();
 80014dc:	f7ff ff2a 	bl	8001334 <BMS_Task>
     AlarmBits = BQ769x2_ReadAlarmStatus();
 80014e0:	e799      	b.n	8001416 <main+0xa2>
 80014e2:	bf00      	nop
 80014e4:	58020800 	.word	0x58020800
 80014e8:	24000398 	.word	0x24000398
 80014ec:	24000394 	.word	0x24000394
 80014f0:	24000388 	.word	0x24000388
 80014f4:	24000000 	.word	0x24000000
 80014f8:	2400025c 	.word	0x2400025c
 80014fc:	24000346 	.word	0x24000346

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b09c      	sub	sp, #112	@ 0x70
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	224c      	movs	r2, #76	@ 0x4c
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f006 fd43 	bl	8007f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2220      	movs	r2, #32
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f006 fd3d 	bl	8007f9a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001520:	2002      	movs	r0, #2
 8001522:	f001 fffb 	bl	800351c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <SystemClock_Config+0xe0>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001532:	4a2b      	ldr	r2, [pc, #172]	@ (80015e0 <SystemClock_Config+0xe0>)
 8001534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <SystemClock_Config+0xe0>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001546:	bf00      	nop
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <SystemClock_Config+0xe0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001554:	d1f8      	bne.n	8001548 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001556:	2322      	movs	r3, #34	@ 0x22
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800155a:	2301      	movs	r3, #1
 800155c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800155e:	2340      	movs	r3, #64	@ 0x40
 8001560:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001562:	2301      	movs	r3, #1
 8001564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156a:	2300      	movs	r3, #0
 800156c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800156e:	2304      	movs	r3, #4
 8001570:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001572:	230c      	movs	r3, #12
 8001574:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001576:	2301      	movs	r3, #1
 8001578:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800157a:	2304      	movs	r3, #4
 800157c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800157e:	2302      	movs	r3, #2
 8001580:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001582:	230c      	movs	r3, #12
 8001584:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001586:	2300      	movs	r3, #0
 8001588:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fffc 	bl	8003590 <HAL_RCC_OscConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800159e:	f000 f965 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a2:	233f      	movs	r3, #63	@ 0x3f
 80015a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a6:	2303      	movs	r3, #3
 80015a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015ae:	2308      	movs	r3, #8
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015b2:	2340      	movs	r3, #64	@ 0x40
 80015b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015b6:	2340      	movs	r3, #64	@ 0x40
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fbbb 	bl	8003d44 <HAL_RCC_ClockConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80015d4:	f000 f94a 	bl	800186c <Error_Handler>
  }
}
 80015d8:	bf00      	nop
 80015da:	3770      	adds	r7, #112	@ 0x70
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	58024800 	.word	0x58024800

080015e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_I2C1_Init+0x74>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	@ (800165c <MX_I2C1_Init+0x78>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <MX_I2C1_Init+0x74>)
 80015f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001660 <MX_I2C1_Init+0x7c>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <MX_I2C1_Init+0x74>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161e:	480e      	ldr	r0, [pc, #56]	@ (8001658 <MX_I2C1_Init+0x74>)
 8001620:	f001 f958 	bl	80028d4 <HAL_I2C_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800162a:	f000 f91f 	bl	800186c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4809      	ldr	r0, [pc, #36]	@ (8001658 <MX_I2C1_Init+0x74>)
 8001632:	f001 fedb 	bl	80033ec <HAL_I2CEx_ConfigAnalogFilter>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800163c:	f000 f916 	bl	800186c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_I2C1_Init+0x74>)
 8001644:	f001 ff1d 	bl	8003482 <HAL_I2CEx_ConfigDigitalFilter>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800164e:	f000 f90d 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2400025c 	.word	0x2400025c
 800165c:	40005400 	.word	0x40005400
 8001660:	20303e5d 	.word	0x20303e5d

08001664 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001668:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800166a:	4a23      	ldr	r2, [pc, #140]	@ (80016f8 <MX_USART3_UART_Init+0x94>)
 800166c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ac:	4811      	ldr	r0, [pc, #68]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016ae:	f004 fc97 	bl	8005fe0 <HAL_UART_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016b8:	f000 f8d8 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016c0:	f005 fe31 	bl	8007326 <HAL_UARTEx_SetTxFifoThreshold>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ca:	f000 f8cf 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016d2:	f005 fe66 	bl	80073a2 <HAL_UARTEx_SetRxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016dc:	f000 f8c6 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016e2:	f005 fde7 	bl	80072b4 <HAL_UARTEx_DisableFifoMode>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016ec:	f000 f8be 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	240002b0 	.word	0x240002b0
 80016f8:	40004800 	.word	0x40004800

080016fc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b39      	ldr	r3, [pc, #228]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001728:	4a37      	ldr	r2, [pc, #220]	@ (8001808 <MX_GPIO_Init+0xfc>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001732:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001740:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001746:	4a30      	ldr	r2, [pc, #192]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001764:	4a28      	ldr	r2, [pc, #160]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <MX_GPIO_Init+0xfc>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001782:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <MX_GPIO_Init+0xfc>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <MX_GPIO_Init+0xfc>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80017a0:	481a      	ldr	r0, [pc, #104]	@ (800180c <MX_GPIO_Init+0x100>)
 80017a2:	f001 f87d 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4815      	ldr	r0, [pc, #84]	@ (8001810 <MX_GPIO_Init+0x104>)
 80017bc:	f000 fec8 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80017d2:	230a      	movs	r3, #10
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <MX_GPIO_Init+0x104>)
 80017de:	f000 feb7 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4804      	ldr	r0, [pc, #16]	@ (800180c <MX_GPIO_Init+0x100>)
 80017fc:	f000 fea8 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	@ 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	58024400 	.word	0x58024400
 800180c:	58020800 	.word	0x58020800
 8001810:	58020000 	.word	0x58020000

08001814 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800181a:	463b      	mov	r3, r7
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001826:	f000 fdb7 	bl	8002398 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800182e:	2300      	movs	r3, #0
 8001830:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001836:	231f      	movs	r3, #31
 8001838:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800183a:	2387      	movs	r3, #135	@ 0x87
 800183c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800183e:	2300      	movs	r3, #0
 8001840:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001842:	2300      	movs	r3, #0
 8001844:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001856:	463b      	mov	r3, r7
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fdd5 	bl	8002408 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800185e:	2004      	movs	r0, #4
 8001860:	f000 fdb2 	bl	80023c8 <HAL_MPU_Enable>

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <Error_Handler+0x8>

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_MspInit+0x30>)
 8001880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001884:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <HAL_MspInit+0x30>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_MspInit+0x30>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	58024400 	.word	0x58024400

080018ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0b8      	sub	sp, #224	@ 0xe0
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	22b8      	movs	r2, #184	@ 0xb8
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f006 fb64 	bl	8007f9a <memset>
  if(hi2c->Instance==I2C1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a27      	ldr	r2, [pc, #156]	@ (8001974 <HAL_I2C_MspInit+0xc8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d146      	bne.n	800196a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018dc:	f04f 0208 	mov.w	r2, #8
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fdb2 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80018fe:	f7ff ffb5 	bl	800186c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <HAL_I2C_MspInit+0xcc>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001908:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <HAL_I2C_MspInit+0xcc>)
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_I2C_MspInit+0xcc>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001924:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192e:	2301      	movs	r3, #1
 8001930:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193a:	2304      	movs	r3, #4
 800193c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001944:	4619      	mov	r1, r3
 8001946:	480d      	ldr	r0, [pc, #52]	@ (800197c <HAL_I2C_MspInit+0xd0>)
 8001948:	f000 fe02 	bl	8002550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_I2C_MspInit+0xcc>)
 800194e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001952:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_I2C_MspInit+0xcc>)
 8001954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001958:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_I2C_MspInit+0xcc>)
 800195e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800196a:	bf00      	nop
 800196c:	37e0      	adds	r7, #224	@ 0xe0
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40005400 	.word	0x40005400
 8001978:	58024400 	.word	0x58024400
 800197c:	58020400 	.word	0x58020400

08001980 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0b8      	sub	sp, #224	@ 0xe0
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	22b8      	movs	r2, #184	@ 0xb8
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f006 fafa 	bl	8007f9a <memset>
  if(huart->Instance==USART3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_UART_MspInit+0xc8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d146      	bne.n	8001a3e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b0:	f04f 0202 	mov.w	r2, #2
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fd48 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019d2:	f7ff ff4b 	bl	800186c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_UART_MspInit+0xcc>)
 80019d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019dc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a4c <HAL_UART_MspInit+0xcc>)
 80019de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_UART_MspInit+0xcc>)
 80019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_UART_MspInit+0xcc>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fa:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <HAL_UART_MspInit+0xcc>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_UART_MspInit+0xcc>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a32:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <HAL_UART_MspInit+0xd0>)
 8001a3a:	f000 fd89 	bl	8002550 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001a3e:	bf00      	nop
 8001a40:	37e0      	adds	r7, #224	@ 0xe0
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40004800 	.word	0x40004800
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	58020c00 	.word	0x58020c00

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <NMI_Handler+0x4>

08001a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aaa:	f000 fb21 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 fa84 	bl	8001fc4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f006 fab1 	bl	8008040 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	bf00      	nop
 8001b04:	e7fd      	b.n	8001b02 <_exit+0x12>

08001b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e00a      	b.n	8001b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b18:	f3af 8000 	nop.w
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf0      	blt.n	8001b18 <_read+0x12>
  }

  return len;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e009      	b.n	8001b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf1      	blt.n	8001b52 <_write+0x12>
  }
  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_close>:

int _close(int file)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_isatty>:

int _isatty(int file)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f006 fa16 	bl	8008040 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	24050000 	.word	0x24050000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	240003ac 	.word	0x240003ac
 8001c48:	24000508 	.word	0x24000508

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c50:	4b3e      	ldr	r3, [pc, #248]	@ (8001d4c <SystemInit+0x100>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	4a3d      	ldr	r2, [pc, #244]	@ (8001d4c <SystemInit+0x100>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c60:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <SystemInit+0x104>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d807      	bhi.n	8001c7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c6c:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <SystemInit+0x104>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 030f 	bic.w	r3, r3, #15
 8001c74:	4a36      	ldr	r2, [pc, #216]	@ (8001d50 <SystemInit+0x104>)
 8001c76:	f043 0307 	orr.w	r3, r3, #7
 8001c7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c7c:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <SystemInit+0x108>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <SystemInit+0x108>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c88:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <SystemInit+0x108>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c8e:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <SystemInit+0x108>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4930      	ldr	r1, [pc, #192]	@ (8001d54 <SystemInit+0x108>)
 8001c94:	4b30      	ldr	r3, [pc, #192]	@ (8001d58 <SystemInit+0x10c>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <SystemInit+0x104>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <SystemInit+0x104>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 030f 	bic.w	r3, r3, #15
 8001cae:	4a28      	ldr	r2, [pc, #160]	@ (8001d50 <SystemInit+0x104>)
 8001cb0:	f043 0307 	orr.w	r3, r3, #7
 8001cb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <SystemInit+0x108>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <SystemInit+0x108>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <SystemInit+0x108>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <SystemInit+0x108>)
 8001cca:	4a24      	ldr	r2, [pc, #144]	@ (8001d5c <SystemInit+0x110>)
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <SystemInit+0x108>)
 8001cd0:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <SystemInit+0x114>)
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <SystemInit+0x108>)
 8001cd6:	4a23      	ldr	r2, [pc, #140]	@ (8001d64 <SystemInit+0x118>)
 8001cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <SystemInit+0x108>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <SystemInit+0x108>)
 8001ce2:	4a20      	ldr	r2, [pc, #128]	@ (8001d64 <SystemInit+0x118>)
 8001ce4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <SystemInit+0x108>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cec:	4b19      	ldr	r3, [pc, #100]	@ (8001d54 <SystemInit+0x108>)
 8001cee:	4a1d      	ldr	r2, [pc, #116]	@ (8001d64 <SystemInit+0x118>)
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <SystemInit+0x108>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <SystemInit+0x108>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <SystemInit+0x108>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <SystemInit+0x108>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <SystemInit+0x108>)
 8001d0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d113      	bne.n	8001d40 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <SystemInit+0x108>)
 8001d1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d54 <SystemInit+0x108>)
 8001d20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d24:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <SystemInit+0x11c>)
 8001d2a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <SystemInit+0x108>)
 8001d32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d36:	4a07      	ldr	r2, [pc, #28]	@ (8001d54 <SystemInit+0x108>)
 8001d38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d3c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00
 8001d50:	52002000 	.word	0x52002000
 8001d54:	58024400 	.word	0x58024400
 8001d58:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d5c:	02020200 	.word	0x02020200
 8001d60:	01ff0000 	.word	0x01ff0000
 8001d64:	01010280 	.word	0x01010280
 8001d68:	52004000 	.word	0x52004000

08001d6c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <ExitRun0Mode+0x2c>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <ExitRun0Mode+0x2c>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001d7c:	bf00      	nop
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <ExitRun0Mode+0x2c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f9      	beq.n	8001d7e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	58024800 	.word	0x58024800

08001d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d9c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001dd8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001da0:	f7ff ffe4 	bl	8001d6c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001da4:	f7ff ff52 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f006 f93d 	bl	800804c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd2:	f7ff facf 	bl	8001374 <main>
  bx  lr
 8001dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dd8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001ddc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001de0:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8001de4:	0800a53c 	.word	0x0800a53c
  ldr r2, =_sbss
 8001de8:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8001dec:	24000508 	.word	0x24000508

08001df0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC3_IRQHandler>
	...

08001df4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	@ 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <BSP_LED_Init+0x28>
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d006      	beq.n	8001e1c <BSP_LED_Init+0x28>
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d003      	beq.n	8001e1c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e14:	f06f 0301 	mvn.w	r3, #1
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e1a:	e055      	b.n	8001ec8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001e22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e32:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	e021      	b.n	8001e86 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10f      	bne.n	8001e68 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001e48:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	e00e      	b.n	8001e86 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e78:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <BSP_LED_Init+0xe0>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <BSP_LED_Init+0xe4>)
 8001e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e8e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <BSP_LED_Init+0xe8>)
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	f107 0218 	add.w	r2, r7, #24
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fb50 	bl	8002550 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <BSP_LED_Init+0xe8>)
 8001eb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4a07      	ldr	r2, [pc, #28]	@ (8001ed8 <BSP_LED_Init+0xe4>)
 8001ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f000 fcec 	bl	80028a0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3730      	adds	r7, #48	@ 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	0800a180 	.word	0x0800a180
 8001edc:	2400000c 	.word	0x2400000c

08001ee0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460a      	mov	r2, r1
 8001eea:	71fb      	strb	r3, [r7, #7]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8001fac <BSP_PB_Init+0xcc>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8001fac <BSP_PB_Init+0xcc>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f00:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <BSP_PB_Init+0xcc>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001f0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f12:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001f14:	2302      	movs	r3, #2
 8001f16:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4a21      	ldr	r2, [pc, #132]	@ (8001fb0 <BSP_PB_Init+0xd0>)
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	f107 020c 	add.w	r2, r7, #12
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fb0b 	bl	8002550 <HAL_GPIO_Init>
 8001f3a:	e031      	b.n	8001fa0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001f3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f40:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <BSP_PB_Init+0xd0>)
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fafd 	bl	8002550 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4a16      	ldr	r2, [pc, #88]	@ (8001fb4 <BSP_PB_Init+0xd4>)
 8001f5c:	441a      	add	r2, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4915      	ldr	r1, [pc, #84]	@ (8001fb8 <BSP_PB_Init+0xd8>)
 8001f62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	f000 faac 	bl	80024c6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4a10      	ldr	r2, [pc, #64]	@ (8001fb4 <BSP_PB_Init+0xd4>)
 8001f74:	1898      	adds	r0, r3, r2
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	4a10      	ldr	r2, [pc, #64]	@ (8001fbc <BSP_PB_Init+0xdc>)
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2100      	movs	r1, #0
 8001f82:	f000 fa81 	bl	8002488 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001f86:	2028      	movs	r0, #40	@ 0x28
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <BSP_PB_Init+0xe0>)
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	2200      	movs	r2, #0
 8001f92:	4619      	mov	r1, r3
 8001f94:	f000 f9cb 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f98:	2328      	movs	r3, #40	@ 0x28
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f9e1 	bl	8002362 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	24000018 	.word	0x24000018
 8001fb4:	240003b0 	.word	0x240003b0
 8001fb8:	0800a188 	.word	0x0800a188
 8001fbc:	2400001c 	.word	0x2400001c
 8001fc0:	24000020 	.word	0x24000020

08001fc4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <BSP_PB_IRQHandler+0x20>)
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fa8a 	bl	80024f0 <HAL_EXTI_IRQHandler>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	240003b0 	.word	0x240003b0

08001fe8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff fff0 	bl	8001fe8 <BSP_PB_Callback>
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002012:	2003      	movs	r0, #3
 8002014:	f000 f980 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002018:	f002 f84a 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_Init+0x68>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	4913      	ldr	r1, [pc, #76]	@ (8002078 <HAL_Init+0x6c>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_Init+0x68>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a0e      	ldr	r2, [pc, #56]	@ (8002078 <HAL_Init+0x6c>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <HAL_Init+0x70>)
 800204e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002050:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_Init+0x74>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f814 	bl	8002084 <HAL_InitTick>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e002      	b.n	800206c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002066:	f7ff fc07 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	58024400 	.word	0x58024400
 8002078:	0800a170 	.word	0x0800a170
 800207c:	24000008 	.word	0x24000008
 8002080:	24000004 	.word	0x24000004

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800208c:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_InitTick+0x60>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e021      	b.n	80020dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <HAL_InitTick+0x64>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_InitTick+0x60>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f965 	bl	800237e <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f92f 	bl	800232e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	@ (80020ec <HAL_InitTick+0x68>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	24000028 	.word	0x24000028
 80020e8:	24000004 	.word	0x24000004
 80020ec:	24000024 	.word	0x24000024

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	24000028 	.word	0x24000028
 8002114:	240003b8 	.word	0x240003b8

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	240003b8 	.word	0x240003b8

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff ffee 	bl	8002118 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffde 	bl	8002118 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	24000028 	.word	0x24000028

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <__NVIC_SetPriorityGrouping+0x40>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <__NVIC_SetPriorityGrouping+0x40>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00
 80021bc:	05fa0000 	.word	0x05fa0000

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db0b      	blt.n	8002206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4907      	ldr	r1, [pc, #28]	@ (8002214 <__NVIC_EnableIRQ+0x38>)
 80021f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff29 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff40 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff90 	bl	800226c <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5f 	bl	8002218 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff33 	bl	80021dc <__NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffa4 	bl	80022d4 <SysTick_Config>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800239c:	f3bf 8f5f 	dmb	sy
}
 80023a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023a2:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <HAL_MPU_Disable+0x28>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	4a06      	ldr	r2, [pc, #24]	@ (80023c0 <HAL_MPU_Disable+0x28>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_MPU_Disable+0x2c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00
 80023c4:	e000ed90 	.word	0xe000ed90

080023c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80023d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002400 <HAL_MPU_Enable+0x38>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_MPU_Enable+0x3c>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	4a09      	ldr	r2, [pc, #36]	@ (8002404 <HAL_MPU_Enable+0x3c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80023e6:	f3bf 8f4f 	dsb	sy
}
 80023ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023ec:	f3bf 8f6f 	isb	sy
}
 80023f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed90 	.word	0xe000ed90
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	785a      	ldrb	r2, [r3, #1]
 8002414:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_MPU_ConfigRegion+0x7c>)
 8002416:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_MPU_ConfigRegion+0x7c>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <HAL_MPU_ConfigRegion+0x7c>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_MPU_ConfigRegion+0x7c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7b1b      	ldrb	r3, [r3, #12]
 8002430:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7adb      	ldrb	r3, [r3, #11]
 8002436:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002438:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7a9b      	ldrb	r3, [r3, #10]
 800243e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7b5b      	ldrb	r3, [r3, #13]
 8002446:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002448:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7b9b      	ldrb	r3, [r3, #14]
 800244e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002450:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7bdb      	ldrb	r3, [r3, #15]
 8002456:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002458:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7a5b      	ldrb	r3, [r3, #9]
 800245e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002460:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7a1b      	ldrb	r3, [r3, #8]
 8002466:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002468:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002470:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002472:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002474:	6113      	str	r3, [r2, #16]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed90 	.word	0xe000ed90

08002488 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	460b      	mov	r3, r1
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e00a      	b.n	80024ba <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	605a      	str	r2, [r3, #4]
      break;
 80024b0:	e002      	b.n	80024b8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
      break;
 80024b6:	bf00      	nop
  }

  return status;
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e003      	b.n	80024e2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2201      	movs	r2, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	011a      	lsls	r2, r3, #4
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <HAL_EXTI_IRQHandler+0x5c>)
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4798      	blx	r3
    }
  }
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	58000088 	.word	0x58000088

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800255e:	4b86      	ldr	r3, [pc, #536]	@ (8002778 <HAL_GPIO_Init+0x228>)
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002562:	e18c      	b.n	800287e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 817e 	beq.w	8002878 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d005      	beq.n	8002594 <HAL_GPIO_Init+0x44>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0201 	and.w	r2, r3, #1
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d017      	beq.n	8002632 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d123      	bne.n	8002686 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	69b9      	ldr	r1, [r7, #24]
 8002682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80d8 	beq.w	8002878 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c8:	4b2c      	ldr	r3, [pc, #176]	@ (800277c <HAL_GPIO_Init+0x22c>)
 80026ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026ce:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <HAL_GPIO_Init+0x22c>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <HAL_GPIO_Init+0x22c>)
 80026da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a26      	ldr	r2, [pc, #152]	@ (8002780 <HAL_GPIO_Init+0x230>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1d      	ldr	r2, [pc, #116]	@ (8002784 <HAL_GPIO_Init+0x234>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d04a      	beq.n	80027a8 <HAL_GPIO_Init+0x258>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1c      	ldr	r2, [pc, #112]	@ (8002788 <HAL_GPIO_Init+0x238>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <HAL_GPIO_Init+0x222>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1b      	ldr	r2, [pc, #108]	@ (800278c <HAL_GPIO_Init+0x23c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x21e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <HAL_GPIO_Init+0x240>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x21a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a19      	ldr	r2, [pc, #100]	@ (8002794 <HAL_GPIO_Init+0x244>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x216>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a18      	ldr	r2, [pc, #96]	@ (8002798 <HAL_GPIO_Init+0x248>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x212>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a17      	ldr	r2, [pc, #92]	@ (800279c <HAL_GPIO_Init+0x24c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x20e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <HAL_GPIO_Init+0x250>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x20a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <HAL_GPIO_Init+0x254>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x206>
 8002752:	2309      	movs	r3, #9
 8002754:	e029      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 8002756:	230a      	movs	r3, #10
 8002758:	e027      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 800275a:	2307      	movs	r3, #7
 800275c:	e025      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 800275e:	2306      	movs	r3, #6
 8002760:	e023      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 8002762:	2305      	movs	r3, #5
 8002764:	e021      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 8002766:	2304      	movs	r3, #4
 8002768:	e01f      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 800276a:	2303      	movs	r3, #3
 800276c:	e01d      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 800276e:	2302      	movs	r3, #2
 8002770:	e01b      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 8002772:	2301      	movs	r3, #1
 8002774:	e019      	b.n	80027aa <HAL_GPIO_Init+0x25a>
 8002776:	bf00      	nop
 8002778:	58000080 	.word	0x58000080
 800277c:	58024400 	.word	0x58024400
 8002780:	58000400 	.word	0x58000400
 8002784:	58020000 	.word	0x58020000
 8002788:	58020400 	.word	0x58020400
 800278c:	58020800 	.word	0x58020800
 8002790:	58020c00 	.word	0x58020c00
 8002794:	58021000 	.word	0x58021000
 8002798:	58021400 	.word	0x58021400
 800279c:	58021800 	.word	0x58021800
 80027a0:	58021c00 	.word	0x58021c00
 80027a4:	58022400 	.word	0x58022400
 80027a8:	2300      	movs	r3, #0
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	4093      	lsls	r3, r2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ba:	4938      	ldr	r1, [pc, #224]	@ (800289c <HAL_GPIO_Init+0x34c>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800281c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3301      	adds	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	f47f ae6b 	bne.w	8002564 <HAL_GPIO_Init+0x14>
  }
}
 800288e:	bf00      	nop
 8002890:	bf00      	nop
 8002892:	3724      	adds	r7, #36	@ 0x24
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	58000400 	.word	0x58000400

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e08b      	b.n	80029fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe ffd6 	bl	80018ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	@ 0x24
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002924:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002934:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e006      	b.n	800295c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800295a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d108      	bne.n	8002976 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e007      	b.n	8002986 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <HAL_I2C_Init+0x134>)
 8002992:	430b      	orrs	r3, r1
 8002994:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69d9      	ldr	r1, [r3, #28]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1a      	ldr	r2, [r3, #32]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	02008000 	.word	0x02008000

08002a0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	f040 80f9 	bne.w	8002c26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x34>
 8002a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0ed      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Mem_Write+0x4e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e0e6      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a62:	f7ff fb59 	bl	8002118 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fac3 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0d1      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	@ 0x21
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aac:	88f8      	ldrh	r0, [r7, #6]
 8002aae:	893a      	ldrh	r2, [r7, #8]
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4603      	mov	r3, r0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f9d3 	bl	8002e68 <I2C_RequestMemoryWrite>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0a9      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2bff      	cmp	r3, #255	@ 0xff
 8002adc:	d90e      	bls.n	8002afc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	@ 0xff
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	2300      	movs	r3, #0
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fc47 	bl	8003388 <I2C_TransferConfig>
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fc36 	bl	8003388 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fac6 	bl	80030b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e07b      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d034      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d130      	bne.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2180      	movs	r1, #128	@ 0x80
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fa3f 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04d      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2bff      	cmp	r3, #255	@ 0xff
 8002b94:	d90e      	bls.n	8002bb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22ff      	movs	r2, #255	@ 0xff
 8002b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fbeb 	bl	8003388 <I2C_TransferConfig>
 8002bb2:	e00f      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	8979      	ldrh	r1, [r7, #10]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fbda 	bl	8003388 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d19e      	bne.n	8002b1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 faac 	bl	8003140 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e01a      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_I2C_Mem_Write+0x224>)
 8002c06:	400b      	ands	r3, r1
 8002c08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	fe00e800 	.word	0xfe00e800

08002c34 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 80fd 	bne.w	8002e56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x34>
 8002c62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0f1      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Mem_Read+0x4e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e0ea      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c8a:	f7ff fa45 	bl	8002118 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f9af 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0d5      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2222      	movs	r2, #34	@ 0x22
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2240      	movs	r2, #64	@ 0x40
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd4:	88f8      	ldrh	r0, [r7, #6]
 8002cd6:	893a      	ldrh	r2, [r7, #8]
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f913 	bl	8002f10 <I2C_RequestMemoryRead>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0ad      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	@ 0xff
 8002d04:	d90e      	bls.n	8002d24 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	@ 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	4b52      	ldr	r3, [pc, #328]	@ (8002e60 <HAL_I2C_Mem_Read+0x22c>)
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fb33 	bl	8003388 <I2C_TransferConfig>
 8002d22:	e00f      	b.n	8002d44 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	4b4a      	ldr	r3, [pc, #296]	@ (8002e60 <HAL_I2C_Mem_Read+0x22c>)
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fb22 	bl	8003388 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f956 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07c      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d034      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x1d0>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d130      	bne.n	8002e04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	@ 0x80
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f927 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e04d      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	@ 0xff
 8002dc4:	d90e      	bls.n	8002de4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	@ 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fad3 	bl	8003388 <I2C_TransferConfig>
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fac2 	bl	8003388 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d19a      	bne.n	8002d44 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f994 	bl	8003140 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01a      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_I2C_Mem_Read+0x230>)
 8002e36:	400b      	ands	r3, r1
 8002e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	80002400 	.word	0x80002400
 8002e64:	fe00e800 	.word	0xfe00e800

08002e68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <I2C_RequestMemoryWrite+0xa4>)
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa79 	bl	8003388 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f909 	bl	80030b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e02c      	b.n	8002f04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eba:	e015      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ebc:	893b      	ldrh	r3, [r7, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8ef 	bl	80030b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e012      	b.n	8002f04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2180      	movs	r1, #128	@ 0x80
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f884 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	80002000 	.word	0x80002000

08002f10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	817b      	strh	r3, [r7, #10]
 8002f22:	460b      	mov	r3, r1
 8002f24:	813b      	strh	r3, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <I2C_RequestMemoryRead+0xa4>)
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa26 	bl	8003388 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f8b6 	bl	80030b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e02c      	b.n	8002faa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f60:	e015      	b.n	8002f8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f89c 	bl	80030b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e012      	b.n	8002faa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f84:	893b      	ldrh	r3, [r7, #8]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2140      	movs	r1, #64	@ 0x40
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f831 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	80002000 	.word	0x80002000

08002fb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d103      	bne.n	8002fd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d007      	beq.n	8002ff4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	619a      	str	r2, [r3, #24]
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003010:	e03b      	b.n	800308a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f8d6 	bl	80031c8 <I2C_IsErrorOccurred>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e041      	b.n	80030aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d02d      	beq.n	800308a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7ff f873 	bl	8002118 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x44>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d122      	bne.n	800308a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	429a      	cmp	r2, r3
 8003060:	d113      	bne.n	800308a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00f      	b.n	80030aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4013      	ands	r3, r2
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	bf0c      	ite	eq
 800309a:	2301      	moveq	r3, #1
 800309c:	2300      	movne	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d0b4      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030be:	e033      	b.n	8003128 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f87f 	bl	80031c8 <I2C_IsErrorOccurred>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e031      	b.n	8003138 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d025      	beq.n	8003128 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030dc:	f7ff f81c 	bl	8002118 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d302      	bcc.n	80030f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11a      	bne.n	8003128 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d013      	beq.n	8003128 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e007      	b.n	8003138 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d1c4      	bne.n	80030c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314c:	e02f      	b.n	80031ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f838 	bl	80031c8 <I2C_IsErrorOccurred>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e02d      	b.n	80031be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe ffd9 	bl	8002118 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d11a      	bne.n	80031ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b20      	cmp	r3, #32
 8003184:	d013      	beq.n	80031ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e007      	b.n	80031be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d1c8      	bne.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	@ 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d068      	beq.n	80032c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031fc:	e049      	b.n	8003292 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d045      	beq.n	8003292 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe ff87 	bl	8002118 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_IsErrorOccurred+0x54>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d13a      	bne.n	8003292 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003226:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800322e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800323a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800323e:	d121      	bne.n	8003284 <I2C_IsErrorOccurred+0xbc>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003246:	d01d      	beq.n	8003284 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	2b20      	cmp	r3, #32
 800324c:	d01a      	beq.n	8003284 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800325c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800325e:	f7fe ff5b 	bl	8002118 <HAL_GetTick>
 8003262:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003264:	e00e      	b.n	8003284 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003266:	f7fe ff57 	bl	8002118 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b19      	cmp	r3, #25
 8003272:	d907      	bls.n	8003284 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f043 0320 	orr.w	r3, r3, #32
 800327a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003282:	e006      	b.n	8003292 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b20      	cmp	r3, #32
 8003290:	d1e9      	bne.n	8003266 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b20      	cmp	r3, #32
 800329e:	d003      	beq.n	80032a8 <I2C_IsErrorOccurred+0xe0>
 80032a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0aa      	beq.n	80031fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d103      	bne.n	80032b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2220      	movs	r2, #32
 80032b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	f043 0308 	orr.w	r3, r3, #8
 8003300:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800330a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800332c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff fe3b 	bl	8002fb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0d      	ldr	r3, [pc, #52]	@ (8003384 <I2C_IsErrorOccurred+0x1bc>)
 800334e:	400b      	ands	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800337a:	4618      	mov	r0, r3
 800337c:	3728      	adds	r7, #40	@ 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	fe00e800 	.word	0xfe00e800

08003388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	4613      	mov	r3, r2
 8003398:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033a0:	7a7b      	ldrb	r3, [r7, #9]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	0d5b      	lsrs	r3, r3, #21
 80033c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <I2C_TransferConfig+0x60>)
 80033c8:	430b      	orrs	r3, r1
 80033ca:	43db      	mvns	r3, r3
 80033cc:	ea02 0103 	and.w	r1, r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	03ff63ff 	.word	0x03ff63ff

080033ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d138      	bne.n	8003474 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800340c:	2302      	movs	r3, #2
 800340e:	e032      	b.n	8003476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	@ 0x24
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800343e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6819      	ldr	r1, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b20      	cmp	r3, #32
 8003496:	d139      	bne.n	800350c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e033      	b.n	800350e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2224      	movs	r2, #36	@ 0x24
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_PWREx_ConfigSupply+0x70>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d00a      	beq.n	8003546 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003530:	4b16      	ldr	r3, [pc, #88]	@ (800358c <HAL_PWREx_ConfigSupply+0x70>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e01f      	b.n	8003582 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e01d      	b.n	8003582 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_PWREx_ConfigSupply+0x70>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f023 0207 	bic.w	r2, r3, #7
 800354e:	490f      	ldr	r1, [pc, #60]	@ (800358c <HAL_PWREx_ConfigSupply+0x70>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4313      	orrs	r3, r2
 8003554:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003556:	f7fe fddf 	bl	8002118 <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800355c:	e009      	b.n	8003572 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800355e:	f7fe fddb 	bl	8002118 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800356c:	d901      	bls.n	8003572 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e007      	b.n	8003582 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_PWREx_ConfigSupply+0x70>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800357a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357e:	d1ee      	bne.n	800355e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	58024800 	.word	0x58024800

08003590 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	@ 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e3c8      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8087 	beq.w	80036be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b0:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ba:	4b86      	ldr	r3, [pc, #536]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d007      	beq.n	80035d6 <HAL_RCC_OscConfig+0x46>
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	2b18      	cmp	r3, #24
 80035ca:	d110      	bne.n	80035ee <HAL_RCC_OscConfig+0x5e>
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d10b      	bne.n	80035ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d6:	4b7f      	ldr	r3, [pc, #508]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d06c      	beq.n	80036bc <HAL_RCC_OscConfig+0x12c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d168      	bne.n	80036bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e3a2      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x76>
 80035f8:	4b76      	ldr	r3, [pc, #472]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a75      	ldr	r2, [pc, #468]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e02e      	b.n	8003664 <HAL_RCC_OscConfig+0xd4>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x98>
 800360e:	4b71      	ldr	r3, [pc, #452]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a70      	ldr	r2, [pc, #448]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b6e      	ldr	r3, [pc, #440]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6d      	ldr	r2, [pc, #436]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003620:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e01d      	b.n	8003664 <HAL_RCC_OscConfig+0xd4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0xbc>
 8003632:	4b68      	ldr	r3, [pc, #416]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a67      	ldr	r2, [pc, #412]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b65      	ldr	r3, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a64      	ldr	r2, [pc, #400]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0xd4>
 800364c:	4b61      	ldr	r3, [pc, #388]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a60      	ldr	r2, [pc, #384]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b5e      	ldr	r3, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5d      	ldr	r2, [pc, #372]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fd54 	bl	8002118 <HAL_GetTick>
 8003670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fd50 	bl	8002118 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e356      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003686:	4b53      	ldr	r3, [pc, #332]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0xe4>
 8003692:	e014      	b.n	80036be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe fd40 	bl	8002118 <HAL_GetTick>
 8003698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe fd3c 	bl	8002118 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	@ 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e342      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036ae:	4b49      	ldr	r3, [pc, #292]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x10c>
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 808c 	beq.w	80037e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036cc:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036d6:	4b3f      	ldr	r3, [pc, #252]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_RCC_OscConfig+0x162>
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	2b18      	cmp	r3, #24
 80036e6:	d137      	bne.n	8003758 <HAL_RCC_OscConfig+0x1c8>
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d132      	bne.n	8003758 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f2:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x17a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e314      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800370a:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0219 	bic.w	r2, r3, #25
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	492f      	ldr	r1, [pc, #188]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003718:	4313      	orrs	r3, r2
 800371a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fcfc 	bl	8002118 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003724:	f7fe fcf8 	bl	8002118 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e2fe      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	4920      	ldr	r1, [pc, #128]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003756:	e045      	b.n	80037e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d026      	beq.n	80037ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003760:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 0219 	bic.w	r2, r3, #25
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4919      	ldr	r1, [pc, #100]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fe fcd1 	bl	8002118 <HAL_GetTick>
 8003776:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377a:	f7fe fccd 	bl	8002118 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e2d3      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378c:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003798:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	490b      	ldr	r1, [pc, #44]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	e01a      	b.n	80037e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a08      	ldr	r2, [pc, #32]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fe fcad 	bl	8002118 <HAL_GetTick>
 80037be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c2:	f7fe fca9 	bl	8002118 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d903      	bls.n	80037d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e2af      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
 80037d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d8:	4b96      	ldr	r3, [pc, #600]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ee      	bne.n	80037c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d06a      	beq.n	80038c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f0:	4b90      	ldr	r3, [pc, #576]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037fa:	4b8e      	ldr	r3, [pc, #568]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b08      	cmp	r3, #8
 8003804:	d007      	beq.n	8003816 <HAL_RCC_OscConfig+0x286>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b18      	cmp	r3, #24
 800380a:	d11b      	bne.n	8003844 <HAL_RCC_OscConfig+0x2b4>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003816:	4b87      	ldr	r3, [pc, #540]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x29e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	2b80      	cmp	r3, #128	@ 0x80
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e282      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800382e:	4b81      	ldr	r3, [pc, #516]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	497d      	ldr	r1, [pc, #500]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003842:	e040      	b.n	80038c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800384c:	4b79      	ldr	r3, [pc, #484]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a78      	ldr	r2, [pc, #480]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fe fc5e 	bl	8002118 <HAL_GetTick>
 800385c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003860:	f7fe fc5a 	bl	8002118 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e260      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003872:	4b70      	ldr	r3, [pc, #448]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800387e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	061b      	lsls	r3, r3, #24
 800388c:	4969      	ldr	r1, [pc, #420]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]
 8003892:	e018      	b.n	80038c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003894:	4b67      	ldr	r3, [pc, #412]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a66      	ldr	r2, [pc, #408]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800389a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fc3a 	bl	8002118 <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038a8:	f7fe fc36 	bl	8002118 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e23c      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d036      	beq.n	8003940 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d019      	beq.n	800390e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b56      	ldr	r3, [pc, #344]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 80038dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038de:	4a55      	ldr	r2, [pc, #340]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fe fc17 	bl	8002118 <HAL_GetTick>
 80038ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fe fc13 	bl	8002118 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e219      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003900:	4b4c      	ldr	r3, [pc, #304]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x35e>
 800390c:	e018      	b.n	8003940 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390e:	4b49      	ldr	r3, [pc, #292]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	4a48      	ldr	r2, [pc, #288]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fe fbfd 	bl	8002118 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003922:	f7fe fbf9 	bl	8002118 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e1ff      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003934:	4b3f      	ldr	r3, [pc, #252]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d036      	beq.n	80039ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d019      	beq.n	8003988 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003954:	4b37      	ldr	r3, [pc, #220]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a36      	ldr	r2, [pc, #216]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800395a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800395e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003960:	f7fe fbda 	bl	8002118 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003968:	f7fe fbd6 	bl	8002118 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e1dc      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800397a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x3d8>
 8003986:	e018      	b.n	80039ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003988:	4b2a      	ldr	r3, [pc, #168]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a29      	ldr	r2, [pc, #164]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 800398e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003992:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003994:	f7fe fbc0 	bl	8002118 <HAL_GetTick>
 8003998:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800399c:	f7fe fbbc 	bl	8002118 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1c2      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039ae:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8086 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_RCC_OscConfig+0x4a8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a38 <HAL_RCC_OscConfig+0x4a8>)
 80039ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039d4:	f7fe fba0 	bl	8002118 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039dc:	f7fe fb9c 	bl	8002118 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	@ 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1a2      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCC_OscConfig+0x4a8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x480>
 8003a02:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	4a0b      	ldr	r2, [pc, #44]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0e:	e032      	b.n	8003a76 <HAL_RCC_OscConfig+0x4e6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4ac>
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1c:	4a05      	ldr	r2, [pc, #20]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a28:	4a02      	ldr	r2, [pc, #8]	@ (8003a34 <HAL_RCC_OscConfig+0x4a4>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a30:	e021      	b.n	8003a76 <HAL_RCC_OscConfig+0x4e6>
 8003a32:	bf00      	nop
 8003a34:	58024400 	.word	0x58024400
 8003a38:	58024800 	.word	0x58024800
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x4ce>
 8003a44:	4b83      	ldr	r3, [pc, #524]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a82      	ldr	r2, [pc, #520]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a50:	4b80      	ldr	r3, [pc, #512]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a54:	4a7f      	ldr	r2, [pc, #508]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCC_OscConfig+0x4e6>
 8003a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	4a7c      	ldr	r2, [pc, #496]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	4a79      	ldr	r2, [pc, #484]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fb4b 	bl	8002118 <HAL_GetTick>
 8003a82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe fb47 	bl	8002118 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e14b      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9c:	4b6d      	ldr	r3, [pc, #436]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCC_OscConfig+0x4f6>
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aaa:	f7fe fb35 	bl	8002118 <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fe fb31 	bl	8002118 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e135      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ac8:	4b62      	ldr	r3, [pc, #392]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 812a 	beq.w	8003d32 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ade:	4b5d      	ldr	r3, [pc, #372]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ae6:	2b18      	cmp	r3, #24
 8003ae8:	f000 80ba 	beq.w	8003c60 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	f040 8095 	bne.w	8003c20 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a56      	ldr	r2, [pc, #344]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fe fb09 	bl	8002118 <HAL_GetTick>
 8003b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe fb05 	bl	8002118 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e10b      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b28:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c58 <HAL_RCC_OscConfig+0x6c8>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	4945      	ldr	r1, [pc, #276]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	3b01      	subs	r3, #1
 8003b48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b50:	3b01      	subs	r3, #1
 8003b52:	025b      	lsls	r3, r3, #9
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b72:	4938      	ldr	r1, [pc, #224]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003b78:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	4a35      	ldr	r2, [pc, #212]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b84:	4b33      	ldr	r3, [pc, #204]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b88:	4b34      	ldr	r3, [pc, #208]	@ (8003c5c <HAL_RCC_OscConfig+0x6cc>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b90:	00d2      	lsls	r2, r2, #3
 8003b92:	4930      	ldr	r1, [pc, #192]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b98:	4b2e      	ldr	r3, [pc, #184]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	f023 020c 	bic.w	r2, r3, #12
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	492b      	ldr	r1, [pc, #172]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003baa:	4b2a      	ldr	r3, [pc, #168]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	f023 0202 	bic.w	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	4927      	ldr	r1, [pc, #156]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bbc:	4b25      	ldr	r3, [pc, #148]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	4a24      	ldr	r2, [pc, #144]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc8:	4b22      	ldr	r3, [pc, #136]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	4a21      	ldr	r2, [pc, #132]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fa8e 	bl	8002118 <HAL_GetTick>
 8003bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fa8a 	bl	8002118 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e090      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x670>
 8003c1e:	e088      	b.n	8003d32 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c20:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a0b      	ldr	r2, [pc, #44]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fa74 	bl	8002118 <HAL_GetTick>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fe fa70 	bl	8002118 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e076      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c46:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_RCC_OscConfig+0x6c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x6a4>
 8003c52:	e06e      	b.n	8003d32 <HAL_RCC_OscConfig+0x7a2>
 8003c54:	58024400 	.word	0x58024400
 8003c58:	fffffc0c 	.word	0xfffffc0c
 8003c5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c60:	4b36      	ldr	r3, [pc, #216]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c66:	4b35      	ldr	r3, [pc, #212]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d031      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0203 	and.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d12a      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d122      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d11a      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	0a5b      	lsrs	r3, r3, #9
 8003ca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d108      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	0e1b      	lsrs	r3, r3, #24
 8003cca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e02b      	b.n	8003d34 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003cdc:	4b17      	ldr	r3, [pc, #92]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ce6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d01f      	beq.n	8003d32 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003cf2:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	4a11      	ldr	r2, [pc, #68]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cfe:	f7fe fa0b 	bl	8002118 <HAL_GetTick>
 8003d02:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d04:	bf00      	nop
 8003d06:	f7fe fa07 	bl	8002118 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d0f9      	beq.n	8003d06 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d16:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <HAL_RCC_OscConfig+0x7b0>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d1e:	00d2      	lsls	r2, r2, #3
 8003d20:	4906      	ldr	r1, [pc, #24]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_RCC_OscConfig+0x7ac>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3730      	adds	r7, #48	@ 0x30
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	ffff0007 	.word	0xffff0007

08003d44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e19c      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b8a      	ldr	r3, [pc, #552]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b87      	ldr	r3, [pc, #540]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 020f 	bic.w	r2, r3, #15
 8003d6e:	4985      	ldr	r1, [pc, #532]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b83      	ldr	r3, [pc, #524]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e184      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d010      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	4b7b      	ldr	r3, [pc, #492]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d908      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003da4:	4b78      	ldr	r3, [pc, #480]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	4975      	ldr	r1, [pc, #468]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	4b70      	ldr	r3, [pc, #448]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d908      	bls.n	8003de4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	496a      	ldr	r1, [pc, #424]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	4b64      	ldr	r3, [pc, #400]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d908      	bls.n	8003e12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e00:	4b61      	ldr	r3, [pc, #388]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	495e      	ldr	r1, [pc, #376]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d010      	beq.n	8003e40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	4b59      	ldr	r3, [pc, #356]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d908      	bls.n	8003e40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e2e:	4b56      	ldr	r3, [pc, #344]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	4953      	ldr	r1, [pc, #332]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	4b4d      	ldr	r3, [pc, #308]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d908      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f023 020f 	bic.w	r2, r3, #15
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4947      	ldr	r1, [pc, #284]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d055      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e7a:	4b43      	ldr	r3, [pc, #268]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4940      	ldr	r1, [pc, #256]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e94:	4b3c      	ldr	r3, [pc, #240]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d121      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0f6      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003eac:	4b36      	ldr	r3, [pc, #216]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d115      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0ea      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ec4:	4b30      	ldr	r3, [pc, #192]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0de      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0d6      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ee4:	4b28      	ldr	r3, [pc, #160]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f023 0207 	bic.w	r2, r3, #7
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4925      	ldr	r1, [pc, #148]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef6:	f7fe f90f 	bl	8002118 <HAL_GetTick>
 8003efa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efe:	f7fe f90b 	bl	8002118 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0be      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f14:	4b1c      	ldr	r3, [pc, #112]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d1eb      	bne.n	8003efe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d208      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f42:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f023 020f 	bic.w	r2, r3, #15
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	490e      	ldr	r1, [pc, #56]	@ (8003f88 <HAL_RCC_ClockConfig+0x244>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f54:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d214      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 020f 	bic.w	r2, r3, #15
 8003f6a:	4906      	ldr	r1, [pc, #24]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <HAL_RCC_ClockConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e086      	b.n	8004092 <HAL_RCC_ClockConfig+0x34e>
 8003f84:	52002000 	.word	0x52002000
 8003f88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d208      	bcs.n	8003fba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	4939      	ldr	r1, [pc, #228]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d010      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	4b34      	ldr	r3, [pc, #208]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d208      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fd6:	4b31      	ldr	r3, [pc, #196]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	492e      	ldr	r1, [pc, #184]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	4b28      	ldr	r3, [pc, #160]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004000:	429a      	cmp	r2, r3
 8004002:	d208      	bcs.n	8004016 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004004:	4b25      	ldr	r3, [pc, #148]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4922      	ldr	r1, [pc, #136]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8004012:	4313      	orrs	r3, r2
 8004014:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d010      	beq.n	8004044 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800402e:	429a      	cmp	r2, r3
 8004030:	d208      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004032:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	4917      	ldr	r1, [pc, #92]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8004040:	4313      	orrs	r3, r2
 8004042:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004044:	f000 f834 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b14      	ldr	r3, [pc, #80]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	0a1b      	lsrs	r3, r3, #8
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	4912      	ldr	r1, [pc, #72]	@ (80040a0 <HAL_RCC_ClockConfig+0x35c>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004062:	4b0e      	ldr	r3, [pc, #56]	@ (800409c <HAL_RCC_ClockConfig+0x358>)
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	4a0d      	ldr	r2, [pc, #52]	@ (80040a0 <HAL_RCC_ClockConfig+0x35c>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <HAL_RCC_ClockConfig+0x360>)
 800407a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800407c:	4a0a      	ldr	r2, [pc, #40]	@ (80040a8 <HAL_RCC_ClockConfig+0x364>)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004082:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <HAL_RCC_ClockConfig+0x368>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd fffc 	bl	8002084 <HAL_InitTick>
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
 80040a0:	0800a170 	.word	0x0800a170
 80040a4:	24000008 	.word	0x24000008
 80040a8:	24000004 	.word	0x24000004
 80040ac:	24000024 	.word	0x24000024

080040b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	@ 0x24
 80040b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b6:	4bb3      	ldr	r3, [pc, #716]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040be:	2b18      	cmp	r3, #24
 80040c0:	f200 8155 	bhi.w	800436e <HAL_RCC_GetSysClockFreq+0x2be>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	08004131 	.word	0x08004131
 80040d0:	0800436f 	.word	0x0800436f
 80040d4:	0800436f 	.word	0x0800436f
 80040d8:	0800436f 	.word	0x0800436f
 80040dc:	0800436f 	.word	0x0800436f
 80040e0:	0800436f 	.word	0x0800436f
 80040e4:	0800436f 	.word	0x0800436f
 80040e8:	0800436f 	.word	0x0800436f
 80040ec:	08004157 	.word	0x08004157
 80040f0:	0800436f 	.word	0x0800436f
 80040f4:	0800436f 	.word	0x0800436f
 80040f8:	0800436f 	.word	0x0800436f
 80040fc:	0800436f 	.word	0x0800436f
 8004100:	0800436f 	.word	0x0800436f
 8004104:	0800436f 	.word	0x0800436f
 8004108:	0800436f 	.word	0x0800436f
 800410c:	0800415d 	.word	0x0800415d
 8004110:	0800436f 	.word	0x0800436f
 8004114:	0800436f 	.word	0x0800436f
 8004118:	0800436f 	.word	0x0800436f
 800411c:	0800436f 	.word	0x0800436f
 8004120:	0800436f 	.word	0x0800436f
 8004124:	0800436f 	.word	0x0800436f
 8004128:	0800436f 	.word	0x0800436f
 800412c:	08004163 	.word	0x08004163
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004130:	4b94      	ldr	r3, [pc, #592]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d009      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800413c:	4b91      	ldr	r3, [pc, #580]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	08db      	lsrs	r3, r3, #3
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	4a90      	ldr	r2, [pc, #576]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
 800414c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800414e:	e111      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004150:	4b8d      	ldr	r3, [pc, #564]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004152:	61bb      	str	r3, [r7, #24]
      break;
 8004154:	e10e      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004156:	4b8d      	ldr	r3, [pc, #564]	@ (800438c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004158:	61bb      	str	r3, [r7, #24]
      break;
 800415a:	e10b      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800415c:	4b8c      	ldr	r3, [pc, #560]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800415e:	61bb      	str	r3, [r7, #24]
      break;
 8004160:	e108      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004162:	4b88      	ldr	r3, [pc, #544]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800416c:	4b85      	ldr	r3, [pc, #532]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004176:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004178:	4b82      	ldr	r3, [pc, #520]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004182:	4b80      	ldr	r3, [pc, #512]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004186:	08db      	lsrs	r3, r3, #3
 8004188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80e1 	beq.w	8004368 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	f000 8083 	beq.w	80042b4 <HAL_RCC_GetSysClockFreq+0x204>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f200 80a1 	bhi.w	80042f8 <HAL_RCC_GetSysClockFreq+0x248>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x114>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d056      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041c2:	e099      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02d      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	08db      	lsrs	r3, r3, #3
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	4a6b      	ldr	r2, [pc, #428]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
 80041e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fa:	4b62      	ldr	r3, [pc, #392]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420a:	ed97 6a02 	vldr	s12, [r7, #8]
 800420e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800421e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004226:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800422a:	e087      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004398 <HAL_RCC_GetSysClockFreq+0x2e8>
 800423a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800423e:	4b51      	ldr	r3, [pc, #324]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004252:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800425e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800426e:	e065      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800439c <HAL_RCC_GetSysClockFreq+0x2ec>
 800427e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004282:	4b40      	ldr	r3, [pc, #256]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004292:	ed97 6a02 	vldr	s12, [r7, #8]
 8004296:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800429a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800429e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042b2:	e043      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80043a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042f6:	e021      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004302:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800439c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430a:	4b1e      	ldr	r3, [pc, #120]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431a:	ed97 6a02 	vldr	s12, [r7, #8]
 800431e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800432e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800433a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004340:	0a5b      	lsrs	r3, r3, #9
 8004342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004346:	3301      	adds	r3, #1
 8004348:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004354:	edd7 6a07 	vldr	s13, [r7, #28]
 8004358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800435c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004360:	ee17 3a90 	vmov	r3, s15
 8004364:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004366:	e005      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
      break;
 800436c:	e002      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800436e:	4b07      	ldr	r3, [pc, #28]	@ (800438c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004370:	61bb      	str	r3, [r7, #24]
      break;
 8004372:	bf00      	nop
  }

  return sysclockfreq;
 8004374:	69bb      	ldr	r3, [r7, #24]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3724      	adds	r7, #36	@ 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	58024400 	.word	0x58024400
 8004388:	03d09000 	.word	0x03d09000
 800438c:	003d0900 	.word	0x003d0900
 8004390:	007a1200 	.word	0x007a1200
 8004394:	46000000 	.word	0x46000000
 8004398:	4c742400 	.word	0x4c742400
 800439c:	4a742400 	.word	0x4a742400
 80043a0:	4af42400 	.word	0x4af42400

080043a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043aa:	f7ff fe81 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 80043ae:	4602      	mov	r2, r0
 80043b0:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	490f      	ldr	r1, [pc, #60]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80043bc:	5ccb      	ldrb	r3, [r1, r3]
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	fa22 f303 	lsr.w	r3, r2, r3
 80043c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c8:	4b0a      	ldr	r3, [pc, #40]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	fa22 f303 	lsr.w	r3, r2, r3
 80043de:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x58>)
 80043e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043e2:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <HAL_RCC_GetHCLKFreq+0x5c>)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80043e8:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x58>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	58024400 	.word	0x58024400
 80043f8:	0800a170 	.word	0x0800a170
 80043fc:	24000008 	.word	0x24000008
 8004400:	24000004 	.word	0x24000004

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004408:	f7ff ffcc 	bl	80043a4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCC_GetPCLK1Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	58024400 	.word	0x58024400
 800442c:	0800a170 	.word	0x0800a170

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004434:	f7ff ffb6 	bl	80043a4 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4904      	ldr	r1, [pc, #16]	@ (8004458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	58024400 	.word	0x58024400
 8004458:	0800a170 	.word	0x0800a170

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b0c6      	sub	sp, #280	@ 0x118
 8004462:	af00      	add	r7, sp, #0
 8004464:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004468:	2300      	movs	r3, #0
 800446a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800446e:	2300      	movs	r3, #0
 8004470:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004480:	2500      	movs	r5, #0
 8004482:	ea54 0305 	orrs.w	r3, r4, r5
 8004486:	d049      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800448e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004492:	d02f      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004494:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004498:	d828      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800449a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800449e:	d01a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80044a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044a4:	d822      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ae:	d007      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044b0:	e01c      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b2:	4bab      	ldr	r3, [pc, #684]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	4aaa      	ldr	r2, [pc, #680]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044be:	e01a      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c4:	3308      	adds	r3, #8
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fc25 	bl	8005d18 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044da:	3328      	adds	r3, #40	@ 0x28
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 fccc 	bl	8005e7c <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044fe:	4b98      	ldr	r3, [pc, #608]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004502:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800450c:	4a94      	ldr	r2, [pc, #592]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800450e:	430b      	orrs	r3, r1
 8004510:	6513      	str	r3, [r2, #80]	@ 0x50
 8004512:	e003      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800451c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004528:	f04f 0900 	mov.w	r9, #0
 800452c:	ea58 0309 	orrs.w	r3, r8, r9
 8004530:	d047      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	2b04      	cmp	r3, #4
 800453a:	d82a      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004559 	.word	0x08004559
 8004548:	08004567 	.word	0x08004567
 800454c:	0800457d 	.word	0x0800457d
 8004550:	0800459b 	.word	0x0800459b
 8004554:	0800459b 	.word	0x0800459b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004558:	4b81      	ldr	r3, [pc, #516]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	4a80      	ldr	r2, [pc, #512]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800455e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004564:	e01a      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456a:	3308      	adds	r3, #8
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fbd2 	bl	8005d18 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800457a:	e00f      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004580:	3328      	adds	r3, #40	@ 0x28
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fc79 	bl	8005e7c <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004590:	e004      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004598:	e000      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800459a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a4:	4b6e      	ldr	r3, [pc, #440]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a8:	f023 0107 	bic.w	r1, r3, #7
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	4a6b      	ldr	r2, [pc, #428]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80045b8:	e003      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80045ce:	f04f 0b00 	mov.w	fp, #0
 80045d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80045d6:	d05b      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045e0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80045e4:	d03b      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80045e6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80045ea:	d834      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80045ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045f0:	d037      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80045f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045f6:	d82e      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80045f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80045fc:	d033      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80045fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004602:	d828      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004608:	d01a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800460a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800460e:	d822      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004618:	d007      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800461a:	e01c      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b50      	ldr	r3, [pc, #320]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	4a4f      	ldr	r2, [pc, #316]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004628:	e01e      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462e:	3308      	adds	r3, #8
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f001 fb70 	bl	8005d18 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800463e:	e013      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004644:	3328      	adds	r3, #40	@ 0x28
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fc17 	bl	8005e7c <RCCEx_PLL3_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004670:	4b3b      	ldr	r3, [pc, #236]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004674:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800467c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004680:	4a37      	ldr	r2, [pc, #220]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004682:	430b      	orrs	r3, r1
 8004684:	6593      	str	r3, [r2, #88]	@ 0x58
 8004686:	e003      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800468c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800469c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80046a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d05d      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80046b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046bc:	d03b      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80046be:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046c2:	d834      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046c8:	d037      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80046ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ce:	d82e      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046d4:	d033      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80046d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046da:	d828      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046e0:	d01a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80046e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046e6:	d822      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80046ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046f0:	d007      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80046f2:	e01c      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004700:	e01e      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004706:	3308      	adds	r3, #8
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fb04 	bl	8005d18 <RCCEx_PLL2_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004716:	e013      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471c:	3328      	adds	r3, #40	@ 0x28
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f001 fbab 	bl	8005e7c <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800473e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004754:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004758:	4a01      	ldr	r2, [pc, #4]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800475a:	430b      	orrs	r3, r1
 800475c:	6593      	str	r3, [r2, #88]	@ 0x58
 800475e:	e005      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004768:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004778:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004782:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d03a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800478c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004792:	2b30      	cmp	r3, #48	@ 0x30
 8004794:	d01f      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004796:	2b30      	cmp	r3, #48	@ 0x30
 8004798:	d819      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d00c      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d815      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d019      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d111      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047aa:	4baa      	ldr	r3, [pc, #680]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	4aa9      	ldr	r2, [pc, #676]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047bc:	3308      	adds	r3, #8
 80047be:	2102      	movs	r1, #2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 faa9 	bl	8005d18 <RCCEx_PLL2_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047d4:	e002      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80047d6:	bf00      	nop
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80047da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80047e4:	4b9b      	ldr	r3, [pc, #620]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80047ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f2:	4a98      	ldr	r2, [pc, #608]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047f4:	430b      	orrs	r3, r1
 80047f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047f8:	e003      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800480e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004812:	2300      	movs	r3, #0
 8004814:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004818:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d051      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800482c:	d035      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800482e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004832:	d82e      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004834:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004838:	d031      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800483a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800483e:	d828      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004844:	d01a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484a:	d822      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004854:	d007      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004856:	e01c      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004858:	4b7e      	ldr	r3, [pc, #504]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	4a7d      	ldr	r2, [pc, #500]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004864:	e01c      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486a:	3308      	adds	r3, #8
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fa52 	bl	8005d18 <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800487c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004880:	3328      	adds	r3, #40	@ 0x28
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f001 faf9 	bl	8005e7c <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004898:	e002      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800489e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	4a67      	ldr	r2, [pc, #412]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80048d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d053      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80048e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048f0:	d033      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80048f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048f6:	d82c      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80048f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048fc:	d02f      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80048fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004902:	d826      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004904:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004908:	d02b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800490a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800490e:	d820      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004914:	d012      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800491a:	d81a      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d022      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004924:	d115      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492a:	3308      	adds	r3, #8
 800492c:	2101      	movs	r1, #1
 800492e:	4618      	mov	r0, r3
 8004930:	f001 f9f2 	bl	8005d18 <RCCEx_PLL2_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800493a:	e015      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800493c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004940:	3328      	adds	r3, #40	@ 0x28
 8004942:	2101      	movs	r1, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f001 fa99 	bl	8005e7c <RCCEx_PLL3_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004950:	e00a      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800495a:	bf00      	nop
 800495c:	e004      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004970:	4b38      	ldr	r3, [pc, #224]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004974:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800497c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497e:	4a35      	ldr	r2, [pc, #212]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004980:	430b      	orrs	r3, r1
 8004982:	6513      	str	r3, [r2, #80]	@ 0x50
 8004984:	e003      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800498a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800498e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80049a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d058      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ba:	d033      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80049bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049c0:	d82c      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c6:	d02f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049cc:	d826      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049d2:	d02b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80049d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049d8:	d820      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049de:	d012      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e4:	d81a      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d022      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80049ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ee:	d115      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f4:	3308      	adds	r3, #8
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f98d 	bl	8005d18 <RCCEx_PLL2_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a04:	e015      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0a:	3328      	adds	r3, #40	@ 0x28
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fa34 	bl	8005e7c <RCCEx_PLL3_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a22:	e006      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a24:	bf00      	nop
 8004a26:	e004      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a28:	bf00      	nop
 8004a2a:	e002      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a2c:	bf00      	nop
 8004a2e:	e000      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10e      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a3a:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a4a:	4a02      	ldr	r2, [pc, #8]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004a52:	bf00      	nop
 8004a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	d037      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a8a:	d00e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a90:	d816      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a9a:	d111      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9c:	4bc4      	ldr	r3, [pc, #784]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	4ac3      	ldr	r2, [pc, #780]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004aa8:	e00f      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aae:	3308      	adds	r3, #8
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f930 	bl	8005d18 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004abe:	e004      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ad2:	4bb7      	ldr	r3, [pc, #732]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae0:	4ab3      	ldr	r2, [pc, #716]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ae6:	e003      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004afc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	d039      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d81c      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b5d 	.word	0x08004b5d
 8004b24:	08004b31 	.word	0x08004b31
 8004b28:	08004b3f 	.word	0x08004b3f
 8004b2c:	08004b5d 	.word	0x08004b5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b30:	4b9f      	ldr	r3, [pc, #636]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	4a9e      	ldr	r2, [pc, #632]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b3c:	e00f      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b42:	3308      	adds	r3, #8
 8004b44:	2102      	movs	r1, #2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 f8e6 	bl	8005d18 <RCCEx_PLL2_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004b52:	e004      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b5a:	e000      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b66:	4b92      	ldr	r3, [pc, #584]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6a:	f023 0103 	bic.w	r1, r3, #3
 8004b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b74:	4a8e      	ldr	r2, [pc, #568]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b76:	430b      	orrs	r3, r1
 8004b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b7a:	e003      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f000 8099 	beq.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba6:	4b83      	ldr	r3, [pc, #524]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a82      	ldr	r2, [pc, #520]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb2:	f7fd fab1 	bl	8002118 <HAL_GetTick>
 8004bb6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbc:	f7fd faac 	bl	8002118 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b64      	cmp	r3, #100	@ 0x64
 8004bca:	d903      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bd4:	4b77      	ldr	r3, [pc, #476]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ed      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d173      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004be8:	4b71      	ldr	r3, [pc, #452]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bf4:	4053      	eors	r3, r2
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d015      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c0a:	4b69      	ldr	r3, [pc, #420]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c16:	4b66      	ldr	r3, [pc, #408]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a65      	ldr	r2, [pc, #404]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c22:	4a63      	ldr	r2, [pc, #396]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	d118      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fd fa6e 	bl	8002118 <HAL_GetTick>
 8004c3c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c40:	e00d      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fd fa69 	bl	8002118 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c4c:	1ad2      	subs	r2, r2, r3
 8004c4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d903      	bls.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004c5c:	e005      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5e:	4b54      	ldr	r3, [pc, #336]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0eb      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d129      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c82:	d10e      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004c84:	4b4a      	ldr	r3, [pc, #296]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c94:	091a      	lsrs	r2, r3, #4
 8004c96:	4b48      	ldr	r3, [pc, #288]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	4a45      	ldr	r2, [pc, #276]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6113      	str	r3, [r2, #16]
 8004ca0:	e005      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004ca2:	4b43      	ldr	r3, [pc, #268]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4a42      	ldr	r2, [pc, #264]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ca8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cac:	6113      	str	r3, [r2, #16]
 8004cae:	4b40      	ldr	r3, [pc, #256]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004cce:	e003      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f002 0301 	and.w	r3, r2, #1
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f000 808f 	beq.w	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d00:	2b28      	cmp	r3, #40	@ 0x28
 8004d02:	d871      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004d04:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004df1 	.word	0x08004df1
 8004d10:	08004de9 	.word	0x08004de9
 8004d14:	08004de9 	.word	0x08004de9
 8004d18:	08004de9 	.word	0x08004de9
 8004d1c:	08004de9 	.word	0x08004de9
 8004d20:	08004de9 	.word	0x08004de9
 8004d24:	08004de9 	.word	0x08004de9
 8004d28:	08004de9 	.word	0x08004de9
 8004d2c:	08004dbd 	.word	0x08004dbd
 8004d30:	08004de9 	.word	0x08004de9
 8004d34:	08004de9 	.word	0x08004de9
 8004d38:	08004de9 	.word	0x08004de9
 8004d3c:	08004de9 	.word	0x08004de9
 8004d40:	08004de9 	.word	0x08004de9
 8004d44:	08004de9 	.word	0x08004de9
 8004d48:	08004de9 	.word	0x08004de9
 8004d4c:	08004dd3 	.word	0x08004dd3
 8004d50:	08004de9 	.word	0x08004de9
 8004d54:	08004de9 	.word	0x08004de9
 8004d58:	08004de9 	.word	0x08004de9
 8004d5c:	08004de9 	.word	0x08004de9
 8004d60:	08004de9 	.word	0x08004de9
 8004d64:	08004de9 	.word	0x08004de9
 8004d68:	08004de9 	.word	0x08004de9
 8004d6c:	08004df1 	.word	0x08004df1
 8004d70:	08004de9 	.word	0x08004de9
 8004d74:	08004de9 	.word	0x08004de9
 8004d78:	08004de9 	.word	0x08004de9
 8004d7c:	08004de9 	.word	0x08004de9
 8004d80:	08004de9 	.word	0x08004de9
 8004d84:	08004de9 	.word	0x08004de9
 8004d88:	08004de9 	.word	0x08004de9
 8004d8c:	08004df1 	.word	0x08004df1
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004de9 	.word	0x08004de9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004de9 	.word	0x08004de9
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004df1 	.word	0x08004df1
 8004db0:	58024400 	.word	0x58024400
 8004db4:	58024800 	.word	0x58024800
 8004db8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 ffa7 	bl	8005d18 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004dd0:	e00f      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	3328      	adds	r3, #40	@ 0x28
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f84e 	bl	8005e7c <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004de6:	e004      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dee:	e000      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004dfa:	4bbf      	ldr	r3, [pc, #764]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e08:	4abb      	ldr	r2, [pc, #748]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e0e:	e003      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f002 0302 	and.w	r3, r2, #2
 8004e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d041      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d824      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004e42:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e95 	.word	0x08004e95
 8004e4c:	08004e61 	.word	0x08004e61
 8004e50:	08004e77 	.word	0x08004e77
 8004e54:	08004e95 	.word	0x08004e95
 8004e58:	08004e95 	.word	0x08004e95
 8004e5c:	08004e95 	.word	0x08004e95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e64:	3308      	adds	r3, #8
 8004e66:	2101      	movs	r1, #1
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 ff55 	bl	8005d18 <RCCEx_PLL2_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e74:	e00f      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7a:	3328      	adds	r3, #40	@ 0x28
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fffc 	bl	8005e7c <RCCEx_PLL3_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e8a:	e004      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e92:	e000      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e9e:	4b96      	ldr	r3, [pc, #600]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	f023 0107 	bic.w	r1, r3, #7
 8004ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eac:	4a92      	ldr	r2, [pc, #584]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004eb2:	e003      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f002 0304 	and.w	r3, r2, #4
 8004ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ed2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d044      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee4:	2b05      	cmp	r3, #5
 8004ee6:	d825      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f3d 	.word	0x08004f3d
 8004ef4:	08004f09 	.word	0x08004f09
 8004ef8:	08004f1f 	.word	0x08004f1f
 8004efc:	08004f3d 	.word	0x08004f3d
 8004f00:	08004f3d 	.word	0x08004f3d
 8004f04:	08004f3d 	.word	0x08004f3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 ff01 	bl	8005d18 <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f1c:	e00f      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f22:	3328      	adds	r3, #40	@ 0x28
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 ffa8 	bl	8005e7c <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f32:	e004      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f3a:	e000      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f46:	4b6c      	ldr	r3, [pc, #432]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4a:	f023 0107 	bic.w	r1, r3, #7
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f56:	4a68      	ldr	r2, [pc, #416]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f002 0320 	and.w	r3, r2, #32
 8004f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4313      	orrs	r3, r2
 8004f84:	d055      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f92:	d033      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f98:	d82c      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9e:	d02f      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d826      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004fa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004faa:	d02b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004fac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004fb0:	d820      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fb6:	d012      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fbc:	d81a      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d022      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fc6:	d115      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fcc:	3308      	adds	r3, #8
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fea1 	bl	8005d18 <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004fdc:	e015      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe2:	3328      	adds	r3, #40	@ 0x28
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 ff48 	bl	8005e7c <RCCEx_PLL3_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ff2:	e00a      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ffa:	e006      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ffc:	bf00      	nop
 8004ffe:	e004      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005000:	bf00      	nop
 8005002:	e002      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005004:	bf00      	nop
 8005006:	e000      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10b      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005012:	4b39      	ldr	r3, [pc, #228]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005016:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005022:	4a35      	ldr	r2, [pc, #212]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005024:	430b      	orrs	r3, r1
 8005026:	6553      	str	r3, [r2, #84]	@ 0x54
 8005028:	e003      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800502e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800503e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005042:	2300      	movs	r3, #0
 8005044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005048:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800504c:	460b      	mov	r3, r1
 800504e:	4313      	orrs	r3, r2
 8005050:	d058      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800505a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800505e:	d033      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005060:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005064:	d82c      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506a:	d02f      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005070:	d826      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005076:	d02b      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800507c:	d820      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800507e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005082:	d012      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005088:	d81a      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d022      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800508e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005092:	d115      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005098:	3308      	adds	r3, #8
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fe3b 	bl	8005d18 <RCCEx_PLL2_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050a8:	e015      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ae:	3328      	adds	r3, #40	@ 0x28
 80050b0:	2102      	movs	r1, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fee2 	bl	8005e7c <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80050be:	e00a      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050c6:	e006      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050c8:	bf00      	nop
 80050ca:	e004      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050cc:	bf00      	nop
 80050ce:	e002      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050d0:	bf00      	nop
 80050d2:	e000      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80050d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10e      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050de:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ee:	4a02      	ldr	r2, [pc, #8]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f4:	e006      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005110:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800511a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d055      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800512c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005130:	d033      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005132:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005136:	d82c      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800513c:	d02f      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800513e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005142:	d826      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005144:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005148:	d02b      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800514a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800514e:	d820      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005154:	d012      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800515a:	d81a      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d022      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005164:	d115      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516a:	3308      	adds	r3, #8
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fdd2 	bl	8005d18 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800517a:	e015      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	3328      	adds	r3, #40	@ 0x28
 8005182:	2102      	movs	r1, #2
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fe79 	bl	8005e7c <RCCEx_PLL3_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005190:	e00a      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800519a:	bf00      	nop
 800519c:	e004      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80051a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80051b0:	4ba0      	ldr	r3, [pc, #640]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051c0:	4a9c      	ldr	r2, [pc, #624]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051c2:	430b      	orrs	r3, r1
 80051c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 0308 	and.w	r3, r2, #8
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d01e      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fc:	d10c      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005202:	3328      	adds	r3, #40	@ 0x28
 8005204:	2102      	movs	r1, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fe38 	bl	8005e7c <RCCEx_PLL3_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005218:	4b86      	ldr	r3, [pc, #536]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005228:	4a82      	ldr	r2, [pc, #520]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800522a:	430b      	orrs	r3, r1
 800522c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f002 0310 	and.w	r3, r2, #16
 800523a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005244:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005248:	460b      	mov	r3, r1
 800524a:	4313      	orrs	r3, r2
 800524c:	d01e      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800524e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525a:	d10c      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	3328      	adds	r3, #40	@ 0x28
 8005262:	2102      	movs	r1, #2
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fe09 	bl	8005e7c <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005276:	4b6f      	ldr	r3, [pc, #444]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800527e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005286:	4a6b      	ldr	r2, [pc, #428]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005288:	430b      	orrs	r3, r1
 800528a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800529a:	2300      	movs	r3, #0
 800529c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800529e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d03e      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b4:	d022      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80052b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ba:	d81b      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c4:	d00b      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80052c6:	e015      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052cc:	3308      	adds	r3, #8
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fd21 	bl	8005d18 <RCCEx_PLL2_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80052dc:	e00f      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e2:	3328      	adds	r3, #40	@ 0x28
 80052e4:	2102      	movs	r1, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fdc8 	bl	8005e7c <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80052f2:	e004      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80052fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005306:	4b4b      	ldr	r3, [pc, #300]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005316:	4a47      	ldr	r2, [pc, #284]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005318:	430b      	orrs	r3, r1
 800531a:	6593      	str	r3, [r2, #88]	@ 0x58
 800531c:	e003      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005322:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005332:	673b      	str	r3, [r7, #112]	@ 0x70
 8005334:	2300      	movs	r3, #0
 8005336:	677b      	str	r3, [r7, #116]	@ 0x74
 8005338:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800533c:	460b      	mov	r3, r1
 800533e:	4313      	orrs	r3, r2
 8005340:	d03b      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800534a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800534e:	d01f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005350:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005354:	d818      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535a:	d003      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800535c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005360:	d007      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005362:	e011      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	4b33      	ldr	r3, [pc, #204]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	4a32      	ldr	r2, [pc, #200]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005370:	e00f      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005376:	3328      	adds	r3, #40	@ 0x28
 8005378:	2101      	movs	r1, #1
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fd7e 	bl	8005e7c <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005392:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800539a:	4b26      	ldr	r3, [pc, #152]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053aa:	4a22      	ldr	r2, [pc, #136]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80053b0:	e003      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80053c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053c8:	2300      	movs	r3, #0
 80053ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80053d0:	460b      	mov	r3, r1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	d034      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e4:	d007      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80053e6:	e011      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e8:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80053f4:	e00e      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fa:	3308      	adds	r3, #8
 80053fc:	2102      	movs	r1, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc8a 	bl	8005d18 <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10d      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800541e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005420:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542a:	4a02      	ldr	r2, [pc, #8]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800542c:	430b      	orrs	r3, r1
 800542e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005430:	e006      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800543c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800544c:	663b      	str	r3, [r7, #96]	@ 0x60
 800544e:	2300      	movs	r3, #0
 8005450:	667b      	str	r3, [r7, #100]	@ 0x64
 8005452:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005456:	460b      	mov	r3, r1
 8005458:	4313      	orrs	r3, r2
 800545a:	d00c      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005460:	3328      	adds	r3, #40	@ 0x28
 8005462:	2102      	movs	r1, #2
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fd09 	bl	8005e7c <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005482:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005484:	2300      	movs	r3, #0
 8005486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005488:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d036      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549c:	d018      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800549e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054a2:	d811      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a8:	d014      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80054aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ae:	d80b      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d011      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80054b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b8:	d106      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ba:	4bb7      	ldr	r3, [pc, #732]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	4ab6      	ldr	r2, [pc, #728]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80054c6:	e008      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054e2:	4bad      	ldr	r3, [pc, #692]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054f0:	4aa9      	ldr	r2, [pc, #676]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80054f6:	e003      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800550c:	653b      	str	r3, [r7, #80]	@ 0x50
 800550e:	2300      	movs	r3, #0
 8005510:	657b      	str	r3, [r7, #84]	@ 0x54
 8005512:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005516:	460b      	mov	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800551c:	4b9e      	ldr	r3, [pc, #632]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800551e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005520:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552a:	4a9b      	ldr	r2, [pc, #620]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800552c:	430b      	orrs	r3, r1
 800552e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800553c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800553e:	2300      	movs	r3, #0
 8005540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005542:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005546:	460b      	mov	r3, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800554c:	4b92      	ldr	r3, [pc, #584]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800554e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005550:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800555a:	4a8f      	ldr	r2, [pc, #572]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800555c:	430b      	orrs	r3, r1
 800555e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800556c:	643b      	str	r3, [r7, #64]	@ 0x40
 800556e:	2300      	movs	r3, #0
 8005570:	647b      	str	r3, [r7, #68]	@ 0x44
 8005572:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005576:	460b      	mov	r3, r1
 8005578:	4313      	orrs	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800557c:	4b86      	ldr	r3, [pc, #536]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	4a85      	ldr	r2, [pc, #532]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005582:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005586:	6113      	str	r3, [r2, #16]
 8005588:	4b83      	ldr	r3, [pc, #524]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800558a:	6919      	ldr	r1, [r3, #16]
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005594:	4a80      	ldr	r2, [pc, #512]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005596:	430b      	orrs	r3, r1
 8005598:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80055a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055a8:	2300      	movs	r3, #0
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80055b0:	460b      	mov	r3, r1
 80055b2:	4313      	orrs	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055b6:	4b78      	ldr	r3, [pc, #480]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c4:	4a74      	ldr	r2, [pc, #464]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d8:	2300      	movs	r3, #0
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
 80055dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055e0:	460b      	mov	r3, r1
 80055e2:	4313      	orrs	r3, r2
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055e6:	4b6c      	ldr	r3, [pc, #432]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	4a68      	ldr	r2, [pc, #416]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	2100      	movs	r1, #0
 8005606:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d011      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561c:	3308      	adds	r3, #8
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fb79 	bl	8005d18 <RCCEx_PLL2_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800562c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	2100      	movs	r1, #0
 8005646:	6239      	str	r1, [r7, #32]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	627b      	str	r3, [r7, #36]	@ 0x24
 800564e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d011      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565c:	3308      	adds	r3, #8
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fb59 	bl	8005d18 <RCCEx_PLL2_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800566c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	2100      	movs	r1, #0
 8005686:	61b9      	str	r1, [r7, #24]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d011      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	3308      	adds	r3, #8
 800569e:	2102      	movs	r1, #2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fb39 	bl	8005d18 <RCCEx_PLL2_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	2100      	movs	r1, #0
 80056c6:	6139      	str	r1, [r7, #16]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d011      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056dc:	3328      	adds	r3, #40	@ 0x28
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fbcb 	bl	8005e7c <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80056ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	2100      	movs	r1, #0
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005712:	460b      	mov	r3, r1
 8005714:	4313      	orrs	r3, r2
 8005716:	d011      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	3328      	adds	r3, #40	@ 0x28
 800571e:	2101      	movs	r1, #1
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fbab 	bl	8005e7c <RCCEx_PLL3_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800572c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005738:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	2100      	movs	r1, #0
 8005746:	6039      	str	r1, [r7, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d011      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575c:	3328      	adds	r3, #40	@ 0x28
 800575e:	2102      	movs	r1, #2
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fb8b 	bl	8005e7c <RCCEx_PLL3_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800576c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800577c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
}
 800578a:	4618      	mov	r0, r3
 800578c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005796:	bf00      	nop
 8005798:	58024400 	.word	0x58024400

0800579c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057a0:	f7fe fe00 	bl	80043a4 <HAL_RCC_GetHCLKFreq>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b06      	ldr	r3, [pc, #24]	@ (80057c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	091b      	lsrs	r3, r3, #4
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4904      	ldr	r1, [pc, #16]	@ (80057c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057b2:	5ccb      	ldrb	r3, [r1, r3]
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	58024400 	.word	0x58024400
 80057c4:	0800a170 	.word	0x0800a170

080057c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	@ 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057d0:	4ba1      	ldr	r3, [pc, #644]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80057da:	4b9f      	ldr	r3, [pc, #636]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	0b1b      	lsrs	r3, r3, #12
 80057e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057e6:	4b9c      	ldr	r3, [pc, #624]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057f2:	4b99      	ldr	r3, [pc, #612]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	08db      	lsrs	r3, r3, #3
 80057f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8111 	beq.w	8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b02      	cmp	r3, #2
 800581a:	f000 8083 	beq.w	8005924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b02      	cmp	r3, #2
 8005822:	f200 80a1 	bhi.w	8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d056      	beq.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005832:	e099      	b.n	8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005834:	4b88      	ldr	r3, [pc, #544]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02d      	beq.n	800589c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005840:	4b85      	ldr	r3, [pc, #532]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	08db      	lsrs	r3, r3, #3
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	4a84      	ldr	r2, [pc, #528]	@ (8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	ee07 3a90 	vmov	s15, r3
 8005858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586a:	4b7b      	ldr	r3, [pc, #492]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587a:	ed97 6a03 	vldr	s12, [r7, #12]
 800587e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800589a:	e087      	b.n	80059ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005a64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a03 	vldr	s12, [r7, #12]
 80058c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058de:	e065      	b.n	80059ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f2:	4b59      	ldr	r3, [pc, #356]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005902:	ed97 6a03 	vldr	s12, [r7, #12]
 8005906:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005922:	e043      	b.n	80059ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005936:	4b48      	ldr	r3, [pc, #288]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005946:	ed97 6a03 	vldr	s12, [r7, #12]
 800594a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800594e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800595a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005966:	e021      	b.n	80059ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597a:	4b37      	ldr	r3, [pc, #220]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598a:	ed97 6a03 	vldr	s12, [r7, #12]
 800598e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800599e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80059ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	0a5b      	lsrs	r3, r3, #9
 80059b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059d2:	ee17 2a90 	vmov	r2, s15
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80059da:	4b1f      	ldr	r3, [pc, #124]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	0c1b      	lsrs	r3, r3, #16
 80059e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a00:	ee17 2a90 	vmov	r2, s15
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005a08:	4b13      	ldr	r3, [pc, #76]	@ (8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0c:	0e1b      	lsrs	r3, r3, #24
 8005a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a2e:	ee17 2a90 	vmov	r2, s15
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a36:	e008      	b.n	8005a4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	609a      	str	r2, [r3, #8]
}
 8005a4a:	bf00      	nop
 8005a4c:	3724      	adds	r7, #36	@ 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	03d09000 	.word	0x03d09000
 8005a60:	46000000 	.word	0x46000000
 8005a64:	4c742400 	.word	0x4c742400
 8005a68:	4a742400 	.word	0x4a742400
 8005a6c:	4af42400 	.word	0x4af42400

08005a70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	@ 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a78:	4ba1      	ldr	r3, [pc, #644]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005a82:	4b9f      	ldr	r3, [pc, #636]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	0d1b      	lsrs	r3, r3, #20
 8005a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005a9a:	4b99      	ldr	r3, [pc, #612]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9e:	08db      	lsrs	r3, r3, #3
 8005aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8111 	beq.w	8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	f000 8083 	beq.w	8005bcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	f200 80a1 	bhi.w	8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d056      	beq.n	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ada:	e099      	b.n	8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005adc:	4b88      	ldr	r3, [pc, #544]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02d      	beq.n	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ae8:	4b85      	ldr	r3, [pc, #532]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	4a84      	ldr	r2, [pc, #528]	@ (8005d04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b7b      	ldr	r3, [pc, #492]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b42:	e087      	b.n	8005c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b6a      	ldr	r3, [pc, #424]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b86:	e065      	b.n	8005c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9a:	4b59      	ldr	r3, [pc, #356]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bca:	e043      	b.n	8005c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bde:	4b48      	ldr	r3, [pc, #288]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c0e:	e021      	b.n	8005c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b37      	ldr	r3, [pc, #220]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c54:	4b2a      	ldr	r3, [pc, #168]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	0a5b      	lsrs	r3, r3, #9
 8005c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7a:	ee17 2a90 	vmov	r2, s15
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c82:	4b1f      	ldr	r3, [pc, #124]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca8:	ee17 2a90 	vmov	r2, s15
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005cb0:	4b13      	ldr	r3, [pc, #76]	@ (8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	0e1b      	lsrs	r3, r3, #24
 8005cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd6:	ee17 2a90 	vmov	r2, s15
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005cde:	e008      	b.n	8005cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
}
 8005cf2:	bf00      	nop
 8005cf4:	3724      	adds	r7, #36	@ 0x24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	58024400 	.word	0x58024400
 8005d04:	03d09000 	.word	0x03d09000
 8005d08:	46000000 	.word	0x46000000
 8005d0c:	4c742400 	.word	0x4c742400
 8005d10:	4a742400 	.word	0x4a742400
 8005d14:	4af42400 	.word	0x4af42400

08005d18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d26:	4b53      	ldr	r3, [pc, #332]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d101      	bne.n	8005d36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e099      	b.n	8005e6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d36:	4b4f      	ldr	r3, [pc, #316]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d42:	f7fc f9e9 	bl	8002118 <HAL_GetTick>
 8005d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d4a:	f7fc f9e5 	bl	8002118 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e086      	b.n	8005e6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d5c:	4b45      	ldr	r3, [pc, #276]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f0      	bne.n	8005d4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d68:	4b42      	ldr	r3, [pc, #264]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	031b      	lsls	r3, r3, #12
 8005d76:	493f      	ldr	r1, [pc, #252]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	025b      	lsls	r3, r3, #9
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005dac:	4931      	ldr	r1, [pc, #196]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005db2:	4b30      	ldr	r3, [pc, #192]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	492d      	ldr	r1, [pc, #180]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc8:	f023 0220 	bic.w	r2, r3, #32
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	4928      	ldr	r1, [pc, #160]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005dd6:	4b27      	ldr	r3, [pc, #156]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	4a26      	ldr	r2, [pc, #152]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
 8005de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005de2:	4b24      	ldr	r3, [pc, #144]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005de6:	4b24      	ldr	r3, [pc, #144]	@ (8005e78 <RCCEx_PLL2_Config+0x160>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	69d2      	ldr	r2, [r2, #28]
 8005dee:	00d2      	lsls	r2, r2, #3
 8005df0:	4920      	ldr	r1, [pc, #128]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005df6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005dfc:	f043 0310 	orr.w	r3, r3, #16
 8005e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e08:	4b1a      	ldr	r3, [pc, #104]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e14:	e00f      	b.n	8005e36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d106      	bne.n	8005e2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e1c:	4b15      	ldr	r3, [pc, #84]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	4a14      	ldr	r2, [pc, #80]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e28:	e005      	b.n	8005e36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e2a:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	4a11      	ldr	r2, [pc, #68]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e36:	4b0f      	ldr	r3, [pc, #60]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e42:	f7fc f969 	bl	8002118 <HAL_GetTick>
 8005e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e48:	e008      	b.n	8005e5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e4a:	f7fc f965 	bl	8002118 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e006      	b.n	8005e6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <RCCEx_PLL2_Config+0x15c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	58024400 	.word	0x58024400
 8005e78:	ffff0007 	.word	0xffff0007

08005e7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e8a:	4b53      	ldr	r3, [pc, #332]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d101      	bne.n	8005e9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e099      	b.n	8005fce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a4e      	ldr	r2, [pc, #312]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea6:	f7fc f937 	bl	8002118 <HAL_GetTick>
 8005eaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005eac:	e008      	b.n	8005ec0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005eae:	f7fc f933 	bl	8002118 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e086      	b.n	8005fce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ec0:	4b45      	ldr	r3, [pc, #276]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f0      	bne.n	8005eae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ecc:	4b42      	ldr	r3, [pc, #264]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	493f      	ldr	r1, [pc, #252]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	025b      	lsls	r3, r3, #9
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	041b      	lsls	r3, r3, #16
 8005efe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	061b      	lsls	r3, r3, #24
 8005f0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f10:	4931      	ldr	r1, [pc, #196]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f16:	4b30      	ldr	r3, [pc, #192]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	492d      	ldr	r1, [pc, #180]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f28:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	4928      	ldr	r1, [pc, #160]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f3a:	4b27      	ldr	r3, [pc, #156]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f46:	4b24      	ldr	r3, [pc, #144]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f4a:	4b24      	ldr	r3, [pc, #144]	@ (8005fdc <RCCEx_PLL3_Config+0x160>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	69d2      	ldr	r2, [r2, #28]
 8005f52:	00d2      	lsls	r2, r2, #3
 8005f54:	4920      	ldr	r1, [pc, #128]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f70:	4a19      	ldr	r2, [pc, #100]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005f76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005f78:	e00f      	b.n	8005f9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d106      	bne.n	8005f8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f80:	4b15      	ldr	r3, [pc, #84]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	4a14      	ldr	r2, [pc, #80]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005f8c:	e005      	b.n	8005f9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f8e:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	4a11      	ldr	r2, [pc, #68]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa6:	f7fc f8b7 	bl	8002118 <HAL_GetTick>
 8005faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fac:	e008      	b.n	8005fc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fae:	f7fc f8b3 	bl	8002118 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e006      	b.n	8005fce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <RCCEx_PLL3_Config+0x15c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	ffff0007 	.word	0xffff0007

08005fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e042      	b.n	8006078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fb fcbb 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2224      	movs	r2, #36	@ 0x24
 800600e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ff22 	bl	8006e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f8b3 	bl	800619c <UART_SetConfig>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e01b      	b.n	8006078 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800604e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800605e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 ffa1 	bl	8006fb8 <UART_CheckIdleState>
 8006076:	4603      	mov	r3, r0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	@ 0x28
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006096:	2b20      	cmp	r3, #32
 8006098:	d17b      	bne.n	8006192 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_UART_Transmit+0x26>
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e074      	b.n	8006194 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2221      	movs	r2, #33	@ 0x21
 80060b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ba:	f7fc f82d 	bl	8002118 <HAL_GetTick>
 80060be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d8:	d108      	bne.n	80060ec <HAL_UART_Transmit+0x6c>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	e003      	b.n	80060f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060f4:	e030      	b.n	8006158 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2180      	movs	r1, #128	@ 0x80
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f001 f803 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e03d      	b.n	8006194 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800612c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	3302      	adds	r3, #2
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	e007      	b.n	8006146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	781a      	ldrb	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1c8      	bne.n	80060f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	2140      	movs	r1, #64	@ 0x40
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 ffcc 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e006      	b.n	8006194 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a0:	b092      	sub	sp, #72	@ 0x48
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4bbe      	ldr	r3, [pc, #760]	@ (80064c4 <UART_SetConfig+0x328>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4ab3      	ldr	r2, [pc, #716]	@ (80064c8 <UART_SetConfig+0x32c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d004      	beq.n	8006208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006204:	4313      	orrs	r3, r2
 8006206:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	4baf      	ldr	r3, [pc, #700]	@ (80064cc <UART_SetConfig+0x330>)
 8006210:	4013      	ands	r3, r2
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006218:	430b      	orrs	r3, r1
 800621a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	f023 010f 	bic.w	r1, r3, #15
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4aa6      	ldr	r2, [pc, #664]	@ (80064d0 <UART_SetConfig+0x334>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d177      	bne.n	800632c <UART_SetConfig+0x190>
 800623c:	4ba5      	ldr	r3, [pc, #660]	@ (80064d4 <UART_SetConfig+0x338>)
 800623e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006244:	2b28      	cmp	r3, #40	@ 0x28
 8006246:	d86d      	bhi.n	8006324 <UART_SetConfig+0x188>
 8006248:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <UART_SetConfig+0xb4>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	080062f5 	.word	0x080062f5
 8006254:	08006325 	.word	0x08006325
 8006258:	08006325 	.word	0x08006325
 800625c:	08006325 	.word	0x08006325
 8006260:	08006325 	.word	0x08006325
 8006264:	08006325 	.word	0x08006325
 8006268:	08006325 	.word	0x08006325
 800626c:	08006325 	.word	0x08006325
 8006270:	080062fd 	.word	0x080062fd
 8006274:	08006325 	.word	0x08006325
 8006278:	08006325 	.word	0x08006325
 800627c:	08006325 	.word	0x08006325
 8006280:	08006325 	.word	0x08006325
 8006284:	08006325 	.word	0x08006325
 8006288:	08006325 	.word	0x08006325
 800628c:	08006325 	.word	0x08006325
 8006290:	08006305 	.word	0x08006305
 8006294:	08006325 	.word	0x08006325
 8006298:	08006325 	.word	0x08006325
 800629c:	08006325 	.word	0x08006325
 80062a0:	08006325 	.word	0x08006325
 80062a4:	08006325 	.word	0x08006325
 80062a8:	08006325 	.word	0x08006325
 80062ac:	08006325 	.word	0x08006325
 80062b0:	0800630d 	.word	0x0800630d
 80062b4:	08006325 	.word	0x08006325
 80062b8:	08006325 	.word	0x08006325
 80062bc:	08006325 	.word	0x08006325
 80062c0:	08006325 	.word	0x08006325
 80062c4:	08006325 	.word	0x08006325
 80062c8:	08006325 	.word	0x08006325
 80062cc:	08006325 	.word	0x08006325
 80062d0:	08006315 	.word	0x08006315
 80062d4:	08006325 	.word	0x08006325
 80062d8:	08006325 	.word	0x08006325
 80062dc:	08006325 	.word	0x08006325
 80062e0:	08006325 	.word	0x08006325
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006325 	.word	0x08006325
 80062ec:	08006325 	.word	0x08006325
 80062f0:	0800631d 	.word	0x0800631d
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fa:	e326      	b.n	800694a <UART_SetConfig+0x7ae>
 80062fc:	2304      	movs	r3, #4
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006302:	e322      	b.n	800694a <UART_SetConfig+0x7ae>
 8006304:	2308      	movs	r3, #8
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630a:	e31e      	b.n	800694a <UART_SetConfig+0x7ae>
 800630c:	2310      	movs	r3, #16
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006312:	e31a      	b.n	800694a <UART_SetConfig+0x7ae>
 8006314:	2320      	movs	r3, #32
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631a:	e316      	b.n	800694a <UART_SetConfig+0x7ae>
 800631c:	2340      	movs	r3, #64	@ 0x40
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006322:	e312      	b.n	800694a <UART_SetConfig+0x7ae>
 8006324:	2380      	movs	r3, #128	@ 0x80
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e30e      	b.n	800694a <UART_SetConfig+0x7ae>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a69      	ldr	r2, [pc, #420]	@ (80064d8 <UART_SetConfig+0x33c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d130      	bne.n	8006398 <UART_SetConfig+0x1fc>
 8006336:	4b67      	ldr	r3, [pc, #412]	@ (80064d4 <UART_SetConfig+0x338>)
 8006338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	2b05      	cmp	r3, #5
 8006340:	d826      	bhi.n	8006390 <UART_SetConfig+0x1f4>
 8006342:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <UART_SetConfig+0x1ac>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006361 	.word	0x08006361
 800634c:	08006369 	.word	0x08006369
 8006350:	08006371 	.word	0x08006371
 8006354:	08006379 	.word	0x08006379
 8006358:	08006381 	.word	0x08006381
 800635c:	08006389 	.word	0x08006389
 8006360:	2300      	movs	r3, #0
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006366:	e2f0      	b.n	800694a <UART_SetConfig+0x7ae>
 8006368:	2304      	movs	r3, #4
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800636e:	e2ec      	b.n	800694a <UART_SetConfig+0x7ae>
 8006370:	2308      	movs	r3, #8
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006376:	e2e8      	b.n	800694a <UART_SetConfig+0x7ae>
 8006378:	2310      	movs	r3, #16
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800637e:	e2e4      	b.n	800694a <UART_SetConfig+0x7ae>
 8006380:	2320      	movs	r3, #32
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006386:	e2e0      	b.n	800694a <UART_SetConfig+0x7ae>
 8006388:	2340      	movs	r3, #64	@ 0x40
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638e:	e2dc      	b.n	800694a <UART_SetConfig+0x7ae>
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006396:	e2d8      	b.n	800694a <UART_SetConfig+0x7ae>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a4f      	ldr	r2, [pc, #316]	@ (80064dc <UART_SetConfig+0x340>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d130      	bne.n	8006404 <UART_SetConfig+0x268>
 80063a2:	4b4c      	ldr	r3, [pc, #304]	@ (80064d4 <UART_SetConfig+0x338>)
 80063a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d826      	bhi.n	80063fc <UART_SetConfig+0x260>
 80063ae:	a201      	add	r2, pc, #4	@ (adr r2, 80063b4 <UART_SetConfig+0x218>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063cd 	.word	0x080063cd
 80063b8:	080063d5 	.word	0x080063d5
 80063bc:	080063dd 	.word	0x080063dd
 80063c0:	080063e5 	.word	0x080063e5
 80063c4:	080063ed 	.word	0x080063ed
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d2:	e2ba      	b.n	800694a <UART_SetConfig+0x7ae>
 80063d4:	2304      	movs	r3, #4
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063da:	e2b6      	b.n	800694a <UART_SetConfig+0x7ae>
 80063dc:	2308      	movs	r3, #8
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e2:	e2b2      	b.n	800694a <UART_SetConfig+0x7ae>
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ea:	e2ae      	b.n	800694a <UART_SetConfig+0x7ae>
 80063ec:	2320      	movs	r3, #32
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e2aa      	b.n	800694a <UART_SetConfig+0x7ae>
 80063f4:	2340      	movs	r3, #64	@ 0x40
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fa:	e2a6      	b.n	800694a <UART_SetConfig+0x7ae>
 80063fc:	2380      	movs	r3, #128	@ 0x80
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e2a2      	b.n	800694a <UART_SetConfig+0x7ae>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a35      	ldr	r2, [pc, #212]	@ (80064e0 <UART_SetConfig+0x344>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d130      	bne.n	8006470 <UART_SetConfig+0x2d4>
 800640e:	4b31      	ldr	r3, [pc, #196]	@ (80064d4 <UART_SetConfig+0x338>)
 8006410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b05      	cmp	r3, #5
 8006418:	d826      	bhi.n	8006468 <UART_SetConfig+0x2cc>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0x284>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006439 	.word	0x08006439
 8006424:	08006441 	.word	0x08006441
 8006428:	08006449 	.word	0x08006449
 800642c:	08006451 	.word	0x08006451
 8006430:	08006459 	.word	0x08006459
 8006434:	08006461 	.word	0x08006461
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e284      	b.n	800694a <UART_SetConfig+0x7ae>
 8006440:	2304      	movs	r3, #4
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006446:	e280      	b.n	800694a <UART_SetConfig+0x7ae>
 8006448:	2308      	movs	r3, #8
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644e:	e27c      	b.n	800694a <UART_SetConfig+0x7ae>
 8006450:	2310      	movs	r3, #16
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006456:	e278      	b.n	800694a <UART_SetConfig+0x7ae>
 8006458:	2320      	movs	r3, #32
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645e:	e274      	b.n	800694a <UART_SetConfig+0x7ae>
 8006460:	2340      	movs	r3, #64	@ 0x40
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006466:	e270      	b.n	800694a <UART_SetConfig+0x7ae>
 8006468:	2380      	movs	r3, #128	@ 0x80
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646e:	e26c      	b.n	800694a <UART_SetConfig+0x7ae>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1b      	ldr	r2, [pc, #108]	@ (80064e4 <UART_SetConfig+0x348>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d142      	bne.n	8006500 <UART_SetConfig+0x364>
 800647a:	4b16      	ldr	r3, [pc, #88]	@ (80064d4 <UART_SetConfig+0x338>)
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b05      	cmp	r3, #5
 8006484:	d838      	bhi.n	80064f8 <UART_SetConfig+0x35c>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0x2f0>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064a5 	.word	0x080064a5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064b5 	.word	0x080064b5
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064e9 	.word	0x080064e9
 80064a0:	080064f1 	.word	0x080064f1
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064aa:	e24e      	b.n	800694a <UART_SetConfig+0x7ae>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b2:	e24a      	b.n	800694a <UART_SetConfig+0x7ae>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ba:	e246      	b.n	800694a <UART_SetConfig+0x7ae>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e242      	b.n	800694a <UART_SetConfig+0x7ae>
 80064c4:	cfff69f3 	.word	0xcfff69f3
 80064c8:	58000c00 	.word	0x58000c00
 80064cc:	11fff4ff 	.word	0x11fff4ff
 80064d0:	40011000 	.word	0x40011000
 80064d4:	58024400 	.word	0x58024400
 80064d8:	40004400 	.word	0x40004400
 80064dc:	40004800 	.word	0x40004800
 80064e0:	40004c00 	.word	0x40004c00
 80064e4:	40005000 	.word	0x40005000
 80064e8:	2320      	movs	r3, #32
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ee:	e22c      	b.n	800694a <UART_SetConfig+0x7ae>
 80064f0:	2340      	movs	r3, #64	@ 0x40
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f6:	e228      	b.n	800694a <UART_SetConfig+0x7ae>
 80064f8:	2380      	movs	r3, #128	@ 0x80
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fe:	e224      	b.n	800694a <UART_SetConfig+0x7ae>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4ab1      	ldr	r2, [pc, #708]	@ (80067cc <UART_SetConfig+0x630>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d176      	bne.n	80065f8 <UART_SetConfig+0x45c>
 800650a:	4bb1      	ldr	r3, [pc, #708]	@ (80067d0 <UART_SetConfig+0x634>)
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006512:	2b28      	cmp	r3, #40	@ 0x28
 8006514:	d86c      	bhi.n	80065f0 <UART_SetConfig+0x454>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <UART_SetConfig+0x380>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	080065c1 	.word	0x080065c1
 8006520:	080065f1 	.word	0x080065f1
 8006524:	080065f1 	.word	0x080065f1
 8006528:	080065f1 	.word	0x080065f1
 800652c:	080065f1 	.word	0x080065f1
 8006530:	080065f1 	.word	0x080065f1
 8006534:	080065f1 	.word	0x080065f1
 8006538:	080065f1 	.word	0x080065f1
 800653c:	080065c9 	.word	0x080065c9
 8006540:	080065f1 	.word	0x080065f1
 8006544:	080065f1 	.word	0x080065f1
 8006548:	080065f1 	.word	0x080065f1
 800654c:	080065f1 	.word	0x080065f1
 8006550:	080065f1 	.word	0x080065f1
 8006554:	080065f1 	.word	0x080065f1
 8006558:	080065f1 	.word	0x080065f1
 800655c:	080065d1 	.word	0x080065d1
 8006560:	080065f1 	.word	0x080065f1
 8006564:	080065f1 	.word	0x080065f1
 8006568:	080065f1 	.word	0x080065f1
 800656c:	080065f1 	.word	0x080065f1
 8006570:	080065f1 	.word	0x080065f1
 8006574:	080065f1 	.word	0x080065f1
 8006578:	080065f1 	.word	0x080065f1
 800657c:	080065d9 	.word	0x080065d9
 8006580:	080065f1 	.word	0x080065f1
 8006584:	080065f1 	.word	0x080065f1
 8006588:	080065f1 	.word	0x080065f1
 800658c:	080065f1 	.word	0x080065f1
 8006590:	080065f1 	.word	0x080065f1
 8006594:	080065f1 	.word	0x080065f1
 8006598:	080065f1 	.word	0x080065f1
 800659c:	080065e1 	.word	0x080065e1
 80065a0:	080065f1 	.word	0x080065f1
 80065a4:	080065f1 	.word	0x080065f1
 80065a8:	080065f1 	.word	0x080065f1
 80065ac:	080065f1 	.word	0x080065f1
 80065b0:	080065f1 	.word	0x080065f1
 80065b4:	080065f1 	.word	0x080065f1
 80065b8:	080065f1 	.word	0x080065f1
 80065bc:	080065e9 	.word	0x080065e9
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c6:	e1c0      	b.n	800694a <UART_SetConfig+0x7ae>
 80065c8:	2304      	movs	r3, #4
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ce:	e1bc      	b.n	800694a <UART_SetConfig+0x7ae>
 80065d0:	2308      	movs	r3, #8
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d6:	e1b8      	b.n	800694a <UART_SetConfig+0x7ae>
 80065d8:	2310      	movs	r3, #16
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065de:	e1b4      	b.n	800694a <UART_SetConfig+0x7ae>
 80065e0:	2320      	movs	r3, #32
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e6:	e1b0      	b.n	800694a <UART_SetConfig+0x7ae>
 80065e8:	2340      	movs	r3, #64	@ 0x40
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e1ac      	b.n	800694a <UART_SetConfig+0x7ae>
 80065f0:	2380      	movs	r3, #128	@ 0x80
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e1a8      	b.n	800694a <UART_SetConfig+0x7ae>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a75      	ldr	r2, [pc, #468]	@ (80067d4 <UART_SetConfig+0x638>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d130      	bne.n	8006664 <UART_SetConfig+0x4c8>
 8006602:	4b73      	ldr	r3, [pc, #460]	@ (80067d0 <UART_SetConfig+0x634>)
 8006604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b05      	cmp	r3, #5
 800660c:	d826      	bhi.n	800665c <UART_SetConfig+0x4c0>
 800660e:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <UART_SetConfig+0x478>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	0800662d 	.word	0x0800662d
 8006618:	08006635 	.word	0x08006635
 800661c:	0800663d 	.word	0x0800663d
 8006620:	08006645 	.word	0x08006645
 8006624:	0800664d 	.word	0x0800664d
 8006628:	08006655 	.word	0x08006655
 800662c:	2300      	movs	r3, #0
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006632:	e18a      	b.n	800694a <UART_SetConfig+0x7ae>
 8006634:	2304      	movs	r3, #4
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663a:	e186      	b.n	800694a <UART_SetConfig+0x7ae>
 800663c:	2308      	movs	r3, #8
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006642:	e182      	b.n	800694a <UART_SetConfig+0x7ae>
 8006644:	2310      	movs	r3, #16
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664a:	e17e      	b.n	800694a <UART_SetConfig+0x7ae>
 800664c:	2320      	movs	r3, #32
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006652:	e17a      	b.n	800694a <UART_SetConfig+0x7ae>
 8006654:	2340      	movs	r3, #64	@ 0x40
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665a:	e176      	b.n	800694a <UART_SetConfig+0x7ae>
 800665c:	2380      	movs	r3, #128	@ 0x80
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e172      	b.n	800694a <UART_SetConfig+0x7ae>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a5b      	ldr	r2, [pc, #364]	@ (80067d8 <UART_SetConfig+0x63c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d130      	bne.n	80066d0 <UART_SetConfig+0x534>
 800666e:	4b58      	ldr	r3, [pc, #352]	@ (80067d0 <UART_SetConfig+0x634>)
 8006670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b05      	cmp	r3, #5
 8006678:	d826      	bhi.n	80066c8 <UART_SetConfig+0x52c>
 800667a:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <UART_SetConfig+0x4e4>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	08006699 	.word	0x08006699
 8006684:	080066a1 	.word	0x080066a1
 8006688:	080066a9 	.word	0x080066a9
 800668c:	080066b1 	.word	0x080066b1
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066c1 	.word	0x080066c1
 8006698:	2300      	movs	r3, #0
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669e:	e154      	b.n	800694a <UART_SetConfig+0x7ae>
 80066a0:	2304      	movs	r3, #4
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a6:	e150      	b.n	800694a <UART_SetConfig+0x7ae>
 80066a8:	2308      	movs	r3, #8
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ae:	e14c      	b.n	800694a <UART_SetConfig+0x7ae>
 80066b0:	2310      	movs	r3, #16
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b6:	e148      	b.n	800694a <UART_SetConfig+0x7ae>
 80066b8:	2320      	movs	r3, #32
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066be:	e144      	b.n	800694a <UART_SetConfig+0x7ae>
 80066c0:	2340      	movs	r3, #64	@ 0x40
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e140      	b.n	800694a <UART_SetConfig+0x7ae>
 80066c8:	2380      	movs	r3, #128	@ 0x80
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e13c      	b.n	800694a <UART_SetConfig+0x7ae>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a41      	ldr	r2, [pc, #260]	@ (80067dc <UART_SetConfig+0x640>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f040 8082 	bne.w	80067e0 <UART_SetConfig+0x644>
 80066dc:	4b3c      	ldr	r3, [pc, #240]	@ (80067d0 <UART_SetConfig+0x634>)
 80066de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066e4:	2b28      	cmp	r3, #40	@ 0x28
 80066e6:	d86d      	bhi.n	80067c4 <UART_SetConfig+0x628>
 80066e8:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <UART_SetConfig+0x554>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006795 	.word	0x08006795
 80066f4:	080067c5 	.word	0x080067c5
 80066f8:	080067c5 	.word	0x080067c5
 80066fc:	080067c5 	.word	0x080067c5
 8006700:	080067c5 	.word	0x080067c5
 8006704:	080067c5 	.word	0x080067c5
 8006708:	080067c5 	.word	0x080067c5
 800670c:	080067c5 	.word	0x080067c5
 8006710:	0800679d 	.word	0x0800679d
 8006714:	080067c5 	.word	0x080067c5
 8006718:	080067c5 	.word	0x080067c5
 800671c:	080067c5 	.word	0x080067c5
 8006720:	080067c5 	.word	0x080067c5
 8006724:	080067c5 	.word	0x080067c5
 8006728:	080067c5 	.word	0x080067c5
 800672c:	080067c5 	.word	0x080067c5
 8006730:	080067a5 	.word	0x080067a5
 8006734:	080067c5 	.word	0x080067c5
 8006738:	080067c5 	.word	0x080067c5
 800673c:	080067c5 	.word	0x080067c5
 8006740:	080067c5 	.word	0x080067c5
 8006744:	080067c5 	.word	0x080067c5
 8006748:	080067c5 	.word	0x080067c5
 800674c:	080067c5 	.word	0x080067c5
 8006750:	080067ad 	.word	0x080067ad
 8006754:	080067c5 	.word	0x080067c5
 8006758:	080067c5 	.word	0x080067c5
 800675c:	080067c5 	.word	0x080067c5
 8006760:	080067c5 	.word	0x080067c5
 8006764:	080067c5 	.word	0x080067c5
 8006768:	080067c5 	.word	0x080067c5
 800676c:	080067c5 	.word	0x080067c5
 8006770:	080067b5 	.word	0x080067b5
 8006774:	080067c5 	.word	0x080067c5
 8006778:	080067c5 	.word	0x080067c5
 800677c:	080067c5 	.word	0x080067c5
 8006780:	080067c5 	.word	0x080067c5
 8006784:	080067c5 	.word	0x080067c5
 8006788:	080067c5 	.word	0x080067c5
 800678c:	080067c5 	.word	0x080067c5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e0d6      	b.n	800694a <UART_SetConfig+0x7ae>
 800679c:	2304      	movs	r3, #4
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e0d2      	b.n	800694a <UART_SetConfig+0x7ae>
 80067a4:	2308      	movs	r3, #8
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e0ce      	b.n	800694a <UART_SetConfig+0x7ae>
 80067ac:	2310      	movs	r3, #16
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e0ca      	b.n	800694a <UART_SetConfig+0x7ae>
 80067b4:	2320      	movs	r3, #32
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e0c6      	b.n	800694a <UART_SetConfig+0x7ae>
 80067bc:	2340      	movs	r3, #64	@ 0x40
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e0c2      	b.n	800694a <UART_SetConfig+0x7ae>
 80067c4:	2380      	movs	r3, #128	@ 0x80
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e0be      	b.n	800694a <UART_SetConfig+0x7ae>
 80067cc:	40011400 	.word	0x40011400
 80067d0:	58024400 	.word	0x58024400
 80067d4:	40007800 	.word	0x40007800
 80067d8:	40007c00 	.word	0x40007c00
 80067dc:	40011800 	.word	0x40011800
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4aad      	ldr	r2, [pc, #692]	@ (8006a9c <UART_SetConfig+0x900>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d176      	bne.n	80068d8 <UART_SetConfig+0x73c>
 80067ea:	4bad      	ldr	r3, [pc, #692]	@ (8006aa0 <UART_SetConfig+0x904>)
 80067ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067f2:	2b28      	cmp	r3, #40	@ 0x28
 80067f4:	d86c      	bhi.n	80068d0 <UART_SetConfig+0x734>
 80067f6:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <UART_SetConfig+0x660>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	080068a1 	.word	0x080068a1
 8006800:	080068d1 	.word	0x080068d1
 8006804:	080068d1 	.word	0x080068d1
 8006808:	080068d1 	.word	0x080068d1
 800680c:	080068d1 	.word	0x080068d1
 8006810:	080068d1 	.word	0x080068d1
 8006814:	080068d1 	.word	0x080068d1
 8006818:	080068d1 	.word	0x080068d1
 800681c:	080068a9 	.word	0x080068a9
 8006820:	080068d1 	.word	0x080068d1
 8006824:	080068d1 	.word	0x080068d1
 8006828:	080068d1 	.word	0x080068d1
 800682c:	080068d1 	.word	0x080068d1
 8006830:	080068d1 	.word	0x080068d1
 8006834:	080068d1 	.word	0x080068d1
 8006838:	080068d1 	.word	0x080068d1
 800683c:	080068b1 	.word	0x080068b1
 8006840:	080068d1 	.word	0x080068d1
 8006844:	080068d1 	.word	0x080068d1
 8006848:	080068d1 	.word	0x080068d1
 800684c:	080068d1 	.word	0x080068d1
 8006850:	080068d1 	.word	0x080068d1
 8006854:	080068d1 	.word	0x080068d1
 8006858:	080068d1 	.word	0x080068d1
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068d1 	.word	0x080068d1
 8006864:	080068d1 	.word	0x080068d1
 8006868:	080068d1 	.word	0x080068d1
 800686c:	080068d1 	.word	0x080068d1
 8006870:	080068d1 	.word	0x080068d1
 8006874:	080068d1 	.word	0x080068d1
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068c1 	.word	0x080068c1
 8006880:	080068d1 	.word	0x080068d1
 8006884:	080068d1 	.word	0x080068d1
 8006888:	080068d1 	.word	0x080068d1
 800688c:	080068d1 	.word	0x080068d1
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068d1 	.word	0x080068d1
 800689c:	080068c9 	.word	0x080068c9
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e050      	b.n	800694a <UART_SetConfig+0x7ae>
 80068a8:	2304      	movs	r3, #4
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ae:	e04c      	b.n	800694a <UART_SetConfig+0x7ae>
 80068b0:	2308      	movs	r3, #8
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b6:	e048      	b.n	800694a <UART_SetConfig+0x7ae>
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e044      	b.n	800694a <UART_SetConfig+0x7ae>
 80068c0:	2320      	movs	r3, #32
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e040      	b.n	800694a <UART_SetConfig+0x7ae>
 80068c8:	2340      	movs	r3, #64	@ 0x40
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e03c      	b.n	800694a <UART_SetConfig+0x7ae>
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e038      	b.n	800694a <UART_SetConfig+0x7ae>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a71      	ldr	r2, [pc, #452]	@ (8006aa4 <UART_SetConfig+0x908>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d130      	bne.n	8006944 <UART_SetConfig+0x7a8>
 80068e2:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa0 <UART_SetConfig+0x904>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d826      	bhi.n	800693c <UART_SetConfig+0x7a0>
 80068ee:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <UART_SetConfig+0x758>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006915 	.word	0x08006915
 80068fc:	0800691d 	.word	0x0800691d
 8006900:	08006925 	.word	0x08006925
 8006904:	0800692d 	.word	0x0800692d
 8006908:	08006935 	.word	0x08006935
 800690c:	2302      	movs	r3, #2
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e01a      	b.n	800694a <UART_SetConfig+0x7ae>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e016      	b.n	800694a <UART_SetConfig+0x7ae>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e012      	b.n	800694a <UART_SetConfig+0x7ae>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e00e      	b.n	800694a <UART_SetConfig+0x7ae>
 800692c:	2320      	movs	r3, #32
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e00a      	b.n	800694a <UART_SetConfig+0x7ae>
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e006      	b.n	800694a <UART_SetConfig+0x7ae>
 800693c:	2380      	movs	r3, #128	@ 0x80
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e002      	b.n	800694a <UART_SetConfig+0x7ae>
 8006944:	2380      	movs	r3, #128	@ 0x80
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a55      	ldr	r2, [pc, #340]	@ (8006aa4 <UART_SetConfig+0x908>)
 8006950:	4293      	cmp	r3, r2
 8006952:	f040 80f8 	bne.w	8006b46 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006956:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800695a:	2b20      	cmp	r3, #32
 800695c:	dc46      	bgt.n	80069ec <UART_SetConfig+0x850>
 800695e:	2b02      	cmp	r3, #2
 8006960:	db75      	blt.n	8006a4e <UART_SetConfig+0x8b2>
 8006962:	3b02      	subs	r3, #2
 8006964:	2b1e      	cmp	r3, #30
 8006966:	d872      	bhi.n	8006a4e <UART_SetConfig+0x8b2>
 8006968:	a201      	add	r2, pc, #4	@ (adr r2, 8006970 <UART_SetConfig+0x7d4>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	080069f3 	.word	0x080069f3
 8006974:	08006a4f 	.word	0x08006a4f
 8006978:	080069fb 	.word	0x080069fb
 800697c:	08006a4f 	.word	0x08006a4f
 8006980:	08006a4f 	.word	0x08006a4f
 8006984:	08006a4f 	.word	0x08006a4f
 8006988:	08006a0b 	.word	0x08006a0b
 800698c:	08006a4f 	.word	0x08006a4f
 8006990:	08006a4f 	.word	0x08006a4f
 8006994:	08006a4f 	.word	0x08006a4f
 8006998:	08006a4f 	.word	0x08006a4f
 800699c:	08006a4f 	.word	0x08006a4f
 80069a0:	08006a4f 	.word	0x08006a4f
 80069a4:	08006a4f 	.word	0x08006a4f
 80069a8:	08006a1b 	.word	0x08006a1b
 80069ac:	08006a4f 	.word	0x08006a4f
 80069b0:	08006a4f 	.word	0x08006a4f
 80069b4:	08006a4f 	.word	0x08006a4f
 80069b8:	08006a4f 	.word	0x08006a4f
 80069bc:	08006a4f 	.word	0x08006a4f
 80069c0:	08006a4f 	.word	0x08006a4f
 80069c4:	08006a4f 	.word	0x08006a4f
 80069c8:	08006a4f 	.word	0x08006a4f
 80069cc:	08006a4f 	.word	0x08006a4f
 80069d0:	08006a4f 	.word	0x08006a4f
 80069d4:	08006a4f 	.word	0x08006a4f
 80069d8:	08006a4f 	.word	0x08006a4f
 80069dc:	08006a4f 	.word	0x08006a4f
 80069e0:	08006a4f 	.word	0x08006a4f
 80069e4:	08006a4f 	.word	0x08006a4f
 80069e8:	08006a41 	.word	0x08006a41
 80069ec:	2b40      	cmp	r3, #64	@ 0x40
 80069ee:	d02a      	beq.n	8006a46 <UART_SetConfig+0x8aa>
 80069f0:	e02d      	b.n	8006a4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069f2:	f7fe fed3 	bl	800579c <HAL_RCCEx_GetD3PCLK1Freq>
 80069f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069f8:	e02f      	b.n	8006a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fee2 	bl	80057c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a08:	e027      	b.n	8006a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0a:	f107 0318 	add.w	r3, r7, #24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff f82e 	bl	8005a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a18:	e01f      	b.n	8006a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a1a:	4b21      	ldr	r3, [pc, #132]	@ (8006aa0 <UART_SetConfig+0x904>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a26:	4b1e      	ldr	r3, [pc, #120]	@ (8006aa0 <UART_SetConfig+0x904>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	08db      	lsrs	r3, r3, #3
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa8 <UART_SetConfig+0x90c>)
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a38:	e00f      	b.n	8006a5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa8 <UART_SetConfig+0x90c>)
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a3e:	e00c      	b.n	8006a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a40:	4b1a      	ldr	r3, [pc, #104]	@ (8006aac <UART_SetConfig+0x910>)
 8006a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a44:	e009      	b.n	8006a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4c:	e005      	b.n	8006a5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 81ee 	beq.w	8006e3e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	4a12      	ldr	r2, [pc, #72]	@ (8006ab0 <UART_SetConfig+0x914>)
 8006a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4413      	add	r3, r2
 8006a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d305      	bcc.n	8006a92 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d910      	bls.n	8006ab4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a98:	e1d1      	b.n	8006e3e <UART_SetConfig+0xca2>
 8006a9a:	bf00      	nop
 8006a9c:	40011c00 	.word	0x40011c00
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	58000c00 	.word	0x58000c00
 8006aa8:	03d09000 	.word	0x03d09000
 8006aac:	003d0900 	.word	0x003d0900
 8006ab0:	0800a18c 	.word	0x0800a18c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	60fa      	str	r2, [r7, #12]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac0:	4ac0      	ldr	r2, [pc, #768]	@ (8006dc4 <UART_SetConfig+0xc28>)
 8006ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ad6:	f7f9 fc73 	bl	80003c0 <__aeabi_uldivmod>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	020b      	lsls	r3, r1, #8
 8006aec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006af0:	0202      	lsls	r2, r0, #8
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	6849      	ldr	r1, [r1, #4]
 8006af6:	0849      	lsrs	r1, r1, #1
 8006af8:	2000      	movs	r0, #0
 8006afa:	460c      	mov	r4, r1
 8006afc:	4605      	mov	r5, r0
 8006afe:	eb12 0804 	adds.w	r8, r2, r4
 8006b02:	eb43 0905 	adc.w	r9, r3, r5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	469a      	mov	sl, r3
 8006b0e:	4693      	mov	fp, r2
 8006b10:	4652      	mov	r2, sl
 8006b12:	465b      	mov	r3, fp
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7f9 fc52 	bl	80003c0 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4613      	mov	r3, r2
 8006b22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2a:	d308      	bcc.n	8006b3e <UART_SetConfig+0x9a2>
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b32:	d204      	bcs.n	8006b3e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b3a:	60da      	str	r2, [r3, #12]
 8006b3c:	e17f      	b.n	8006e3e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b44:	e17b      	b.n	8006e3e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b4e:	f040 80bd 	bne.w	8006ccc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006b52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	dc48      	bgt.n	8006bec <UART_SetConfig+0xa50>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	db7b      	blt.n	8006c56 <UART_SetConfig+0xaba>
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d879      	bhi.n	8006c56 <UART_SetConfig+0xaba>
 8006b62:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <UART_SetConfig+0x9cc>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006bf3 	.word	0x08006bf3
 8006b6c:	08006bfb 	.word	0x08006bfb
 8006b70:	08006c57 	.word	0x08006c57
 8006b74:	08006c57 	.word	0x08006c57
 8006b78:	08006c03 	.word	0x08006c03
 8006b7c:	08006c57 	.word	0x08006c57
 8006b80:	08006c57 	.word	0x08006c57
 8006b84:	08006c57 	.word	0x08006c57
 8006b88:	08006c13 	.word	0x08006c13
 8006b8c:	08006c57 	.word	0x08006c57
 8006b90:	08006c57 	.word	0x08006c57
 8006b94:	08006c57 	.word	0x08006c57
 8006b98:	08006c57 	.word	0x08006c57
 8006b9c:	08006c57 	.word	0x08006c57
 8006ba0:	08006c57 	.word	0x08006c57
 8006ba4:	08006c57 	.word	0x08006c57
 8006ba8:	08006c23 	.word	0x08006c23
 8006bac:	08006c57 	.word	0x08006c57
 8006bb0:	08006c57 	.word	0x08006c57
 8006bb4:	08006c57 	.word	0x08006c57
 8006bb8:	08006c57 	.word	0x08006c57
 8006bbc:	08006c57 	.word	0x08006c57
 8006bc0:	08006c57 	.word	0x08006c57
 8006bc4:	08006c57 	.word	0x08006c57
 8006bc8:	08006c57 	.word	0x08006c57
 8006bcc:	08006c57 	.word	0x08006c57
 8006bd0:	08006c57 	.word	0x08006c57
 8006bd4:	08006c57 	.word	0x08006c57
 8006bd8:	08006c57 	.word	0x08006c57
 8006bdc:	08006c57 	.word	0x08006c57
 8006be0:	08006c57 	.word	0x08006c57
 8006be4:	08006c57 	.word	0x08006c57
 8006be8:	08006c49 	.word	0x08006c49
 8006bec:	2b40      	cmp	r3, #64	@ 0x40
 8006bee:	d02e      	beq.n	8006c4e <UART_SetConfig+0xab2>
 8006bf0:	e031      	b.n	8006c56 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf2:	f7fd fc07 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8006bf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bf8:	e033      	b.n	8006c62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bfa:	f7fd fc19 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8006bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c00:	e02f      	b.n	8006c62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe fdde 	bl	80057c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c10:	e027      	b.n	8006c62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c12:	f107 0318 	add.w	r3, r7, #24
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe ff2a 	bl	8005a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c20:	e01f      	b.n	8006c62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c22:	4b69      	ldr	r3, [pc, #420]	@ (8006dc8 <UART_SetConfig+0xc2c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d009      	beq.n	8006c42 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c2e:	4b66      	ldr	r3, [pc, #408]	@ (8006dc8 <UART_SetConfig+0xc2c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	08db      	lsrs	r3, r3, #3
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	4a64      	ldr	r2, [pc, #400]	@ (8006dcc <UART_SetConfig+0xc30>)
 8006c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c40:	e00f      	b.n	8006c62 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006c42:	4b62      	ldr	r3, [pc, #392]	@ (8006dcc <UART_SetConfig+0xc30>)
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c46:	e00c      	b.n	8006c62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c48:	4b61      	ldr	r3, [pc, #388]	@ (8006dd0 <UART_SetConfig+0xc34>)
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4c:	e009      	b.n	8006c62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c54:	e005      	b.n	8006c62 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80ea 	beq.w	8006e3e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	4a55      	ldr	r2, [pc, #340]	@ (8006dc4 <UART_SetConfig+0xc28>)
 8006c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c7c:	005a      	lsls	r2, r3, #1
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	441a      	add	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	d916      	bls.n	8006cc4 <UART_SetConfig+0xb28>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c9c:	d212      	bcs.n	8006cc4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f023 030f 	bic.w	r3, r3, #15
 8006ca6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	e0bc      	b.n	8006e3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006cca:	e0b8      	b.n	8006e3e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ccc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	dc4b      	bgt.n	8006d6c <UART_SetConfig+0xbd0>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f2c0 8087 	blt.w	8006de8 <UART_SetConfig+0xc4c>
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	f200 8084 	bhi.w	8006de8 <UART_SetConfig+0xc4c>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <UART_SetConfig+0xb4c>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d73 	.word	0x08006d73
 8006cec:	08006d7b 	.word	0x08006d7b
 8006cf0:	08006de9 	.word	0x08006de9
 8006cf4:	08006de9 	.word	0x08006de9
 8006cf8:	08006d83 	.word	0x08006d83
 8006cfc:	08006de9 	.word	0x08006de9
 8006d00:	08006de9 	.word	0x08006de9
 8006d04:	08006de9 	.word	0x08006de9
 8006d08:	08006d93 	.word	0x08006d93
 8006d0c:	08006de9 	.word	0x08006de9
 8006d10:	08006de9 	.word	0x08006de9
 8006d14:	08006de9 	.word	0x08006de9
 8006d18:	08006de9 	.word	0x08006de9
 8006d1c:	08006de9 	.word	0x08006de9
 8006d20:	08006de9 	.word	0x08006de9
 8006d24:	08006de9 	.word	0x08006de9
 8006d28:	08006da3 	.word	0x08006da3
 8006d2c:	08006de9 	.word	0x08006de9
 8006d30:	08006de9 	.word	0x08006de9
 8006d34:	08006de9 	.word	0x08006de9
 8006d38:	08006de9 	.word	0x08006de9
 8006d3c:	08006de9 	.word	0x08006de9
 8006d40:	08006de9 	.word	0x08006de9
 8006d44:	08006de9 	.word	0x08006de9
 8006d48:	08006de9 	.word	0x08006de9
 8006d4c:	08006de9 	.word	0x08006de9
 8006d50:	08006de9 	.word	0x08006de9
 8006d54:	08006de9 	.word	0x08006de9
 8006d58:	08006de9 	.word	0x08006de9
 8006d5c:	08006de9 	.word	0x08006de9
 8006d60:	08006de9 	.word	0x08006de9
 8006d64:	08006de9 	.word	0x08006de9
 8006d68:	08006ddb 	.word	0x08006ddb
 8006d6c:	2b40      	cmp	r3, #64	@ 0x40
 8006d6e:	d037      	beq.n	8006de0 <UART_SetConfig+0xc44>
 8006d70:	e03a      	b.n	8006de8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d72:	f7fd fb47 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8006d76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d78:	e03c      	b.n	8006df4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d7a:	f7fd fb59 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8006d7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d80:	e038      	b.n	8006df4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fd1e 	bl	80057c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d90:	e030      	b.n	8006df4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d92:	f107 0318 	add.w	r3, r7, #24
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fe6a 	bl	8005a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da0:	e028      	b.n	8006df4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <UART_SetConfig+0xc2c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d012      	beq.n	8006dd4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dae:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <UART_SetConfig+0xc2c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	08db      	lsrs	r3, r3, #3
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	4a04      	ldr	r2, [pc, #16]	@ (8006dcc <UART_SetConfig+0xc30>)
 8006dba:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dc0:	e018      	b.n	8006df4 <UART_SetConfig+0xc58>
 8006dc2:	bf00      	nop
 8006dc4:	0800a18c 	.word	0x0800a18c
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	03d09000 	.word	0x03d09000
 8006dd0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006dd4:	4b24      	ldr	r3, [pc, #144]	@ (8006e68 <UART_SetConfig+0xccc>)
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd8:	e00c      	b.n	8006df4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006dda:	4b24      	ldr	r3, [pc, #144]	@ (8006e6c <UART_SetConfig+0xcd0>)
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dde:	e009      	b.n	8006df4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de6:	e005      	b.n	8006df4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006df2:	bf00      	nop
    }

    if (pclk != 0U)
 8006df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d021      	beq.n	8006e3e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8006e70 <UART_SetConfig+0xcd4>)
 8006e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e08:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	441a      	add	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e20:	2b0f      	cmp	r3, #15
 8006e22:	d909      	bls.n	8006e38 <UART_SetConfig+0xc9c>
 8006e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2a:	d205      	bcs.n	8006e38 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60da      	str	r2, [r3, #12]
 8006e36:	e002      	b.n	8006e3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e5a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3748      	adds	r7, #72	@ 0x48
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e68:	03d09000 	.word	0x03d09000
 8006e6c:	003d0900 	.word	0x003d0900
 8006e70:	0800a18c 	.word	0x0800a18c

08006e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01a      	beq.n	8006f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f72:	d10a      	bne.n	8006f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b098      	sub	sp, #96	@ 0x60
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc8:	f7fb f8a6 	bl	8002118 <HAL_GetTick>
 8006fcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d12f      	bne.n	800703c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f88e 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d022      	beq.n	800703c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800700a:	653b      	str	r3, [r7, #80]	@ 0x50
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007014:	647b      	str	r3, [r7, #68]	@ 0x44
 8007016:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800701a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e063      	b.n	8007104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b04      	cmp	r3, #4
 8007048:	d149      	bne.n	80070de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007052:	2200      	movs	r2, #0
 8007054:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f857 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d03c      	beq.n	80070de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	623b      	str	r3, [r7, #32]
   return(result);
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007082:	633b      	str	r3, [r7, #48]	@ 0x30
 8007084:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e6      	bne.n	8007064 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b6:	61fa      	str	r2, [r7, #28]
 80070b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	69b9      	ldr	r1, [r7, #24]
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	617b      	str	r3, [r7, #20]
   return(result);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e5      	bne.n	8007096 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e012      	b.n	8007104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3758      	adds	r7, #88	@ 0x58
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711c:	e04f      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d04b      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007126:	f7fa fff7 	bl	8002118 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <UART_WaitOnFlagUntilTimeout+0x30>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e04e      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d037      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b80      	cmp	r3, #128	@ 0x80
 8007152:	d034      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b40      	cmp	r3, #64	@ 0x40
 8007158:	d031      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d110      	bne.n	800718a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2208      	movs	r2, #8
 800716e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f839 	bl	80071e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2208      	movs	r2, #8
 800717a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e029      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007198:	d111      	bne.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f81f 	bl	80071e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e00f      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4013      	ands	r3, r2
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	bf0c      	ite	eq
 80071ce:	2301      	moveq	r3, #1
 80071d0:	2300      	movne	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d0a0      	beq.n	800711e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b095      	sub	sp, #84	@ 0x54
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800720e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007210:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007214:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	61fb      	str	r3, [r7, #28]
   return(result);
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	4b1e      	ldr	r3, [pc, #120]	@ (80072b0 <UART_EndRxTransfer+0xc8>)
 8007236:	4013      	ands	r3, r2
 8007238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007244:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d118      	bne.n	8007290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	60bb      	str	r3, [r7, #8]
   return(result);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 0310 	bic.w	r3, r3, #16
 8007272:	647b      	str	r3, [r7, #68]	@ 0x44
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	613b      	str	r3, [r7, #16]
   return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e6      	bne.n	800725e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072a4:	bf00      	nop
 80072a6:	3754      	adds	r7, #84	@ 0x54
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	effffffe 	.word	0xeffffffe

080072b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_UARTEx_DisableFifoMode+0x16>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e027      	b.n	800731a <HAL_UARTEx_DisableFifoMode+0x66>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2224      	movs	r2, #36	@ 0x24
 80072d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80072f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800733a:	2302      	movs	r3, #2
 800733c:	e02d      	b.n	800739a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2224      	movs	r2, #36	@ 0x24
 800734a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0201 	bic.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f850 	bl	8007420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e02d      	b.n	8007416 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2224      	movs	r2, #36	@ 0x24
 80073c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0201 	bic.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f812 	bl	8007420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800742c:	2b00      	cmp	r3, #0
 800742e:	d108      	bne.n	8007442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007440:	e031      	b.n	80074a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007442:	2310      	movs	r3, #16
 8007444:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007446:	2310      	movs	r3, #16
 8007448:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	0e5b      	lsrs	r3, r3, #25
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	0f5b      	lsrs	r3, r3, #29
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	7b3a      	ldrb	r2, [r7, #12]
 800746e:	4911      	ldr	r1, [pc, #68]	@ (80074b4 <UARTEx_SetNbDataToProcess+0x94>)
 8007470:	5c8a      	ldrb	r2, [r1, r2]
 8007472:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007476:	7b3a      	ldrb	r2, [r7, #12]
 8007478:	490f      	ldr	r1, [pc, #60]	@ (80074b8 <UARTEx_SetNbDataToProcess+0x98>)
 800747a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800747c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	7b7a      	ldrb	r2, [r7, #13]
 800748c:	4909      	ldr	r1, [pc, #36]	@ (80074b4 <UARTEx_SetNbDataToProcess+0x94>)
 800748e:	5c8a      	ldrb	r2, [r1, r2]
 8007490:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007494:	7b7a      	ldrb	r2, [r7, #13]
 8007496:	4908      	ldr	r1, [pc, #32]	@ (80074b8 <UARTEx_SetNbDataToProcess+0x98>)
 8007498:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800749a:	fb93 f3f2 	sdiv	r3, r3, r2
 800749e:	b29a      	uxth	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	0800a1a4 	.word	0x0800a1a4
 80074b8:	0800a1ac 	.word	0x0800a1ac

080074bc <__cvt>:
 80074bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074be:	ed2d 8b02 	vpush	{d8}
 80074c2:	eeb0 8b40 	vmov.f64	d8, d0
 80074c6:	b085      	sub	sp, #20
 80074c8:	4617      	mov	r7, r2
 80074ca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80074cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074ce:	ee18 2a90 	vmov	r2, s17
 80074d2:	f025 0520 	bic.w	r5, r5, #32
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	bfb6      	itet	lt
 80074da:	222d      	movlt	r2, #45	@ 0x2d
 80074dc:	2200      	movge	r2, #0
 80074de:	eeb1 8b40 	vneglt.f64	d8, d0
 80074e2:	2d46      	cmp	r5, #70	@ 0x46
 80074e4:	460c      	mov	r4, r1
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	d004      	beq.n	80074f4 <__cvt+0x38>
 80074ea:	2d45      	cmp	r5, #69	@ 0x45
 80074ec:	d100      	bne.n	80074f0 <__cvt+0x34>
 80074ee:	3401      	adds	r4, #1
 80074f0:	2102      	movs	r1, #2
 80074f2:	e000      	b.n	80074f6 <__cvt+0x3a>
 80074f4:	2103      	movs	r1, #3
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	ab02      	add	r3, sp, #8
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	4622      	mov	r2, r4
 8007500:	4633      	mov	r3, r6
 8007502:	eeb0 0b48 	vmov.f64	d0, d8
 8007506:	f000 fe53 	bl	80081b0 <_dtoa_r>
 800750a:	2d47      	cmp	r5, #71	@ 0x47
 800750c:	d114      	bne.n	8007538 <__cvt+0x7c>
 800750e:	07fb      	lsls	r3, r7, #31
 8007510:	d50a      	bpl.n	8007528 <__cvt+0x6c>
 8007512:	1902      	adds	r2, r0, r4
 8007514:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751c:	bf08      	it	eq
 800751e:	9203      	streq	r2, [sp, #12]
 8007520:	2130      	movs	r1, #48	@ 0x30
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	4293      	cmp	r3, r2
 8007526:	d319      	bcc.n	800755c <__cvt+0xa0>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800752c:	1a1b      	subs	r3, r3, r0
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	b005      	add	sp, #20
 8007532:	ecbd 8b02 	vpop	{d8}
 8007536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007538:	2d46      	cmp	r5, #70	@ 0x46
 800753a:	eb00 0204 	add.w	r2, r0, r4
 800753e:	d1e9      	bne.n	8007514 <__cvt+0x58>
 8007540:	7803      	ldrb	r3, [r0, #0]
 8007542:	2b30      	cmp	r3, #48	@ 0x30
 8007544:	d107      	bne.n	8007556 <__cvt+0x9a>
 8007546:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800754a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754e:	bf1c      	itt	ne
 8007550:	f1c4 0401 	rsbne	r4, r4, #1
 8007554:	6034      	strne	r4, [r6, #0]
 8007556:	6833      	ldr	r3, [r6, #0]
 8007558:	441a      	add	r2, r3
 800755a:	e7db      	b.n	8007514 <__cvt+0x58>
 800755c:	1c5c      	adds	r4, r3, #1
 800755e:	9403      	str	r4, [sp, #12]
 8007560:	7019      	strb	r1, [r3, #0]
 8007562:	e7de      	b.n	8007522 <__cvt+0x66>

08007564 <__exponent>:
 8007564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007566:	2900      	cmp	r1, #0
 8007568:	bfba      	itte	lt
 800756a:	4249      	neglt	r1, r1
 800756c:	232d      	movlt	r3, #45	@ 0x2d
 800756e:	232b      	movge	r3, #43	@ 0x2b
 8007570:	2909      	cmp	r1, #9
 8007572:	7002      	strb	r2, [r0, #0]
 8007574:	7043      	strb	r3, [r0, #1]
 8007576:	dd29      	ble.n	80075cc <__exponent+0x68>
 8007578:	f10d 0307 	add.w	r3, sp, #7
 800757c:	461d      	mov	r5, r3
 800757e:	270a      	movs	r7, #10
 8007580:	461a      	mov	r2, r3
 8007582:	fbb1 f6f7 	udiv	r6, r1, r7
 8007586:	fb07 1416 	mls	r4, r7, r6, r1
 800758a:	3430      	adds	r4, #48	@ 0x30
 800758c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007590:	460c      	mov	r4, r1
 8007592:	2c63      	cmp	r4, #99	@ 0x63
 8007594:	f103 33ff 	add.w	r3, r3, #4294967295
 8007598:	4631      	mov	r1, r6
 800759a:	dcf1      	bgt.n	8007580 <__exponent+0x1c>
 800759c:	3130      	adds	r1, #48	@ 0x30
 800759e:	1e94      	subs	r4, r2, #2
 80075a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075a4:	1c41      	adds	r1, r0, #1
 80075a6:	4623      	mov	r3, r4
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	d30a      	bcc.n	80075c2 <__exponent+0x5e>
 80075ac:	f10d 0309 	add.w	r3, sp, #9
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	42ac      	cmp	r4, r5
 80075b4:	bf88      	it	hi
 80075b6:	2300      	movhi	r3, #0
 80075b8:	3302      	adds	r3, #2
 80075ba:	4403      	add	r3, r0
 80075bc:	1a18      	subs	r0, r3, r0
 80075be:	b003      	add	sp, #12
 80075c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075ca:	e7ed      	b.n	80075a8 <__exponent+0x44>
 80075cc:	2330      	movs	r3, #48	@ 0x30
 80075ce:	3130      	adds	r1, #48	@ 0x30
 80075d0:	7083      	strb	r3, [r0, #2]
 80075d2:	70c1      	strb	r1, [r0, #3]
 80075d4:	1d03      	adds	r3, r0, #4
 80075d6:	e7f1      	b.n	80075bc <__exponent+0x58>

080075d8 <_printf_float>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	b08d      	sub	sp, #52	@ 0x34
 80075de:	460c      	mov	r4, r1
 80075e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075e4:	4616      	mov	r6, r2
 80075e6:	461f      	mov	r7, r3
 80075e8:	4605      	mov	r5, r0
 80075ea:	f000 fcdf 	bl	8007fac <_localeconv_r>
 80075ee:	f8d0 b000 	ldr.w	fp, [r0]
 80075f2:	4658      	mov	r0, fp
 80075f4:	f7f8 fedc 	bl	80003b0 <strlen>
 80075f8:	2300      	movs	r3, #0
 80075fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80075fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007600:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	9005      	str	r0, [sp, #20]
 8007608:	3307      	adds	r3, #7
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	f103 0108 	add.w	r1, r3, #8
 8007612:	f8c8 1000 	str.w	r1, [r8]
 8007616:	ed93 0b00 	vldr	d0, [r3]
 800761a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007878 <_printf_float+0x2a0>
 800761e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007622:	eeb4 7b46 	vcmp.f64	d7, d6
 8007626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800762e:	dd24      	ble.n	800767a <_printf_float+0xa2>
 8007630:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007638:	d502      	bpl.n	8007640 <_printf_float+0x68>
 800763a:	232d      	movs	r3, #45	@ 0x2d
 800763c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007640:	498f      	ldr	r1, [pc, #572]	@ (8007880 <_printf_float+0x2a8>)
 8007642:	4b90      	ldr	r3, [pc, #576]	@ (8007884 <_printf_float+0x2ac>)
 8007644:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007648:	bf8c      	ite	hi
 800764a:	4688      	movhi	r8, r1
 800764c:	4698      	movls	r8, r3
 800764e:	f022 0204 	bic.w	r2, r2, #4
 8007652:	2303      	movs	r3, #3
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	f04f 0a00 	mov.w	sl, #0
 800765c:	9700      	str	r7, [sp, #0]
 800765e:	4633      	mov	r3, r6
 8007660:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007662:	4621      	mov	r1, r4
 8007664:	4628      	mov	r0, r5
 8007666:	f000 f9d1 	bl	8007a0c <_printf_common>
 800766a:	3001      	adds	r0, #1
 800766c:	f040 8089 	bne.w	8007782 <_printf_float+0x1aa>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	b00d      	add	sp, #52	@ 0x34
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	eeb4 0b40 	vcmp.f64	d0, d0
 800767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007682:	d709      	bvc.n	8007698 <_printf_float+0xc0>
 8007684:	ee10 3a90 	vmov	r3, s1
 8007688:	2b00      	cmp	r3, #0
 800768a:	bfbc      	itt	lt
 800768c:	232d      	movlt	r3, #45	@ 0x2d
 800768e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007692:	497d      	ldr	r1, [pc, #500]	@ (8007888 <_printf_float+0x2b0>)
 8007694:	4b7d      	ldr	r3, [pc, #500]	@ (800788c <_printf_float+0x2b4>)
 8007696:	e7d5      	b.n	8007644 <_printf_float+0x6c>
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	1c59      	adds	r1, r3, #1
 800769c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80076a0:	d139      	bne.n	8007716 <_printf_float+0x13e>
 80076a2:	2306      	movs	r3, #6
 80076a4:	6063      	str	r3, [r4, #4]
 80076a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076aa:	2300      	movs	r3, #0
 80076ac:	6022      	str	r2, [r4, #0]
 80076ae:	9303      	str	r3, [sp, #12]
 80076b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80076b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80076b6:	ab09      	add	r3, sp, #36	@ 0x24
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	6861      	ldr	r1, [r4, #4]
 80076bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076c0:	4628      	mov	r0, r5
 80076c2:	f7ff fefb 	bl	80074bc <__cvt>
 80076c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076cc:	4680      	mov	r8, r0
 80076ce:	d129      	bne.n	8007724 <_printf_float+0x14c>
 80076d0:	1cc8      	adds	r0, r1, #3
 80076d2:	db02      	blt.n	80076da <_printf_float+0x102>
 80076d4:	6863      	ldr	r3, [r4, #4]
 80076d6:	4299      	cmp	r1, r3
 80076d8:	dd41      	ble.n	800775e <_printf_float+0x186>
 80076da:	f1a9 0902 	sub.w	r9, r9, #2
 80076de:	fa5f f989 	uxtb.w	r9, r9
 80076e2:	3901      	subs	r1, #1
 80076e4:	464a      	mov	r2, r9
 80076e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80076ec:	f7ff ff3a 	bl	8007564 <__exponent>
 80076f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076f2:	1813      	adds	r3, r2, r0
 80076f4:	2a01      	cmp	r2, #1
 80076f6:	4682      	mov	sl, r0
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	dc02      	bgt.n	8007702 <_printf_float+0x12a>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	07d2      	lsls	r2, r2, #31
 8007700:	d501      	bpl.n	8007706 <_printf_float+0x12e>
 8007702:	3301      	adds	r3, #1
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0a6      	beq.n	800765c <_printf_float+0x84>
 800770e:	232d      	movs	r3, #45	@ 0x2d
 8007710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007714:	e7a2      	b.n	800765c <_printf_float+0x84>
 8007716:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800771a:	d1c4      	bne.n	80076a6 <_printf_float+0xce>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1c2      	bne.n	80076a6 <_printf_float+0xce>
 8007720:	2301      	movs	r3, #1
 8007722:	e7bf      	b.n	80076a4 <_printf_float+0xcc>
 8007724:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007728:	d9db      	bls.n	80076e2 <_printf_float+0x10a>
 800772a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800772e:	d118      	bne.n	8007762 <_printf_float+0x18a>
 8007730:	2900      	cmp	r1, #0
 8007732:	6863      	ldr	r3, [r4, #4]
 8007734:	dd0b      	ble.n	800774e <_printf_float+0x176>
 8007736:	6121      	str	r1, [r4, #16]
 8007738:	b913      	cbnz	r3, 8007740 <_printf_float+0x168>
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	07d0      	lsls	r0, r2, #31
 800773e:	d502      	bpl.n	8007746 <_printf_float+0x16e>
 8007740:	3301      	adds	r3, #1
 8007742:	440b      	add	r3, r1
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007748:	f04f 0a00 	mov.w	sl, #0
 800774c:	e7db      	b.n	8007706 <_printf_float+0x12e>
 800774e:	b913      	cbnz	r3, 8007756 <_printf_float+0x17e>
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	07d2      	lsls	r2, r2, #31
 8007754:	d501      	bpl.n	800775a <_printf_float+0x182>
 8007756:	3302      	adds	r3, #2
 8007758:	e7f4      	b.n	8007744 <_printf_float+0x16c>
 800775a:	2301      	movs	r3, #1
 800775c:	e7f2      	b.n	8007744 <_printf_float+0x16c>
 800775e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007764:	4299      	cmp	r1, r3
 8007766:	db05      	blt.n	8007774 <_printf_float+0x19c>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	6121      	str	r1, [r4, #16]
 800776c:	07d8      	lsls	r0, r3, #31
 800776e:	d5ea      	bpl.n	8007746 <_printf_float+0x16e>
 8007770:	1c4b      	adds	r3, r1, #1
 8007772:	e7e7      	b.n	8007744 <_printf_float+0x16c>
 8007774:	2900      	cmp	r1, #0
 8007776:	bfd4      	ite	le
 8007778:	f1c1 0202 	rsble	r2, r1, #2
 800777c:	2201      	movgt	r2, #1
 800777e:	4413      	add	r3, r2
 8007780:	e7e0      	b.n	8007744 <_printf_float+0x16c>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	055a      	lsls	r2, r3, #21
 8007786:	d407      	bmi.n	8007798 <_printf_float+0x1c0>
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	4642      	mov	r2, r8
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	d12a      	bne.n	80077ec <_printf_float+0x214>
 8007796:	e76b      	b.n	8007670 <_printf_float+0x98>
 8007798:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800779c:	f240 80e0 	bls.w	8007960 <_printf_float+0x388>
 80077a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80077a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ac:	d133      	bne.n	8007816 <_printf_float+0x23e>
 80077ae:	4a38      	ldr	r2, [pc, #224]	@ (8007890 <_printf_float+0x2b8>)
 80077b0:	2301      	movs	r3, #1
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f af59 	beq.w	8007670 <_printf_float+0x98>
 80077be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077c2:	4543      	cmp	r3, r8
 80077c4:	db02      	blt.n	80077cc <_printf_float+0x1f4>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	07d8      	lsls	r0, r3, #31
 80077ca:	d50f      	bpl.n	80077ec <_printf_float+0x214>
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	465a      	mov	r2, fp
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af4a 	beq.w	8007670 <_printf_float+0x98>
 80077dc:	f04f 0900 	mov.w	r9, #0
 80077e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80077e4:	f104 0a1a 	add.w	sl, r4, #26
 80077e8:	45c8      	cmp	r8, r9
 80077ea:	dc09      	bgt.n	8007800 <_printf_float+0x228>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	079b      	lsls	r3, r3, #30
 80077f0:	f100 8107 	bmi.w	8007a02 <_printf_float+0x42a>
 80077f4:	68e0      	ldr	r0, [r4, #12]
 80077f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f8:	4298      	cmp	r0, r3
 80077fa:	bfb8      	it	lt
 80077fc:	4618      	movlt	r0, r3
 80077fe:	e739      	b.n	8007674 <_printf_float+0x9c>
 8007800:	2301      	movs	r3, #1
 8007802:	4652      	mov	r2, sl
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af30 	beq.w	8007670 <_printf_float+0x98>
 8007810:	f109 0901 	add.w	r9, r9, #1
 8007814:	e7e8      	b.n	80077e8 <_printf_float+0x210>
 8007816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	dc3b      	bgt.n	8007894 <_printf_float+0x2bc>
 800781c:	4a1c      	ldr	r2, [pc, #112]	@ (8007890 <_printf_float+0x2b8>)
 800781e:	2301      	movs	r3, #1
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	f43f af22 	beq.w	8007670 <_printf_float+0x98>
 800782c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007830:	ea59 0303 	orrs.w	r3, r9, r3
 8007834:	d102      	bne.n	800783c <_printf_float+0x264>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	07d9      	lsls	r1, r3, #31
 800783a:	d5d7      	bpl.n	80077ec <_printf_float+0x214>
 800783c:	9b05      	ldr	r3, [sp, #20]
 800783e:	465a      	mov	r2, fp
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f af12 	beq.w	8007670 <_printf_float+0x98>
 800784c:	f04f 0a00 	mov.w	sl, #0
 8007850:	f104 0b1a 	add.w	fp, r4, #26
 8007854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007856:	425b      	negs	r3, r3
 8007858:	4553      	cmp	r3, sl
 800785a:	dc01      	bgt.n	8007860 <_printf_float+0x288>
 800785c:	464b      	mov	r3, r9
 800785e:	e794      	b.n	800778a <_printf_float+0x1b2>
 8007860:	2301      	movs	r3, #1
 8007862:	465a      	mov	r2, fp
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	f43f af00 	beq.w	8007670 <_printf_float+0x98>
 8007870:	f10a 0a01 	add.w	sl, sl, #1
 8007874:	e7ee      	b.n	8007854 <_printf_float+0x27c>
 8007876:	bf00      	nop
 8007878:	ffffffff 	.word	0xffffffff
 800787c:	7fefffff 	.word	0x7fefffff
 8007880:	0800a1b8 	.word	0x0800a1b8
 8007884:	0800a1b4 	.word	0x0800a1b4
 8007888:	0800a1c0 	.word	0x0800a1c0
 800788c:	0800a1bc 	.word	0x0800a1bc
 8007890:	0800a1c4 	.word	0x0800a1c4
 8007894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007896:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800789a:	4553      	cmp	r3, sl
 800789c:	bfa8      	it	ge
 800789e:	4653      	movge	r3, sl
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	4699      	mov	r9, r3
 80078a4:	dc37      	bgt.n	8007916 <_printf_float+0x33e>
 80078a6:	2300      	movs	r3, #0
 80078a8:	9307      	str	r3, [sp, #28]
 80078aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ae:	f104 021a 	add.w	r2, r4, #26
 80078b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078b4:	9907      	ldr	r1, [sp, #28]
 80078b6:	9306      	str	r3, [sp, #24]
 80078b8:	eba3 0309 	sub.w	r3, r3, r9
 80078bc:	428b      	cmp	r3, r1
 80078be:	dc31      	bgt.n	8007924 <_printf_float+0x34c>
 80078c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c2:	459a      	cmp	sl, r3
 80078c4:	dc3b      	bgt.n	800793e <_printf_float+0x366>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	07da      	lsls	r2, r3, #31
 80078ca:	d438      	bmi.n	800793e <_printf_float+0x366>
 80078cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ce:	ebaa 0903 	sub.w	r9, sl, r3
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	ebaa 0303 	sub.w	r3, sl, r3
 80078d8:	4599      	cmp	r9, r3
 80078da:	bfa8      	it	ge
 80078dc:	4699      	movge	r9, r3
 80078de:	f1b9 0f00 	cmp.w	r9, #0
 80078e2:	dc34      	bgt.n	800794e <_printf_float+0x376>
 80078e4:	f04f 0800 	mov.w	r8, #0
 80078e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ec:	f104 0b1a 	add.w	fp, r4, #26
 80078f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f2:	ebaa 0303 	sub.w	r3, sl, r3
 80078f6:	eba3 0309 	sub.w	r3, r3, r9
 80078fa:	4543      	cmp	r3, r8
 80078fc:	f77f af76 	ble.w	80077ec <_printf_float+0x214>
 8007900:	2301      	movs	r3, #1
 8007902:	465a      	mov	r2, fp
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	f43f aeb0 	beq.w	8007670 <_printf_float+0x98>
 8007910:	f108 0801 	add.w	r8, r8, #1
 8007914:	e7ec      	b.n	80078f0 <_printf_float+0x318>
 8007916:	4642      	mov	r2, r8
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	47b8      	blx	r7
 800791e:	3001      	adds	r0, #1
 8007920:	d1c1      	bne.n	80078a6 <_printf_float+0x2ce>
 8007922:	e6a5      	b.n	8007670 <_printf_float+0x98>
 8007924:	2301      	movs	r3, #1
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	9206      	str	r2, [sp, #24]
 800792c:	47b8      	blx	r7
 800792e:	3001      	adds	r0, #1
 8007930:	f43f ae9e 	beq.w	8007670 <_printf_float+0x98>
 8007934:	9b07      	ldr	r3, [sp, #28]
 8007936:	9a06      	ldr	r2, [sp, #24]
 8007938:	3301      	adds	r3, #1
 800793a:	9307      	str	r3, [sp, #28]
 800793c:	e7b9      	b.n	80078b2 <_printf_float+0x2da>
 800793e:	9b05      	ldr	r3, [sp, #20]
 8007940:	465a      	mov	r2, fp
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	47b8      	blx	r7
 8007948:	3001      	adds	r0, #1
 800794a:	d1bf      	bne.n	80078cc <_printf_float+0x2f4>
 800794c:	e690      	b.n	8007670 <_printf_float+0x98>
 800794e:	9a06      	ldr	r2, [sp, #24]
 8007950:	464b      	mov	r3, r9
 8007952:	4442      	add	r2, r8
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	d1c2      	bne.n	80078e4 <_printf_float+0x30c>
 800795e:	e687      	b.n	8007670 <_printf_float+0x98>
 8007960:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007964:	f1b9 0f01 	cmp.w	r9, #1
 8007968:	dc01      	bgt.n	800796e <_printf_float+0x396>
 800796a:	07db      	lsls	r3, r3, #31
 800796c:	d536      	bpl.n	80079dc <_printf_float+0x404>
 800796e:	2301      	movs	r3, #1
 8007970:	4642      	mov	r2, r8
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae79 	beq.w	8007670 <_printf_float+0x98>
 800797e:	9b05      	ldr	r3, [sp, #20]
 8007980:	465a      	mov	r2, fp
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	f43f ae71 	beq.w	8007670 <_printf_float+0x98>
 800798e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007992:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799a:	f109 39ff 	add.w	r9, r9, #4294967295
 800799e:	d018      	beq.n	80079d2 <_printf_float+0x3fa>
 80079a0:	464b      	mov	r3, r9
 80079a2:	f108 0201 	add.w	r2, r8, #1
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	d10c      	bne.n	80079ca <_printf_float+0x3f2>
 80079b0:	e65e      	b.n	8007670 <_printf_float+0x98>
 80079b2:	2301      	movs	r3, #1
 80079b4:	465a      	mov	r2, fp
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae57 	beq.w	8007670 <_printf_float+0x98>
 80079c2:	f108 0801 	add.w	r8, r8, #1
 80079c6:	45c8      	cmp	r8, r9
 80079c8:	dbf3      	blt.n	80079b2 <_printf_float+0x3da>
 80079ca:	4653      	mov	r3, sl
 80079cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079d0:	e6dc      	b.n	800778c <_printf_float+0x1b4>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	f104 0b1a 	add.w	fp, r4, #26
 80079da:	e7f4      	b.n	80079c6 <_printf_float+0x3ee>
 80079dc:	2301      	movs	r3, #1
 80079de:	4642      	mov	r2, r8
 80079e0:	e7e1      	b.n	80079a6 <_printf_float+0x3ce>
 80079e2:	2301      	movs	r3, #1
 80079e4:	464a      	mov	r2, r9
 80079e6:	4631      	mov	r1, r6
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b8      	blx	r7
 80079ec:	3001      	adds	r0, #1
 80079ee:	f43f ae3f 	beq.w	8007670 <_printf_float+0x98>
 80079f2:	f108 0801 	add.w	r8, r8, #1
 80079f6:	68e3      	ldr	r3, [r4, #12]
 80079f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079fa:	1a5b      	subs	r3, r3, r1
 80079fc:	4543      	cmp	r3, r8
 80079fe:	dcf0      	bgt.n	80079e2 <_printf_float+0x40a>
 8007a00:	e6f8      	b.n	80077f4 <_printf_float+0x21c>
 8007a02:	f04f 0800 	mov.w	r8, #0
 8007a06:	f104 0919 	add.w	r9, r4, #25
 8007a0a:	e7f4      	b.n	80079f6 <_printf_float+0x41e>

08007a0c <_printf_common>:
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	4616      	mov	r6, r2
 8007a12:	4698      	mov	r8, r3
 8007a14:	688a      	ldr	r2, [r1, #8]
 8007a16:	690b      	ldr	r3, [r1, #16]
 8007a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	bfb8      	it	lt
 8007a20:	4613      	movlt	r3, r2
 8007a22:	6033      	str	r3, [r6, #0]
 8007a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a28:	4607      	mov	r7, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	b10a      	cbz	r2, 8007a32 <_printf_common+0x26>
 8007a2e:	3301      	adds	r3, #1
 8007a30:	6033      	str	r3, [r6, #0]
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	0699      	lsls	r1, r3, #26
 8007a36:	bf42      	ittt	mi
 8007a38:	6833      	ldrmi	r3, [r6, #0]
 8007a3a:	3302      	addmi	r3, #2
 8007a3c:	6033      	strmi	r3, [r6, #0]
 8007a3e:	6825      	ldr	r5, [r4, #0]
 8007a40:	f015 0506 	ands.w	r5, r5, #6
 8007a44:	d106      	bne.n	8007a54 <_printf_common+0x48>
 8007a46:	f104 0a19 	add.w	sl, r4, #25
 8007a4a:	68e3      	ldr	r3, [r4, #12]
 8007a4c:	6832      	ldr	r2, [r6, #0]
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	42ab      	cmp	r3, r5
 8007a52:	dc26      	bgt.n	8007aa2 <_printf_common+0x96>
 8007a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	3b00      	subs	r3, #0
 8007a5c:	bf18      	it	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	0692      	lsls	r2, r2, #26
 8007a62:	d42b      	bmi.n	8007abc <_printf_common+0xb0>
 8007a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a68:	4641      	mov	r1, r8
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	47c8      	blx	r9
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d01e      	beq.n	8007ab0 <_printf_common+0xa4>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	6922      	ldr	r2, [r4, #16]
 8007a76:	f003 0306 	and.w	r3, r3, #6
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	bf02      	ittt	eq
 8007a7e:	68e5      	ldreq	r5, [r4, #12]
 8007a80:	6833      	ldreq	r3, [r6, #0]
 8007a82:	1aed      	subeq	r5, r5, r3
 8007a84:	68a3      	ldr	r3, [r4, #8]
 8007a86:	bf0c      	ite	eq
 8007a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a8c:	2500      	movne	r5, #0
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	bfc4      	itt	gt
 8007a92:	1a9b      	subgt	r3, r3, r2
 8007a94:	18ed      	addgt	r5, r5, r3
 8007a96:	2600      	movs	r6, #0
 8007a98:	341a      	adds	r4, #26
 8007a9a:	42b5      	cmp	r5, r6
 8007a9c:	d11a      	bne.n	8007ad4 <_printf_common+0xc8>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e008      	b.n	8007ab4 <_printf_common+0xa8>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	47c8      	blx	r9
 8007aac:	3001      	adds	r0, #1
 8007aae:	d103      	bne.n	8007ab8 <_printf_common+0xac>
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab8:	3501      	adds	r5, #1
 8007aba:	e7c6      	b.n	8007a4a <_printf_common+0x3e>
 8007abc:	18e1      	adds	r1, r4, r3
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	2030      	movs	r0, #48	@ 0x30
 8007ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ac6:	4422      	add	r2, r4
 8007ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	e7c7      	b.n	8007a64 <_printf_common+0x58>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	4641      	mov	r1, r8
 8007ada:	4638      	mov	r0, r7
 8007adc:	47c8      	blx	r9
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d0e6      	beq.n	8007ab0 <_printf_common+0xa4>
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	e7d9      	b.n	8007a9a <_printf_common+0x8e>
	...

08007ae8 <_printf_i>:
 8007ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aec:	7e0f      	ldrb	r7, [r1, #24]
 8007aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007af0:	2f78      	cmp	r7, #120	@ 0x78
 8007af2:	4691      	mov	r9, r2
 8007af4:	4680      	mov	r8, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	469a      	mov	sl, r3
 8007afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007afe:	d807      	bhi.n	8007b10 <_printf_i+0x28>
 8007b00:	2f62      	cmp	r7, #98	@ 0x62
 8007b02:	d80a      	bhi.n	8007b1a <_printf_i+0x32>
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	f000 80d1 	beq.w	8007cac <_printf_i+0x1c4>
 8007b0a:	2f58      	cmp	r7, #88	@ 0x58
 8007b0c:	f000 80b8 	beq.w	8007c80 <_printf_i+0x198>
 8007b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b18:	e03a      	b.n	8007b90 <_printf_i+0xa8>
 8007b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b1e:	2b15      	cmp	r3, #21
 8007b20:	d8f6      	bhi.n	8007b10 <_printf_i+0x28>
 8007b22:	a101      	add	r1, pc, #4	@ (adr r1, 8007b28 <_printf_i+0x40>)
 8007b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b28:	08007b81 	.word	0x08007b81
 8007b2c:	08007b95 	.word	0x08007b95
 8007b30:	08007b11 	.word	0x08007b11
 8007b34:	08007b11 	.word	0x08007b11
 8007b38:	08007b11 	.word	0x08007b11
 8007b3c:	08007b11 	.word	0x08007b11
 8007b40:	08007b95 	.word	0x08007b95
 8007b44:	08007b11 	.word	0x08007b11
 8007b48:	08007b11 	.word	0x08007b11
 8007b4c:	08007b11 	.word	0x08007b11
 8007b50:	08007b11 	.word	0x08007b11
 8007b54:	08007c93 	.word	0x08007c93
 8007b58:	08007bbf 	.word	0x08007bbf
 8007b5c:	08007c4d 	.word	0x08007c4d
 8007b60:	08007b11 	.word	0x08007b11
 8007b64:	08007b11 	.word	0x08007b11
 8007b68:	08007cb5 	.word	0x08007cb5
 8007b6c:	08007b11 	.word	0x08007b11
 8007b70:	08007bbf 	.word	0x08007bbf
 8007b74:	08007b11 	.word	0x08007b11
 8007b78:	08007b11 	.word	0x08007b11
 8007b7c:	08007c55 	.word	0x08007c55
 8007b80:	6833      	ldr	r3, [r6, #0]
 8007b82:	1d1a      	adds	r2, r3, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6032      	str	r2, [r6, #0]
 8007b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b90:	2301      	movs	r3, #1
 8007b92:	e09c      	b.n	8007cce <_printf_i+0x1e6>
 8007b94:	6833      	ldr	r3, [r6, #0]
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	1d19      	adds	r1, r3, #4
 8007b9a:	6031      	str	r1, [r6, #0]
 8007b9c:	0606      	lsls	r6, r0, #24
 8007b9e:	d501      	bpl.n	8007ba4 <_printf_i+0xbc>
 8007ba0:	681d      	ldr	r5, [r3, #0]
 8007ba2:	e003      	b.n	8007bac <_printf_i+0xc4>
 8007ba4:	0645      	lsls	r5, r0, #25
 8007ba6:	d5fb      	bpl.n	8007ba0 <_printf_i+0xb8>
 8007ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	da03      	bge.n	8007bb8 <_printf_i+0xd0>
 8007bb0:	232d      	movs	r3, #45	@ 0x2d
 8007bb2:	426d      	negs	r5, r5
 8007bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bb8:	4858      	ldr	r0, [pc, #352]	@ (8007d1c <_printf_i+0x234>)
 8007bba:	230a      	movs	r3, #10
 8007bbc:	e011      	b.n	8007be2 <_printf_i+0xfa>
 8007bbe:	6821      	ldr	r1, [r4, #0]
 8007bc0:	6833      	ldr	r3, [r6, #0]
 8007bc2:	0608      	lsls	r0, r1, #24
 8007bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bc8:	d402      	bmi.n	8007bd0 <_printf_i+0xe8>
 8007bca:	0649      	lsls	r1, r1, #25
 8007bcc:	bf48      	it	mi
 8007bce:	b2ad      	uxthmi	r5, r5
 8007bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bd2:	4852      	ldr	r0, [pc, #328]	@ (8007d1c <_printf_i+0x234>)
 8007bd4:	6033      	str	r3, [r6, #0]
 8007bd6:	bf14      	ite	ne
 8007bd8:	230a      	movne	r3, #10
 8007bda:	2308      	moveq	r3, #8
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007be2:	6866      	ldr	r6, [r4, #4]
 8007be4:	60a6      	str	r6, [r4, #8]
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	db05      	blt.n	8007bf6 <_printf_i+0x10e>
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	432e      	orrs	r6, r5
 8007bee:	f021 0104 	bic.w	r1, r1, #4
 8007bf2:	6021      	str	r1, [r4, #0]
 8007bf4:	d04b      	beq.n	8007c8e <_printf_i+0x1a6>
 8007bf6:	4616      	mov	r6, r2
 8007bf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bfc:	fb03 5711 	mls	r7, r3, r1, r5
 8007c00:	5dc7      	ldrb	r7, [r0, r7]
 8007c02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c06:	462f      	mov	r7, r5
 8007c08:	42bb      	cmp	r3, r7
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	d9f4      	bls.n	8007bf8 <_printf_i+0x110>
 8007c0e:	2b08      	cmp	r3, #8
 8007c10:	d10b      	bne.n	8007c2a <_printf_i+0x142>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	07df      	lsls	r7, r3, #31
 8007c16:	d508      	bpl.n	8007c2a <_printf_i+0x142>
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	6861      	ldr	r1, [r4, #4]
 8007c1c:	4299      	cmp	r1, r3
 8007c1e:	bfde      	ittt	le
 8007c20:	2330      	movle	r3, #48	@ 0x30
 8007c22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c2a:	1b92      	subs	r2, r2, r6
 8007c2c:	6122      	str	r2, [r4, #16]
 8007c2e:	f8cd a000 	str.w	sl, [sp]
 8007c32:	464b      	mov	r3, r9
 8007c34:	aa03      	add	r2, sp, #12
 8007c36:	4621      	mov	r1, r4
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f7ff fee7 	bl	8007a0c <_printf_common>
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d14a      	bne.n	8007cd8 <_printf_i+0x1f0>
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	b004      	add	sp, #16
 8007c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	f043 0320 	orr.w	r3, r3, #32
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	4832      	ldr	r0, [pc, #200]	@ (8007d20 <_printf_i+0x238>)
 8007c56:	2778      	movs	r7, #120	@ 0x78
 8007c58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	6831      	ldr	r1, [r6, #0]
 8007c60:	061f      	lsls	r7, r3, #24
 8007c62:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c66:	d402      	bmi.n	8007c6e <_printf_i+0x186>
 8007c68:	065f      	lsls	r7, r3, #25
 8007c6a:	bf48      	it	mi
 8007c6c:	b2ad      	uxthmi	r5, r5
 8007c6e:	6031      	str	r1, [r6, #0]
 8007c70:	07d9      	lsls	r1, r3, #31
 8007c72:	bf44      	itt	mi
 8007c74:	f043 0320 	orrmi.w	r3, r3, #32
 8007c78:	6023      	strmi	r3, [r4, #0]
 8007c7a:	b11d      	cbz	r5, 8007c84 <_printf_i+0x19c>
 8007c7c:	2310      	movs	r3, #16
 8007c7e:	e7ad      	b.n	8007bdc <_printf_i+0xf4>
 8007c80:	4826      	ldr	r0, [pc, #152]	@ (8007d1c <_printf_i+0x234>)
 8007c82:	e7e9      	b.n	8007c58 <_printf_i+0x170>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	f023 0320 	bic.w	r3, r3, #32
 8007c8a:	6023      	str	r3, [r4, #0]
 8007c8c:	e7f6      	b.n	8007c7c <_printf_i+0x194>
 8007c8e:	4616      	mov	r6, r2
 8007c90:	e7bd      	b.n	8007c0e <_printf_i+0x126>
 8007c92:	6833      	ldr	r3, [r6, #0]
 8007c94:	6825      	ldr	r5, [r4, #0]
 8007c96:	6961      	ldr	r1, [r4, #20]
 8007c98:	1d18      	adds	r0, r3, #4
 8007c9a:	6030      	str	r0, [r6, #0]
 8007c9c:	062e      	lsls	r6, r5, #24
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	d501      	bpl.n	8007ca6 <_printf_i+0x1be>
 8007ca2:	6019      	str	r1, [r3, #0]
 8007ca4:	e002      	b.n	8007cac <_printf_i+0x1c4>
 8007ca6:	0668      	lsls	r0, r5, #25
 8007ca8:	d5fb      	bpl.n	8007ca2 <_printf_i+0x1ba>
 8007caa:	8019      	strh	r1, [r3, #0]
 8007cac:	2300      	movs	r3, #0
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	e7bc      	b.n	8007c2e <_printf_i+0x146>
 8007cb4:	6833      	ldr	r3, [r6, #0]
 8007cb6:	1d1a      	adds	r2, r3, #4
 8007cb8:	6032      	str	r2, [r6, #0]
 8007cba:	681e      	ldr	r6, [r3, #0]
 8007cbc:	6862      	ldr	r2, [r4, #4]
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f7f8 fb25 	bl	8000310 <memchr>
 8007cc6:	b108      	cbz	r0, 8007ccc <_printf_i+0x1e4>
 8007cc8:	1b80      	subs	r0, r0, r6
 8007cca:	6060      	str	r0, [r4, #4]
 8007ccc:	6863      	ldr	r3, [r4, #4]
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cd6:	e7aa      	b.n	8007c2e <_printf_i+0x146>
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	4632      	mov	r2, r6
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4640      	mov	r0, r8
 8007ce0:	47d0      	blx	sl
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d0ad      	beq.n	8007c42 <_printf_i+0x15a>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	079b      	lsls	r3, r3, #30
 8007cea:	d413      	bmi.n	8007d14 <_printf_i+0x22c>
 8007cec:	68e0      	ldr	r0, [r4, #12]
 8007cee:	9b03      	ldr	r3, [sp, #12]
 8007cf0:	4298      	cmp	r0, r3
 8007cf2:	bfb8      	it	lt
 8007cf4:	4618      	movlt	r0, r3
 8007cf6:	e7a6      	b.n	8007c46 <_printf_i+0x15e>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4640      	mov	r0, r8
 8007d00:	47d0      	blx	sl
 8007d02:	3001      	adds	r0, #1
 8007d04:	d09d      	beq.n	8007c42 <_printf_i+0x15a>
 8007d06:	3501      	adds	r5, #1
 8007d08:	68e3      	ldr	r3, [r4, #12]
 8007d0a:	9903      	ldr	r1, [sp, #12]
 8007d0c:	1a5b      	subs	r3, r3, r1
 8007d0e:	42ab      	cmp	r3, r5
 8007d10:	dcf2      	bgt.n	8007cf8 <_printf_i+0x210>
 8007d12:	e7eb      	b.n	8007cec <_printf_i+0x204>
 8007d14:	2500      	movs	r5, #0
 8007d16:	f104 0619 	add.w	r6, r4, #25
 8007d1a:	e7f5      	b.n	8007d08 <_printf_i+0x220>
 8007d1c:	0800a1c6 	.word	0x0800a1c6
 8007d20:	0800a1d7 	.word	0x0800a1d7

08007d24 <std>:
 8007d24:	2300      	movs	r3, #0
 8007d26:	b510      	push	{r4, lr}
 8007d28:	4604      	mov	r4, r0
 8007d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d32:	6083      	str	r3, [r0, #8]
 8007d34:	8181      	strh	r1, [r0, #12]
 8007d36:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d38:	81c2      	strh	r2, [r0, #14]
 8007d3a:	6183      	str	r3, [r0, #24]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	2208      	movs	r2, #8
 8007d40:	305c      	adds	r0, #92	@ 0x5c
 8007d42:	f000 f92a 	bl	8007f9a <memset>
 8007d46:	4b0d      	ldr	r3, [pc, #52]	@ (8007d7c <std+0x58>)
 8007d48:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <std+0x5c>)
 8007d4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <std+0x60>)
 8007d50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d52:	4b0d      	ldr	r3, [pc, #52]	@ (8007d88 <std+0x64>)
 8007d54:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <std+0x68>)
 8007d58:	6224      	str	r4, [r4, #32]
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	d006      	beq.n	8007d6c <std+0x48>
 8007d5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d62:	4294      	cmp	r4, r2
 8007d64:	d002      	beq.n	8007d6c <std+0x48>
 8007d66:	33d0      	adds	r3, #208	@ 0xd0
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	d105      	bne.n	8007d78 <std+0x54>
 8007d6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d74:	f000 b98e 	b.w	8008094 <__retarget_lock_init_recursive>
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	bf00      	nop
 8007d7c:	08007f15 	.word	0x08007f15
 8007d80:	08007f37 	.word	0x08007f37
 8007d84:	08007f6f 	.word	0x08007f6f
 8007d88:	08007f93 	.word	0x08007f93
 8007d8c:	240003bc 	.word	0x240003bc

08007d90 <stdio_exit_handler>:
 8007d90:	4a02      	ldr	r2, [pc, #8]	@ (8007d9c <stdio_exit_handler+0xc>)
 8007d92:	4903      	ldr	r1, [pc, #12]	@ (8007da0 <stdio_exit_handler+0x10>)
 8007d94:	4803      	ldr	r0, [pc, #12]	@ (8007da4 <stdio_exit_handler+0x14>)
 8007d96:	f000 b869 	b.w	8007e6c <_fwalk_sglue>
 8007d9a:	bf00      	nop
 8007d9c:	2400002c 	.word	0x2400002c
 8007da0:	08009919 	.word	0x08009919
 8007da4:	2400003c 	.word	0x2400003c

08007da8 <cleanup_stdio>:
 8007da8:	6841      	ldr	r1, [r0, #4]
 8007daa:	4b0c      	ldr	r3, [pc, #48]	@ (8007ddc <cleanup_stdio+0x34>)
 8007dac:	4299      	cmp	r1, r3
 8007dae:	b510      	push	{r4, lr}
 8007db0:	4604      	mov	r4, r0
 8007db2:	d001      	beq.n	8007db8 <cleanup_stdio+0x10>
 8007db4:	f001 fdb0 	bl	8009918 <_fflush_r>
 8007db8:	68a1      	ldr	r1, [r4, #8]
 8007dba:	4b09      	ldr	r3, [pc, #36]	@ (8007de0 <cleanup_stdio+0x38>)
 8007dbc:	4299      	cmp	r1, r3
 8007dbe:	d002      	beq.n	8007dc6 <cleanup_stdio+0x1e>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f001 fda9 	bl	8009918 <_fflush_r>
 8007dc6:	68e1      	ldr	r1, [r4, #12]
 8007dc8:	4b06      	ldr	r3, [pc, #24]	@ (8007de4 <cleanup_stdio+0x3c>)
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	d004      	beq.n	8007dd8 <cleanup_stdio+0x30>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd4:	f001 bda0 	b.w	8009918 <_fflush_r>
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	bf00      	nop
 8007ddc:	240003bc 	.word	0x240003bc
 8007de0:	24000424 	.word	0x24000424
 8007de4:	2400048c 	.word	0x2400048c

08007de8 <global_stdio_init.part.0>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	4b0b      	ldr	r3, [pc, #44]	@ (8007e18 <global_stdio_init.part.0+0x30>)
 8007dec:	4c0b      	ldr	r4, [pc, #44]	@ (8007e1c <global_stdio_init.part.0+0x34>)
 8007dee:	4a0c      	ldr	r2, [pc, #48]	@ (8007e20 <global_stdio_init.part.0+0x38>)
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	4620      	mov	r0, r4
 8007df4:	2200      	movs	r2, #0
 8007df6:	2104      	movs	r1, #4
 8007df8:	f7ff ff94 	bl	8007d24 <std>
 8007dfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e00:	2201      	movs	r2, #1
 8007e02:	2109      	movs	r1, #9
 8007e04:	f7ff ff8e 	bl	8007d24 <std>
 8007e08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e12:	2112      	movs	r1, #18
 8007e14:	f7ff bf86 	b.w	8007d24 <std>
 8007e18:	240004f4 	.word	0x240004f4
 8007e1c:	240003bc 	.word	0x240003bc
 8007e20:	08007d91 	.word	0x08007d91

08007e24 <__sfp_lock_acquire>:
 8007e24:	4801      	ldr	r0, [pc, #4]	@ (8007e2c <__sfp_lock_acquire+0x8>)
 8007e26:	f000 b936 	b.w	8008096 <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	240004fd 	.word	0x240004fd

08007e30 <__sfp_lock_release>:
 8007e30:	4801      	ldr	r0, [pc, #4]	@ (8007e38 <__sfp_lock_release+0x8>)
 8007e32:	f000 b931 	b.w	8008098 <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	240004fd 	.word	0x240004fd

08007e3c <__sinit>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	f7ff fff0 	bl	8007e24 <__sfp_lock_acquire>
 8007e44:	6a23      	ldr	r3, [r4, #32]
 8007e46:	b11b      	cbz	r3, 8007e50 <__sinit+0x14>
 8007e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4c:	f7ff bff0 	b.w	8007e30 <__sfp_lock_release>
 8007e50:	4b04      	ldr	r3, [pc, #16]	@ (8007e64 <__sinit+0x28>)
 8007e52:	6223      	str	r3, [r4, #32]
 8007e54:	4b04      	ldr	r3, [pc, #16]	@ (8007e68 <__sinit+0x2c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1f5      	bne.n	8007e48 <__sinit+0xc>
 8007e5c:	f7ff ffc4 	bl	8007de8 <global_stdio_init.part.0>
 8007e60:	e7f2      	b.n	8007e48 <__sinit+0xc>
 8007e62:	bf00      	nop
 8007e64:	08007da9 	.word	0x08007da9
 8007e68:	240004f4 	.word	0x240004f4

08007e6c <_fwalk_sglue>:
 8007e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e70:	4607      	mov	r7, r0
 8007e72:	4688      	mov	r8, r1
 8007e74:	4614      	mov	r4, r2
 8007e76:	2600      	movs	r6, #0
 8007e78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e7c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e80:	d505      	bpl.n	8007e8e <_fwalk_sglue+0x22>
 8007e82:	6824      	ldr	r4, [r4, #0]
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	d1f7      	bne.n	8007e78 <_fwalk_sglue+0xc>
 8007e88:	4630      	mov	r0, r6
 8007e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d907      	bls.n	8007ea4 <_fwalk_sglue+0x38>
 8007e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	d003      	beq.n	8007ea4 <_fwalk_sglue+0x38>
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	47c0      	blx	r8
 8007ea2:	4306      	orrs	r6, r0
 8007ea4:	3568      	adds	r5, #104	@ 0x68
 8007ea6:	e7e9      	b.n	8007e7c <_fwalk_sglue+0x10>

08007ea8 <sniprintf>:
 8007ea8:	b40c      	push	{r2, r3}
 8007eaa:	b530      	push	{r4, r5, lr}
 8007eac:	4b18      	ldr	r3, [pc, #96]	@ (8007f10 <sniprintf+0x68>)
 8007eae:	1e0c      	subs	r4, r1, #0
 8007eb0:	681d      	ldr	r5, [r3, #0]
 8007eb2:	b09d      	sub	sp, #116	@ 0x74
 8007eb4:	da08      	bge.n	8007ec8 <sniprintf+0x20>
 8007eb6:	238b      	movs	r3, #139	@ 0x8b
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebe:	b01d      	add	sp, #116	@ 0x74
 8007ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec4:	b002      	add	sp, #8
 8007ec6:	4770      	bx	lr
 8007ec8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ecc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007ed6:	bf14      	ite	ne
 8007ed8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007edc:	4623      	moveq	r3, r4
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	9307      	str	r3, [sp, #28]
 8007ee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ee6:	9002      	str	r0, [sp, #8]
 8007ee8:	9006      	str	r0, [sp, #24]
 8007eea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007eee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ef0:	ab21      	add	r3, sp, #132	@ 0x84
 8007ef2:	a902      	add	r1, sp, #8
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	f001 fb8e 	bl	8009618 <_svfiprintf_r>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	bfbc      	itt	lt
 8007f00:	238b      	movlt	r3, #139	@ 0x8b
 8007f02:	602b      	strlt	r3, [r5, #0]
 8007f04:	2c00      	cmp	r4, #0
 8007f06:	d0da      	beq.n	8007ebe <sniprintf+0x16>
 8007f08:	9b02      	ldr	r3, [sp, #8]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	e7d6      	b.n	8007ebe <sniprintf+0x16>
 8007f10:	24000038 	.word	0x24000038

08007f14 <__sread>:
 8007f14:	b510      	push	{r4, lr}
 8007f16:	460c      	mov	r4, r1
 8007f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1c:	f000 f86c 	bl	8007ff8 <_read_r>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	bfab      	itete	ge
 8007f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f26:	89a3      	ldrhlt	r3, [r4, #12]
 8007f28:	181b      	addge	r3, r3, r0
 8007f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f2e:	bfac      	ite	ge
 8007f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f32:	81a3      	strhlt	r3, [r4, #12]
 8007f34:	bd10      	pop	{r4, pc}

08007f36 <__swrite>:
 8007f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	461f      	mov	r7, r3
 8007f3c:	898b      	ldrh	r3, [r1, #12]
 8007f3e:	05db      	lsls	r3, r3, #23
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	4616      	mov	r6, r2
 8007f46:	d505      	bpl.n	8007f54 <__swrite+0x1e>
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f000 f840 	bl	8007fd4 <_lseek_r>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	4628      	mov	r0, r5
 8007f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	f000 b857 	b.w	800801c <_write_r>

08007f6e <__sseek>:
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	460c      	mov	r4, r1
 8007f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f76:	f000 f82d 	bl	8007fd4 <_lseek_r>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	bf15      	itete	ne
 8007f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f8a:	81a3      	strheq	r3, [r4, #12]
 8007f8c:	bf18      	it	ne
 8007f8e:	81a3      	strhne	r3, [r4, #12]
 8007f90:	bd10      	pop	{r4, pc}

08007f92 <__sclose>:
 8007f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f96:	f000 b80d 	b.w	8007fb4 <_close_r>

08007f9a <memset>:
 8007f9a:	4402      	add	r2, r0
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d100      	bne.n	8007fa4 <memset+0xa>
 8007fa2:	4770      	bx	lr
 8007fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa8:	e7f9      	b.n	8007f9e <memset+0x4>
	...

08007fac <_localeconv_r>:
 8007fac:	4800      	ldr	r0, [pc, #0]	@ (8007fb0 <_localeconv_r+0x4>)
 8007fae:	4770      	bx	lr
 8007fb0:	24000178 	.word	0x24000178

08007fb4 <_close_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d06      	ldr	r5, [pc, #24]	@ (8007fd0 <_close_r+0x1c>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	602b      	str	r3, [r5, #0]
 8007fc0:	f7f9 fdda 	bl	8001b78 <_close>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_close_r+0x1a>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_close_r+0x1a>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	240004f8 	.word	0x240004f8

08007fd4 <_lseek_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d07      	ldr	r5, [pc, #28]	@ (8007ff4 <_lseek_r+0x20>)
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4608      	mov	r0, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	602a      	str	r2, [r5, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f7f9 fdef 	bl	8001bc6 <_lseek>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_lseek_r+0x1e>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_lseek_r+0x1e>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	240004f8 	.word	0x240004f8

08007ff8 <_read_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d07      	ldr	r5, [pc, #28]	@ (8008018 <_read_r+0x20>)
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	4608      	mov	r0, r1
 8008000:	4611      	mov	r1, r2
 8008002:	2200      	movs	r2, #0
 8008004:	602a      	str	r2, [r5, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f7f9 fd7d 	bl	8001b06 <_read>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_read_r+0x1e>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_read_r+0x1e>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	240004f8 	.word	0x240004f8

0800801c <_write_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d07      	ldr	r5, [pc, #28]	@ (800803c <_write_r+0x20>)
 8008020:	4604      	mov	r4, r0
 8008022:	4608      	mov	r0, r1
 8008024:	4611      	mov	r1, r2
 8008026:	2200      	movs	r2, #0
 8008028:	602a      	str	r2, [r5, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	f7f9 fd88 	bl	8001b40 <_write>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_write_r+0x1e>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_write_r+0x1e>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	240004f8 	.word	0x240004f8

08008040 <__errno>:
 8008040:	4b01      	ldr	r3, [pc, #4]	@ (8008048 <__errno+0x8>)
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	24000038 	.word	0x24000038

0800804c <__libc_init_array>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	4d0d      	ldr	r5, [pc, #52]	@ (8008084 <__libc_init_array+0x38>)
 8008050:	4c0d      	ldr	r4, [pc, #52]	@ (8008088 <__libc_init_array+0x3c>)
 8008052:	1b64      	subs	r4, r4, r5
 8008054:	10a4      	asrs	r4, r4, #2
 8008056:	2600      	movs	r6, #0
 8008058:	42a6      	cmp	r6, r4
 800805a:	d109      	bne.n	8008070 <__libc_init_array+0x24>
 800805c:	4d0b      	ldr	r5, [pc, #44]	@ (800808c <__libc_init_array+0x40>)
 800805e:	4c0c      	ldr	r4, [pc, #48]	@ (8008090 <__libc_init_array+0x44>)
 8008060:	f001 fff8 	bl	800a054 <_init>
 8008064:	1b64      	subs	r4, r4, r5
 8008066:	10a4      	asrs	r4, r4, #2
 8008068:	2600      	movs	r6, #0
 800806a:	42a6      	cmp	r6, r4
 800806c:	d105      	bne.n	800807a <__libc_init_array+0x2e>
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	f855 3b04 	ldr.w	r3, [r5], #4
 8008074:	4798      	blx	r3
 8008076:	3601      	adds	r6, #1
 8008078:	e7ee      	b.n	8008058 <__libc_init_array+0xc>
 800807a:	f855 3b04 	ldr.w	r3, [r5], #4
 800807e:	4798      	blx	r3
 8008080:	3601      	adds	r6, #1
 8008082:	e7f2      	b.n	800806a <__libc_init_array+0x1e>
 8008084:	0800a534 	.word	0x0800a534
 8008088:	0800a534 	.word	0x0800a534
 800808c:	0800a534 	.word	0x0800a534
 8008090:	0800a538 	.word	0x0800a538

08008094 <__retarget_lock_init_recursive>:
 8008094:	4770      	bx	lr

08008096 <__retarget_lock_acquire_recursive>:
 8008096:	4770      	bx	lr

08008098 <__retarget_lock_release_recursive>:
 8008098:	4770      	bx	lr

0800809a <quorem>:
 800809a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809e:	6903      	ldr	r3, [r0, #16]
 80080a0:	690c      	ldr	r4, [r1, #16]
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	4607      	mov	r7, r0
 80080a6:	db7e      	blt.n	80081a6 <quorem+0x10c>
 80080a8:	3c01      	subs	r4, #1
 80080aa:	f101 0814 	add.w	r8, r1, #20
 80080ae:	00a3      	lsls	r3, r4, #2
 80080b0:	f100 0514 	add.w	r5, r0, #20
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c4:	3301      	adds	r3, #1
 80080c6:	429a      	cmp	r2, r3
 80080c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80080d0:	d32e      	bcc.n	8008130 <quorem+0x96>
 80080d2:	f04f 0a00 	mov.w	sl, #0
 80080d6:	46c4      	mov	ip, r8
 80080d8:	46ae      	mov	lr, r5
 80080da:	46d3      	mov	fp, sl
 80080dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080e0:	b298      	uxth	r0, r3
 80080e2:	fb06 a000 	mla	r0, r6, r0, sl
 80080e6:	0c02      	lsrs	r2, r0, #16
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	fb06 2303 	mla	r3, r6, r3, r2
 80080ee:	f8de 2000 	ldr.w	r2, [lr]
 80080f2:	b280      	uxth	r0, r0
 80080f4:	b292      	uxth	r2, r2
 80080f6:	1a12      	subs	r2, r2, r0
 80080f8:	445a      	add	r2, fp
 80080fa:	f8de 0000 	ldr.w	r0, [lr]
 80080fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008102:	b29b      	uxth	r3, r3
 8008104:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008108:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800810c:	b292      	uxth	r2, r2
 800810e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008112:	45e1      	cmp	r9, ip
 8008114:	f84e 2b04 	str.w	r2, [lr], #4
 8008118:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800811c:	d2de      	bcs.n	80080dc <quorem+0x42>
 800811e:	9b00      	ldr	r3, [sp, #0]
 8008120:	58eb      	ldr	r3, [r5, r3]
 8008122:	b92b      	cbnz	r3, 8008130 <quorem+0x96>
 8008124:	9b01      	ldr	r3, [sp, #4]
 8008126:	3b04      	subs	r3, #4
 8008128:	429d      	cmp	r5, r3
 800812a:	461a      	mov	r2, r3
 800812c:	d32f      	bcc.n	800818e <quorem+0xf4>
 800812e:	613c      	str	r4, [r7, #16]
 8008130:	4638      	mov	r0, r7
 8008132:	f001 f90d 	bl	8009350 <__mcmp>
 8008136:	2800      	cmp	r0, #0
 8008138:	db25      	blt.n	8008186 <quorem+0xec>
 800813a:	4629      	mov	r1, r5
 800813c:	2000      	movs	r0, #0
 800813e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008142:	f8d1 c000 	ldr.w	ip, [r1]
 8008146:	fa1f fe82 	uxth.w	lr, r2
 800814a:	fa1f f38c 	uxth.w	r3, ip
 800814e:	eba3 030e 	sub.w	r3, r3, lr
 8008152:	4403      	add	r3, r0
 8008154:	0c12      	lsrs	r2, r2, #16
 8008156:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800815a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800815e:	b29b      	uxth	r3, r3
 8008160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008164:	45c1      	cmp	r9, r8
 8008166:	f841 3b04 	str.w	r3, [r1], #4
 800816a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800816e:	d2e6      	bcs.n	800813e <quorem+0xa4>
 8008170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008178:	b922      	cbnz	r2, 8008184 <quorem+0xea>
 800817a:	3b04      	subs	r3, #4
 800817c:	429d      	cmp	r5, r3
 800817e:	461a      	mov	r2, r3
 8008180:	d30b      	bcc.n	800819a <quorem+0x100>
 8008182:	613c      	str	r4, [r7, #16]
 8008184:	3601      	adds	r6, #1
 8008186:	4630      	mov	r0, r6
 8008188:	b003      	add	sp, #12
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	3b04      	subs	r3, #4
 8008192:	2a00      	cmp	r2, #0
 8008194:	d1cb      	bne.n	800812e <quorem+0x94>
 8008196:	3c01      	subs	r4, #1
 8008198:	e7c6      	b.n	8008128 <quorem+0x8e>
 800819a:	6812      	ldr	r2, [r2, #0]
 800819c:	3b04      	subs	r3, #4
 800819e:	2a00      	cmp	r2, #0
 80081a0:	d1ef      	bne.n	8008182 <quorem+0xe8>
 80081a2:	3c01      	subs	r4, #1
 80081a4:	e7ea      	b.n	800817c <quorem+0xe2>
 80081a6:	2000      	movs	r0, #0
 80081a8:	e7ee      	b.n	8008188 <quorem+0xee>
 80081aa:	0000      	movs	r0, r0
 80081ac:	0000      	movs	r0, r0
	...

080081b0 <_dtoa_r>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	ed2d 8b02 	vpush	{d8}
 80081b8:	69c7      	ldr	r7, [r0, #28]
 80081ba:	b091      	sub	sp, #68	@ 0x44
 80081bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081c0:	ec55 4b10 	vmov	r4, r5, d0
 80081c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80081c6:	9107      	str	r1, [sp, #28]
 80081c8:	4681      	mov	r9, r0
 80081ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80081cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80081ce:	b97f      	cbnz	r7, 80081f0 <_dtoa_r+0x40>
 80081d0:	2010      	movs	r0, #16
 80081d2:	f000 fd95 	bl	8008d00 <malloc>
 80081d6:	4602      	mov	r2, r0
 80081d8:	f8c9 001c 	str.w	r0, [r9, #28]
 80081dc:	b920      	cbnz	r0, 80081e8 <_dtoa_r+0x38>
 80081de:	4ba0      	ldr	r3, [pc, #640]	@ (8008460 <_dtoa_r+0x2b0>)
 80081e0:	21ef      	movs	r1, #239	@ 0xef
 80081e2:	48a0      	ldr	r0, [pc, #640]	@ (8008464 <_dtoa_r+0x2b4>)
 80081e4:	f001 fbf8 	bl	80099d8 <__assert_func>
 80081e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081ec:	6007      	str	r7, [r0, #0]
 80081ee:	60c7      	str	r7, [r0, #12]
 80081f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081f4:	6819      	ldr	r1, [r3, #0]
 80081f6:	b159      	cbz	r1, 8008210 <_dtoa_r+0x60>
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	604a      	str	r2, [r1, #4]
 80081fc:	2301      	movs	r3, #1
 80081fe:	4093      	lsls	r3, r2
 8008200:	608b      	str	r3, [r1, #8]
 8008202:	4648      	mov	r0, r9
 8008204:	f000 fe72 	bl	8008eec <_Bfree>
 8008208:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	1e2b      	subs	r3, r5, #0
 8008212:	bfbb      	ittet	lt
 8008214:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008218:	9303      	strlt	r3, [sp, #12]
 800821a:	2300      	movge	r3, #0
 800821c:	2201      	movlt	r2, #1
 800821e:	bfac      	ite	ge
 8008220:	6033      	strge	r3, [r6, #0]
 8008222:	6032      	strlt	r2, [r6, #0]
 8008224:	4b90      	ldr	r3, [pc, #576]	@ (8008468 <_dtoa_r+0x2b8>)
 8008226:	9e03      	ldr	r6, [sp, #12]
 8008228:	43b3      	bics	r3, r6
 800822a:	d110      	bne.n	800824e <_dtoa_r+0x9e>
 800822c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800822e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008238:	4323      	orrs	r3, r4
 800823a:	f000 84e6 	beq.w	8008c0a <_dtoa_r+0xa5a>
 800823e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008240:	4f8a      	ldr	r7, [pc, #552]	@ (800846c <_dtoa_r+0x2bc>)
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 84e8 	beq.w	8008c18 <_dtoa_r+0xa68>
 8008248:	1cfb      	adds	r3, r7, #3
 800824a:	f000 bce3 	b.w	8008c14 <_dtoa_r+0xa64>
 800824e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008252:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825a:	d10a      	bne.n	8008272 <_dtoa_r+0xc2>
 800825c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800825e:	2301      	movs	r3, #1
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008264:	b113      	cbz	r3, 800826c <_dtoa_r+0xbc>
 8008266:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008268:	4b81      	ldr	r3, [pc, #516]	@ (8008470 <_dtoa_r+0x2c0>)
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	4f81      	ldr	r7, [pc, #516]	@ (8008474 <_dtoa_r+0x2c4>)
 800826e:	f000 bcd3 	b.w	8008c18 <_dtoa_r+0xa68>
 8008272:	aa0e      	add	r2, sp, #56	@ 0x38
 8008274:	a90f      	add	r1, sp, #60	@ 0x3c
 8008276:	4648      	mov	r0, r9
 8008278:	eeb0 0b48 	vmov.f64	d0, d8
 800827c:	f001 f918 	bl	80094b0 <__d2b>
 8008280:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008286:	9001      	str	r0, [sp, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d045      	beq.n	8008318 <_dtoa_r+0x168>
 800828c:	eeb0 7b48 	vmov.f64	d7, d8
 8008290:	ee18 1a90 	vmov	r1, s17
 8008294:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008298:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800829c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80082a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80082a4:	2500      	movs	r5, #0
 80082a6:	ee07 1a90 	vmov	s15, r1
 80082aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80082ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008448 <_dtoa_r+0x298>
 80082b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80082b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008450 <_dtoa_r+0x2a0>
 80082ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80082be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008458 <_dtoa_r+0x2a8>
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80082ca:	eeb0 7b46 	vmov.f64	d7, d6
 80082ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80082d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80082d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80082da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082de:	ee16 8a90 	vmov	r8, s13
 80082e2:	d508      	bpl.n	80082f6 <_dtoa_r+0x146>
 80082e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80082e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80082ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f0:	bf18      	it	ne
 80082f2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80082f6:	f1b8 0f16 	cmp.w	r8, #22
 80082fa:	d82b      	bhi.n	8008354 <_dtoa_r+0x1a4>
 80082fc:	495e      	ldr	r1, [pc, #376]	@ (8008478 <_dtoa_r+0x2c8>)
 80082fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008302:	ed91 7b00 	vldr	d7, [r1]
 8008306:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	d501      	bpl.n	8008314 <_dtoa_r+0x164>
 8008310:	f108 38ff 	add.w	r8, r8, #4294967295
 8008314:	2100      	movs	r1, #0
 8008316:	e01e      	b.n	8008356 <_dtoa_r+0x1a6>
 8008318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800831a:	4413      	add	r3, r2
 800831c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008320:	2920      	cmp	r1, #32
 8008322:	bfc1      	itttt	gt
 8008324:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008328:	408e      	lslgt	r6, r1
 800832a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800832e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008332:	bfd6      	itet	le
 8008334:	f1c1 0120 	rsble	r1, r1, #32
 8008338:	4331      	orrgt	r1, r6
 800833a:	fa04 f101 	lslle.w	r1, r4, r1
 800833e:	ee07 1a90 	vmov	s15, r1
 8008342:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008346:	3b01      	subs	r3, #1
 8008348:	ee17 1a90 	vmov	r1, s15
 800834c:	2501      	movs	r5, #1
 800834e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008352:	e7a8      	b.n	80082a6 <_dtoa_r+0xf6>
 8008354:	2101      	movs	r1, #1
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	1e53      	subs	r3, r2, #1
 800835a:	9306      	str	r3, [sp, #24]
 800835c:	bf45      	ittet	mi
 800835e:	f1c2 0301 	rsbmi	r3, r2, #1
 8008362:	9304      	strmi	r3, [sp, #16]
 8008364:	2300      	movpl	r3, #0
 8008366:	2300      	movmi	r3, #0
 8008368:	bf4c      	ite	mi
 800836a:	9306      	strmi	r3, [sp, #24]
 800836c:	9304      	strpl	r3, [sp, #16]
 800836e:	f1b8 0f00 	cmp.w	r8, #0
 8008372:	910c      	str	r1, [sp, #48]	@ 0x30
 8008374:	db18      	blt.n	80083a8 <_dtoa_r+0x1f8>
 8008376:	9b06      	ldr	r3, [sp, #24]
 8008378:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800837c:	4443      	add	r3, r8
 800837e:	9306      	str	r3, [sp, #24]
 8008380:	2300      	movs	r3, #0
 8008382:	9a07      	ldr	r2, [sp, #28]
 8008384:	2a09      	cmp	r2, #9
 8008386:	d845      	bhi.n	8008414 <_dtoa_r+0x264>
 8008388:	2a05      	cmp	r2, #5
 800838a:	bfc4      	itt	gt
 800838c:	3a04      	subgt	r2, #4
 800838e:	9207      	strgt	r2, [sp, #28]
 8008390:	9a07      	ldr	r2, [sp, #28]
 8008392:	f1a2 0202 	sub.w	r2, r2, #2
 8008396:	bfcc      	ite	gt
 8008398:	2400      	movgt	r4, #0
 800839a:	2401      	movle	r4, #1
 800839c:	2a03      	cmp	r2, #3
 800839e:	d844      	bhi.n	800842a <_dtoa_r+0x27a>
 80083a0:	e8df f002 	tbb	[pc, r2]
 80083a4:	0b173634 	.word	0x0b173634
 80083a8:	9b04      	ldr	r3, [sp, #16]
 80083aa:	2200      	movs	r2, #0
 80083ac:	eba3 0308 	sub.w	r3, r3, r8
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80083b4:	f1c8 0300 	rsb	r3, r8, #0
 80083b8:	e7e3      	b.n	8008382 <_dtoa_r+0x1d2>
 80083ba:	2201      	movs	r2, #1
 80083bc:	9208      	str	r2, [sp, #32]
 80083be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083c0:	eb08 0b02 	add.w	fp, r8, r2
 80083c4:	f10b 0a01 	add.w	sl, fp, #1
 80083c8:	4652      	mov	r2, sl
 80083ca:	2a01      	cmp	r2, #1
 80083cc:	bfb8      	it	lt
 80083ce:	2201      	movlt	r2, #1
 80083d0:	e006      	b.n	80083e0 <_dtoa_r+0x230>
 80083d2:	2201      	movs	r2, #1
 80083d4:	9208      	str	r2, [sp, #32]
 80083d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083d8:	2a00      	cmp	r2, #0
 80083da:	dd29      	ble.n	8008430 <_dtoa_r+0x280>
 80083dc:	4693      	mov	fp, r2
 80083de:	4692      	mov	sl, r2
 80083e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80083e4:	2100      	movs	r1, #0
 80083e6:	2004      	movs	r0, #4
 80083e8:	f100 0614 	add.w	r6, r0, #20
 80083ec:	4296      	cmp	r6, r2
 80083ee:	d926      	bls.n	800843e <_dtoa_r+0x28e>
 80083f0:	6079      	str	r1, [r7, #4]
 80083f2:	4648      	mov	r0, r9
 80083f4:	9305      	str	r3, [sp, #20]
 80083f6:	f000 fd39 	bl	8008e6c <_Balloc>
 80083fa:	9b05      	ldr	r3, [sp, #20]
 80083fc:	4607      	mov	r7, r0
 80083fe:	2800      	cmp	r0, #0
 8008400:	d13e      	bne.n	8008480 <_dtoa_r+0x2d0>
 8008402:	4b1e      	ldr	r3, [pc, #120]	@ (800847c <_dtoa_r+0x2cc>)
 8008404:	4602      	mov	r2, r0
 8008406:	f240 11af 	movw	r1, #431	@ 0x1af
 800840a:	e6ea      	b.n	80081e2 <_dtoa_r+0x32>
 800840c:	2200      	movs	r2, #0
 800840e:	e7e1      	b.n	80083d4 <_dtoa_r+0x224>
 8008410:	2200      	movs	r2, #0
 8008412:	e7d3      	b.n	80083bc <_dtoa_r+0x20c>
 8008414:	2401      	movs	r4, #1
 8008416:	2200      	movs	r2, #0
 8008418:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800841c:	f04f 3bff 	mov.w	fp, #4294967295
 8008420:	2100      	movs	r1, #0
 8008422:	46da      	mov	sl, fp
 8008424:	2212      	movs	r2, #18
 8008426:	9109      	str	r1, [sp, #36]	@ 0x24
 8008428:	e7da      	b.n	80083e0 <_dtoa_r+0x230>
 800842a:	2201      	movs	r2, #1
 800842c:	9208      	str	r2, [sp, #32]
 800842e:	e7f5      	b.n	800841c <_dtoa_r+0x26c>
 8008430:	f04f 0b01 	mov.w	fp, #1
 8008434:	46da      	mov	sl, fp
 8008436:	465a      	mov	r2, fp
 8008438:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800843c:	e7d0      	b.n	80083e0 <_dtoa_r+0x230>
 800843e:	3101      	adds	r1, #1
 8008440:	0040      	lsls	r0, r0, #1
 8008442:	e7d1      	b.n	80083e8 <_dtoa_r+0x238>
 8008444:	f3af 8000 	nop.w
 8008448:	636f4361 	.word	0x636f4361
 800844c:	3fd287a7 	.word	0x3fd287a7
 8008450:	8b60c8b3 	.word	0x8b60c8b3
 8008454:	3fc68a28 	.word	0x3fc68a28
 8008458:	509f79fb 	.word	0x509f79fb
 800845c:	3fd34413 	.word	0x3fd34413
 8008460:	0800a1f5 	.word	0x0800a1f5
 8008464:	0800a20c 	.word	0x0800a20c
 8008468:	7ff00000 	.word	0x7ff00000
 800846c:	0800a1f1 	.word	0x0800a1f1
 8008470:	0800a1c5 	.word	0x0800a1c5
 8008474:	0800a1c4 	.word	0x0800a1c4
 8008478:	0800a360 	.word	0x0800a360
 800847c:	0800a264 	.word	0x0800a264
 8008480:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008484:	f1ba 0f0e 	cmp.w	sl, #14
 8008488:	6010      	str	r0, [r2, #0]
 800848a:	d86e      	bhi.n	800856a <_dtoa_r+0x3ba>
 800848c:	2c00      	cmp	r4, #0
 800848e:	d06c      	beq.n	800856a <_dtoa_r+0x3ba>
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	f340 80b4 	ble.w	8008600 <_dtoa_r+0x450>
 8008498:	4ac8      	ldr	r2, [pc, #800]	@ (80087bc <_dtoa_r+0x60c>)
 800849a:	f008 010f 	and.w	r1, r8, #15
 800849e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80084a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80084a6:	ed92 7b00 	vldr	d7, [r2]
 80084aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80084ae:	f000 809b 	beq.w	80085e8 <_dtoa_r+0x438>
 80084b2:	4ac3      	ldr	r2, [pc, #780]	@ (80087c0 <_dtoa_r+0x610>)
 80084b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80084b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80084bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80084c0:	f001 010f 	and.w	r1, r1, #15
 80084c4:	2203      	movs	r2, #3
 80084c6:	48be      	ldr	r0, [pc, #760]	@ (80087c0 <_dtoa_r+0x610>)
 80084c8:	2900      	cmp	r1, #0
 80084ca:	f040 808f 	bne.w	80085ec <_dtoa_r+0x43c>
 80084ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80084d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80084d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80084dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084e0:	2900      	cmp	r1, #0
 80084e2:	f000 80b3 	beq.w	800864c <_dtoa_r+0x49c>
 80084e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80084ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f2:	f140 80ab 	bpl.w	800864c <_dtoa_r+0x49c>
 80084f6:	f1ba 0f00 	cmp.w	sl, #0
 80084fa:	f000 80a7 	beq.w	800864c <_dtoa_r+0x49c>
 80084fe:	f1bb 0f00 	cmp.w	fp, #0
 8008502:	dd30      	ble.n	8008566 <_dtoa_r+0x3b6>
 8008504:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008508:	ee27 7b06 	vmul.f64	d7, d7, d6
 800850c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008510:	f108 31ff 	add.w	r1, r8, #4294967295
 8008514:	9105      	str	r1, [sp, #20]
 8008516:	3201      	adds	r2, #1
 8008518:	465c      	mov	r4, fp
 800851a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800851e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008522:	ee07 2a90 	vmov	s15, r2
 8008526:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800852a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800852e:	ee15 2a90 	vmov	r2, s11
 8008532:	ec51 0b15 	vmov	r0, r1, d5
 8008536:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800853a:	2c00      	cmp	r4, #0
 800853c:	f040 808a 	bne.w	8008654 <_dtoa_r+0x4a4>
 8008540:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008544:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008548:	ec41 0b17 	vmov	d7, r0, r1
 800854c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008554:	f300 826a 	bgt.w	8008a2c <_dtoa_r+0x87c>
 8008558:	eeb1 7b47 	vneg.f64	d7, d7
 800855c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008564:	d423      	bmi.n	80085ae <_dtoa_r+0x3fe>
 8008566:	ed8d 8b02 	vstr	d8, [sp, #8]
 800856a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800856c:	2a00      	cmp	r2, #0
 800856e:	f2c0 8129 	blt.w	80087c4 <_dtoa_r+0x614>
 8008572:	f1b8 0f0e 	cmp.w	r8, #14
 8008576:	f300 8125 	bgt.w	80087c4 <_dtoa_r+0x614>
 800857a:	4b90      	ldr	r3, [pc, #576]	@ (80087bc <_dtoa_r+0x60c>)
 800857c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008580:	ed93 6b00 	vldr	d6, [r3]
 8008584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008586:	2b00      	cmp	r3, #0
 8008588:	f280 80c8 	bge.w	800871c <_dtoa_r+0x56c>
 800858c:	f1ba 0f00 	cmp.w	sl, #0
 8008590:	f300 80c4 	bgt.w	800871c <_dtoa_r+0x56c>
 8008594:	d10b      	bne.n	80085ae <_dtoa_r+0x3fe>
 8008596:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800859a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800859e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085aa:	f2c0 823c 	blt.w	8008a26 <_dtoa_r+0x876>
 80085ae:	2400      	movs	r4, #0
 80085b0:	4625      	mov	r5, r4
 80085b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b4:	43db      	mvns	r3, r3
 80085b6:	9305      	str	r3, [sp, #20]
 80085b8:	463e      	mov	r6, r7
 80085ba:	f04f 0800 	mov.w	r8, #0
 80085be:	4621      	mov	r1, r4
 80085c0:	4648      	mov	r0, r9
 80085c2:	f000 fc93 	bl	8008eec <_Bfree>
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	f000 80a2 	beq.w	8008710 <_dtoa_r+0x560>
 80085cc:	f1b8 0f00 	cmp.w	r8, #0
 80085d0:	d005      	beq.n	80085de <_dtoa_r+0x42e>
 80085d2:	45a8      	cmp	r8, r5
 80085d4:	d003      	beq.n	80085de <_dtoa_r+0x42e>
 80085d6:	4641      	mov	r1, r8
 80085d8:	4648      	mov	r0, r9
 80085da:	f000 fc87 	bl	8008eec <_Bfree>
 80085de:	4629      	mov	r1, r5
 80085e0:	4648      	mov	r0, r9
 80085e2:	f000 fc83 	bl	8008eec <_Bfree>
 80085e6:	e093      	b.n	8008710 <_dtoa_r+0x560>
 80085e8:	2202      	movs	r2, #2
 80085ea:	e76c      	b.n	80084c6 <_dtoa_r+0x316>
 80085ec:	07cc      	lsls	r4, r1, #31
 80085ee:	d504      	bpl.n	80085fa <_dtoa_r+0x44a>
 80085f0:	ed90 6b00 	vldr	d6, [r0]
 80085f4:	3201      	adds	r2, #1
 80085f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085fa:	1049      	asrs	r1, r1, #1
 80085fc:	3008      	adds	r0, #8
 80085fe:	e763      	b.n	80084c8 <_dtoa_r+0x318>
 8008600:	d022      	beq.n	8008648 <_dtoa_r+0x498>
 8008602:	f1c8 0100 	rsb	r1, r8, #0
 8008606:	4a6d      	ldr	r2, [pc, #436]	@ (80087bc <_dtoa_r+0x60c>)
 8008608:	f001 000f 	and.w	r0, r1, #15
 800860c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008610:	ed92 7b00 	vldr	d7, [r2]
 8008614:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008618:	ed8d 7b02 	vstr	d7, [sp, #8]
 800861c:	4868      	ldr	r0, [pc, #416]	@ (80087c0 <_dtoa_r+0x610>)
 800861e:	1109      	asrs	r1, r1, #4
 8008620:	2400      	movs	r4, #0
 8008622:	2202      	movs	r2, #2
 8008624:	b929      	cbnz	r1, 8008632 <_dtoa_r+0x482>
 8008626:	2c00      	cmp	r4, #0
 8008628:	f43f af57 	beq.w	80084da <_dtoa_r+0x32a>
 800862c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008630:	e753      	b.n	80084da <_dtoa_r+0x32a>
 8008632:	07ce      	lsls	r6, r1, #31
 8008634:	d505      	bpl.n	8008642 <_dtoa_r+0x492>
 8008636:	ed90 6b00 	vldr	d6, [r0]
 800863a:	3201      	adds	r2, #1
 800863c:	2401      	movs	r4, #1
 800863e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008642:	1049      	asrs	r1, r1, #1
 8008644:	3008      	adds	r0, #8
 8008646:	e7ed      	b.n	8008624 <_dtoa_r+0x474>
 8008648:	2202      	movs	r2, #2
 800864a:	e746      	b.n	80084da <_dtoa_r+0x32a>
 800864c:	f8cd 8014 	str.w	r8, [sp, #20]
 8008650:	4654      	mov	r4, sl
 8008652:	e762      	b.n	800851a <_dtoa_r+0x36a>
 8008654:	4a59      	ldr	r2, [pc, #356]	@ (80087bc <_dtoa_r+0x60c>)
 8008656:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800865a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800865e:	9a08      	ldr	r2, [sp, #32]
 8008660:	ec41 0b17 	vmov	d7, r0, r1
 8008664:	443c      	add	r4, r7
 8008666:	b34a      	cbz	r2, 80086bc <_dtoa_r+0x50c>
 8008668:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800866c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008670:	463e      	mov	r6, r7
 8008672:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008676:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800867a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800867e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008682:	ee14 2a90 	vmov	r2, s9
 8008686:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800868a:	3230      	adds	r2, #48	@ 0x30
 800868c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008690:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008698:	f806 2b01 	strb.w	r2, [r6], #1
 800869c:	d438      	bmi.n	8008710 <_dtoa_r+0x560>
 800869e:	ee32 5b46 	vsub.f64	d5, d2, d6
 80086a2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80086a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086aa:	d46e      	bmi.n	800878a <_dtoa_r+0x5da>
 80086ac:	42a6      	cmp	r6, r4
 80086ae:	f43f af5a 	beq.w	8008566 <_dtoa_r+0x3b6>
 80086b2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80086b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80086ba:	e7e0      	b.n	800867e <_dtoa_r+0x4ce>
 80086bc:	4621      	mov	r1, r4
 80086be:	463e      	mov	r6, r7
 80086c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80086c4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80086c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80086cc:	ee14 2a90 	vmov	r2, s9
 80086d0:	3230      	adds	r2, #48	@ 0x30
 80086d2:	f806 2b01 	strb.w	r2, [r6], #1
 80086d6:	42a6      	cmp	r6, r4
 80086d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80086dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80086e0:	d119      	bne.n	8008716 <_dtoa_r+0x566>
 80086e2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80086e6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80086ea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80086ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f2:	dc4a      	bgt.n	800878a <_dtoa_r+0x5da>
 80086f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80086f8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80086fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008700:	f57f af31 	bpl.w	8008566 <_dtoa_r+0x3b6>
 8008704:	460e      	mov	r6, r1
 8008706:	3901      	subs	r1, #1
 8008708:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800870c:	2b30      	cmp	r3, #48	@ 0x30
 800870e:	d0f9      	beq.n	8008704 <_dtoa_r+0x554>
 8008710:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008714:	e027      	b.n	8008766 <_dtoa_r+0x5b6>
 8008716:	ee26 6b03 	vmul.f64	d6, d6, d3
 800871a:	e7d5      	b.n	80086c8 <_dtoa_r+0x518>
 800871c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008720:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008724:	463e      	mov	r6, r7
 8008726:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800872a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800872e:	ee15 3a10 	vmov	r3, s10
 8008732:	3330      	adds	r3, #48	@ 0x30
 8008734:	f806 3b01 	strb.w	r3, [r6], #1
 8008738:	1bf3      	subs	r3, r6, r7
 800873a:	459a      	cmp	sl, r3
 800873c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008740:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008744:	d132      	bne.n	80087ac <_dtoa_r+0x5fc>
 8008746:	ee37 7b07 	vadd.f64	d7, d7, d7
 800874a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800874e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008752:	dc18      	bgt.n	8008786 <_dtoa_r+0x5d6>
 8008754:	eeb4 7b46 	vcmp.f64	d7, d6
 8008758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875c:	d103      	bne.n	8008766 <_dtoa_r+0x5b6>
 800875e:	ee15 3a10 	vmov	r3, s10
 8008762:	07db      	lsls	r3, r3, #31
 8008764:	d40f      	bmi.n	8008786 <_dtoa_r+0x5d6>
 8008766:	9901      	ldr	r1, [sp, #4]
 8008768:	4648      	mov	r0, r9
 800876a:	f000 fbbf 	bl	8008eec <_Bfree>
 800876e:	2300      	movs	r3, #0
 8008770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008772:	7033      	strb	r3, [r6, #0]
 8008774:	f108 0301 	add.w	r3, r8, #1
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 824b 	beq.w	8008c18 <_dtoa_r+0xa68>
 8008782:	601e      	str	r6, [r3, #0]
 8008784:	e248      	b.n	8008c18 <_dtoa_r+0xa68>
 8008786:	f8cd 8014 	str.w	r8, [sp, #20]
 800878a:	4633      	mov	r3, r6
 800878c:	461e      	mov	r6, r3
 800878e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008792:	2a39      	cmp	r2, #57	@ 0x39
 8008794:	d106      	bne.n	80087a4 <_dtoa_r+0x5f4>
 8008796:	429f      	cmp	r7, r3
 8008798:	d1f8      	bne.n	800878c <_dtoa_r+0x5dc>
 800879a:	9a05      	ldr	r2, [sp, #20]
 800879c:	3201      	adds	r2, #1
 800879e:	9205      	str	r2, [sp, #20]
 80087a0:	2230      	movs	r2, #48	@ 0x30
 80087a2:	703a      	strb	r2, [r7, #0]
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	3201      	adds	r2, #1
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	e7b1      	b.n	8008710 <_dtoa_r+0x560>
 80087ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b8:	d1b5      	bne.n	8008726 <_dtoa_r+0x576>
 80087ba:	e7d4      	b.n	8008766 <_dtoa_r+0x5b6>
 80087bc:	0800a360 	.word	0x0800a360
 80087c0:	0800a338 	.word	0x0800a338
 80087c4:	9908      	ldr	r1, [sp, #32]
 80087c6:	2900      	cmp	r1, #0
 80087c8:	f000 80e9 	beq.w	800899e <_dtoa_r+0x7ee>
 80087cc:	9907      	ldr	r1, [sp, #28]
 80087ce:	2901      	cmp	r1, #1
 80087d0:	f300 80cb 	bgt.w	800896a <_dtoa_r+0x7ba>
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	f000 80c4 	beq.w	8008962 <_dtoa_r+0x7b2>
 80087da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80087de:	9e04      	ldr	r6, [sp, #16]
 80087e0:	461c      	mov	r4, r3
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	9b04      	ldr	r3, [sp, #16]
 80087e6:	4413      	add	r3, r2
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	9b06      	ldr	r3, [sp, #24]
 80087ec:	2101      	movs	r1, #1
 80087ee:	4413      	add	r3, r2
 80087f0:	4648      	mov	r0, r9
 80087f2:	9306      	str	r3, [sp, #24]
 80087f4:	f000 fc2e 	bl	8009054 <__i2b>
 80087f8:	9b05      	ldr	r3, [sp, #20]
 80087fa:	4605      	mov	r5, r0
 80087fc:	b166      	cbz	r6, 8008818 <_dtoa_r+0x668>
 80087fe:	9a06      	ldr	r2, [sp, #24]
 8008800:	2a00      	cmp	r2, #0
 8008802:	dd09      	ble.n	8008818 <_dtoa_r+0x668>
 8008804:	42b2      	cmp	r2, r6
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	bfa8      	it	ge
 800880a:	4632      	movge	r2, r6
 800880c:	1a89      	subs	r1, r1, r2
 800880e:	9104      	str	r1, [sp, #16]
 8008810:	9906      	ldr	r1, [sp, #24]
 8008812:	1ab6      	subs	r6, r6, r2
 8008814:	1a8a      	subs	r2, r1, r2
 8008816:	9206      	str	r2, [sp, #24]
 8008818:	b30b      	cbz	r3, 800885e <_dtoa_r+0x6ae>
 800881a:	9a08      	ldr	r2, [sp, #32]
 800881c:	2a00      	cmp	r2, #0
 800881e:	f000 80c5 	beq.w	80089ac <_dtoa_r+0x7fc>
 8008822:	2c00      	cmp	r4, #0
 8008824:	f000 80bf 	beq.w	80089a6 <_dtoa_r+0x7f6>
 8008828:	4629      	mov	r1, r5
 800882a:	4622      	mov	r2, r4
 800882c:	4648      	mov	r0, r9
 800882e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008830:	f000 fcc8 	bl	80091c4 <__pow5mult>
 8008834:	9a01      	ldr	r2, [sp, #4]
 8008836:	4601      	mov	r1, r0
 8008838:	4605      	mov	r5, r0
 800883a:	4648      	mov	r0, r9
 800883c:	f000 fc20 	bl	8009080 <__multiply>
 8008840:	9901      	ldr	r1, [sp, #4]
 8008842:	9005      	str	r0, [sp, #20]
 8008844:	4648      	mov	r0, r9
 8008846:	f000 fb51 	bl	8008eec <_Bfree>
 800884a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800884c:	1b1b      	subs	r3, r3, r4
 800884e:	f000 80b0 	beq.w	80089b2 <_dtoa_r+0x802>
 8008852:	9905      	ldr	r1, [sp, #20]
 8008854:	461a      	mov	r2, r3
 8008856:	4648      	mov	r0, r9
 8008858:	f000 fcb4 	bl	80091c4 <__pow5mult>
 800885c:	9001      	str	r0, [sp, #4]
 800885e:	2101      	movs	r1, #1
 8008860:	4648      	mov	r0, r9
 8008862:	f000 fbf7 	bl	8009054 <__i2b>
 8008866:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008868:	4604      	mov	r4, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 81da 	beq.w	8008c24 <_dtoa_r+0xa74>
 8008870:	461a      	mov	r2, r3
 8008872:	4601      	mov	r1, r0
 8008874:	4648      	mov	r0, r9
 8008876:	f000 fca5 	bl	80091c4 <__pow5mult>
 800887a:	9b07      	ldr	r3, [sp, #28]
 800887c:	2b01      	cmp	r3, #1
 800887e:	4604      	mov	r4, r0
 8008880:	f300 80a0 	bgt.w	80089c4 <_dtoa_r+0x814>
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f040 8096 	bne.w	80089b8 <_dtoa_r+0x808>
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008892:	2a00      	cmp	r2, #0
 8008894:	f040 8092 	bne.w	80089bc <_dtoa_r+0x80c>
 8008898:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800889c:	0d12      	lsrs	r2, r2, #20
 800889e:	0512      	lsls	r2, r2, #20
 80088a0:	2a00      	cmp	r2, #0
 80088a2:	f000 808d 	beq.w	80089c0 <_dtoa_r+0x810>
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	3301      	adds	r3, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	9b06      	ldr	r3, [sp, #24]
 80088ae:	3301      	adds	r3, #1
 80088b0:	9306      	str	r3, [sp, #24]
 80088b2:	2301      	movs	r3, #1
 80088b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 81b9 	beq.w	8008c30 <_dtoa_r+0xa80>
 80088be:	6922      	ldr	r2, [r4, #16]
 80088c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80088c4:	6910      	ldr	r0, [r2, #16]
 80088c6:	f000 fb79 	bl	8008fbc <__hi0bits>
 80088ca:	f1c0 0020 	rsb	r0, r0, #32
 80088ce:	9b06      	ldr	r3, [sp, #24]
 80088d0:	4418      	add	r0, r3
 80088d2:	f010 001f 	ands.w	r0, r0, #31
 80088d6:	f000 8081 	beq.w	80089dc <_dtoa_r+0x82c>
 80088da:	f1c0 0220 	rsb	r2, r0, #32
 80088de:	2a04      	cmp	r2, #4
 80088e0:	dd73      	ble.n	80089ca <_dtoa_r+0x81a>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	f1c0 001c 	rsb	r0, r0, #28
 80088e8:	4403      	add	r3, r0
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	9b06      	ldr	r3, [sp, #24]
 80088ee:	4406      	add	r6, r0
 80088f0:	4403      	add	r3, r0
 80088f2:	9306      	str	r3, [sp, #24]
 80088f4:	9b04      	ldr	r3, [sp, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd05      	ble.n	8008906 <_dtoa_r+0x756>
 80088fa:	9901      	ldr	r1, [sp, #4]
 80088fc:	461a      	mov	r2, r3
 80088fe:	4648      	mov	r0, r9
 8008900:	f000 fcba 	bl	8009278 <__lshift>
 8008904:	9001      	str	r0, [sp, #4]
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd05      	ble.n	8008918 <_dtoa_r+0x768>
 800890c:	4621      	mov	r1, r4
 800890e:	461a      	mov	r2, r3
 8008910:	4648      	mov	r0, r9
 8008912:	f000 fcb1 	bl	8009278 <__lshift>
 8008916:	4604      	mov	r4, r0
 8008918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800891a:	2b00      	cmp	r3, #0
 800891c:	d060      	beq.n	80089e0 <_dtoa_r+0x830>
 800891e:	9801      	ldr	r0, [sp, #4]
 8008920:	4621      	mov	r1, r4
 8008922:	f000 fd15 	bl	8009350 <__mcmp>
 8008926:	2800      	cmp	r0, #0
 8008928:	da5a      	bge.n	80089e0 <_dtoa_r+0x830>
 800892a:	f108 33ff 	add.w	r3, r8, #4294967295
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	9901      	ldr	r1, [sp, #4]
 8008932:	2300      	movs	r3, #0
 8008934:	220a      	movs	r2, #10
 8008936:	4648      	mov	r0, r9
 8008938:	f000 fafa 	bl	8008f30 <__multadd>
 800893c:	9b08      	ldr	r3, [sp, #32]
 800893e:	9001      	str	r0, [sp, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 8177 	beq.w	8008c34 <_dtoa_r+0xa84>
 8008946:	4629      	mov	r1, r5
 8008948:	2300      	movs	r3, #0
 800894a:	220a      	movs	r2, #10
 800894c:	4648      	mov	r0, r9
 800894e:	f000 faef 	bl	8008f30 <__multadd>
 8008952:	f1bb 0f00 	cmp.w	fp, #0
 8008956:	4605      	mov	r5, r0
 8008958:	dc6e      	bgt.n	8008a38 <_dtoa_r+0x888>
 800895a:	9b07      	ldr	r3, [sp, #28]
 800895c:	2b02      	cmp	r3, #2
 800895e:	dc48      	bgt.n	80089f2 <_dtoa_r+0x842>
 8008960:	e06a      	b.n	8008a38 <_dtoa_r+0x888>
 8008962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008964:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008968:	e739      	b.n	80087de <_dtoa_r+0x62e>
 800896a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800896e:	42a3      	cmp	r3, r4
 8008970:	db07      	blt.n	8008982 <_dtoa_r+0x7d2>
 8008972:	f1ba 0f00 	cmp.w	sl, #0
 8008976:	eba3 0404 	sub.w	r4, r3, r4
 800897a:	db0b      	blt.n	8008994 <_dtoa_r+0x7e4>
 800897c:	9e04      	ldr	r6, [sp, #16]
 800897e:	4652      	mov	r2, sl
 8008980:	e72f      	b.n	80087e2 <_dtoa_r+0x632>
 8008982:	1ae2      	subs	r2, r4, r3
 8008984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008986:	9e04      	ldr	r6, [sp, #16]
 8008988:	4413      	add	r3, r2
 800898a:	930a      	str	r3, [sp, #40]	@ 0x28
 800898c:	4652      	mov	r2, sl
 800898e:	4623      	mov	r3, r4
 8008990:	2400      	movs	r4, #0
 8008992:	e726      	b.n	80087e2 <_dtoa_r+0x632>
 8008994:	9a04      	ldr	r2, [sp, #16]
 8008996:	eba2 060a 	sub.w	r6, r2, sl
 800899a:	2200      	movs	r2, #0
 800899c:	e721      	b.n	80087e2 <_dtoa_r+0x632>
 800899e:	9e04      	ldr	r6, [sp, #16]
 80089a0:	9d08      	ldr	r5, [sp, #32]
 80089a2:	461c      	mov	r4, r3
 80089a4:	e72a      	b.n	80087fc <_dtoa_r+0x64c>
 80089a6:	9a01      	ldr	r2, [sp, #4]
 80089a8:	9205      	str	r2, [sp, #20]
 80089aa:	e752      	b.n	8008852 <_dtoa_r+0x6a2>
 80089ac:	9901      	ldr	r1, [sp, #4]
 80089ae:	461a      	mov	r2, r3
 80089b0:	e751      	b.n	8008856 <_dtoa_r+0x6a6>
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	e752      	b.n	800885e <_dtoa_r+0x6ae>
 80089b8:	2300      	movs	r3, #0
 80089ba:	e77b      	b.n	80088b4 <_dtoa_r+0x704>
 80089bc:	9b02      	ldr	r3, [sp, #8]
 80089be:	e779      	b.n	80088b4 <_dtoa_r+0x704>
 80089c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089c2:	e778      	b.n	80088b6 <_dtoa_r+0x706>
 80089c4:	2300      	movs	r3, #0
 80089c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089c8:	e779      	b.n	80088be <_dtoa_r+0x70e>
 80089ca:	d093      	beq.n	80088f4 <_dtoa_r+0x744>
 80089cc:	9b04      	ldr	r3, [sp, #16]
 80089ce:	321c      	adds	r2, #28
 80089d0:	4413      	add	r3, r2
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	4416      	add	r6, r2
 80089d8:	4413      	add	r3, r2
 80089da:	e78a      	b.n	80088f2 <_dtoa_r+0x742>
 80089dc:	4602      	mov	r2, r0
 80089de:	e7f5      	b.n	80089cc <_dtoa_r+0x81c>
 80089e0:	f1ba 0f00 	cmp.w	sl, #0
 80089e4:	f8cd 8014 	str.w	r8, [sp, #20]
 80089e8:	46d3      	mov	fp, sl
 80089ea:	dc21      	bgt.n	8008a30 <_dtoa_r+0x880>
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	dd1e      	ble.n	8008a30 <_dtoa_r+0x880>
 80089f2:	f1bb 0f00 	cmp.w	fp, #0
 80089f6:	f47f addc 	bne.w	80085b2 <_dtoa_r+0x402>
 80089fa:	4621      	mov	r1, r4
 80089fc:	465b      	mov	r3, fp
 80089fe:	2205      	movs	r2, #5
 8008a00:	4648      	mov	r0, r9
 8008a02:	f000 fa95 	bl	8008f30 <__multadd>
 8008a06:	4601      	mov	r1, r0
 8008a08:	4604      	mov	r4, r0
 8008a0a:	9801      	ldr	r0, [sp, #4]
 8008a0c:	f000 fca0 	bl	8009350 <__mcmp>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f77f adce 	ble.w	80085b2 <_dtoa_r+0x402>
 8008a16:	463e      	mov	r6, r7
 8008a18:	2331      	movs	r3, #49	@ 0x31
 8008a1a:	f806 3b01 	strb.w	r3, [r6], #1
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	3301      	adds	r3, #1
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	e5c9      	b.n	80085ba <_dtoa_r+0x40a>
 8008a26:	f8cd 8014 	str.w	r8, [sp, #20]
 8008a2a:	4654      	mov	r4, sl
 8008a2c:	4625      	mov	r5, r4
 8008a2e:	e7f2      	b.n	8008a16 <_dtoa_r+0x866>
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 8102 	beq.w	8008c3c <_dtoa_r+0xa8c>
 8008a38:	2e00      	cmp	r6, #0
 8008a3a:	dd05      	ble.n	8008a48 <_dtoa_r+0x898>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4632      	mov	r2, r6
 8008a40:	4648      	mov	r0, r9
 8008a42:	f000 fc19 	bl	8009278 <__lshift>
 8008a46:	4605      	mov	r5, r0
 8008a48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d058      	beq.n	8008b00 <_dtoa_r+0x950>
 8008a4e:	6869      	ldr	r1, [r5, #4]
 8008a50:	4648      	mov	r0, r9
 8008a52:	f000 fa0b 	bl	8008e6c <_Balloc>
 8008a56:	4606      	mov	r6, r0
 8008a58:	b928      	cbnz	r0, 8008a66 <_dtoa_r+0x8b6>
 8008a5a:	4b82      	ldr	r3, [pc, #520]	@ (8008c64 <_dtoa_r+0xab4>)
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a62:	f7ff bbbe 	b.w	80081e2 <_dtoa_r+0x32>
 8008a66:	692a      	ldr	r2, [r5, #16]
 8008a68:	3202      	adds	r2, #2
 8008a6a:	0092      	lsls	r2, r2, #2
 8008a6c:	f105 010c 	add.w	r1, r5, #12
 8008a70:	300c      	adds	r0, #12
 8008a72:	f000 ffa3 	bl	80099bc <memcpy>
 8008a76:	2201      	movs	r2, #1
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4648      	mov	r0, r9
 8008a7c:	f000 fbfc 	bl	8009278 <__lshift>
 8008a80:	1c7b      	adds	r3, r7, #1
 8008a82:	9304      	str	r3, [sp, #16]
 8008a84:	eb07 030b 	add.w	r3, r7, fp
 8008a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a8a:	9b02      	ldr	r3, [sp, #8]
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	46a8      	mov	r8, r5
 8008a92:	9308      	str	r3, [sp, #32]
 8008a94:	4605      	mov	r5, r0
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	9801      	ldr	r0, [sp, #4]
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008aa0:	f7ff fafb 	bl	800809a <quorem>
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	9002      	str	r0, [sp, #8]
 8008aa8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008aac:	9801      	ldr	r0, [sp, #4]
 8008aae:	f000 fc4f 	bl	8009350 <__mcmp>
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	9006      	str	r0, [sp, #24]
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4648      	mov	r0, r9
 8008aba:	f000 fc65 	bl	8009388 <__mdiff>
 8008abe:	68c2      	ldr	r2, [r0, #12]
 8008ac0:	4606      	mov	r6, r0
 8008ac2:	b9fa      	cbnz	r2, 8008b04 <_dtoa_r+0x954>
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	9801      	ldr	r0, [sp, #4]
 8008ac8:	f000 fc42 	bl	8009350 <__mcmp>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4648      	mov	r0, r9
 8008ad2:	920a      	str	r2, [sp, #40]	@ 0x28
 8008ad4:	f000 fa0a 	bl	8008eec <_Bfree>
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008adc:	9e04      	ldr	r6, [sp, #16]
 8008ade:	ea42 0103 	orr.w	r1, r2, r3
 8008ae2:	9b08      	ldr	r3, [sp, #32]
 8008ae4:	4319      	orrs	r1, r3
 8008ae6:	d10f      	bne.n	8008b08 <_dtoa_r+0x958>
 8008ae8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008aec:	d028      	beq.n	8008b40 <_dtoa_r+0x990>
 8008aee:	9b06      	ldr	r3, [sp, #24]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dd02      	ble.n	8008afa <_dtoa_r+0x94a>
 8008af4:	9b02      	ldr	r3, [sp, #8]
 8008af6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008afa:	f88b a000 	strb.w	sl, [fp]
 8008afe:	e55e      	b.n	80085be <_dtoa_r+0x40e>
 8008b00:	4628      	mov	r0, r5
 8008b02:	e7bd      	b.n	8008a80 <_dtoa_r+0x8d0>
 8008b04:	2201      	movs	r2, #1
 8008b06:	e7e2      	b.n	8008ace <_dtoa_r+0x91e>
 8008b08:	9b06      	ldr	r3, [sp, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	db04      	blt.n	8008b18 <_dtoa_r+0x968>
 8008b0e:	9907      	ldr	r1, [sp, #28]
 8008b10:	430b      	orrs	r3, r1
 8008b12:	9908      	ldr	r1, [sp, #32]
 8008b14:	430b      	orrs	r3, r1
 8008b16:	d120      	bne.n	8008b5a <_dtoa_r+0x9aa>
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	ddee      	ble.n	8008afa <_dtoa_r+0x94a>
 8008b1c:	9901      	ldr	r1, [sp, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	4648      	mov	r0, r9
 8008b22:	f000 fba9 	bl	8009278 <__lshift>
 8008b26:	4621      	mov	r1, r4
 8008b28:	9001      	str	r0, [sp, #4]
 8008b2a:	f000 fc11 	bl	8009350 <__mcmp>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	dc03      	bgt.n	8008b3a <_dtoa_r+0x98a>
 8008b32:	d1e2      	bne.n	8008afa <_dtoa_r+0x94a>
 8008b34:	f01a 0f01 	tst.w	sl, #1
 8008b38:	d0df      	beq.n	8008afa <_dtoa_r+0x94a>
 8008b3a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008b3e:	d1d9      	bne.n	8008af4 <_dtoa_r+0x944>
 8008b40:	2339      	movs	r3, #57	@ 0x39
 8008b42:	f88b 3000 	strb.w	r3, [fp]
 8008b46:	4633      	mov	r3, r6
 8008b48:	461e      	mov	r6, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b50:	2a39      	cmp	r2, #57	@ 0x39
 8008b52:	d052      	beq.n	8008bfa <_dtoa_r+0xa4a>
 8008b54:	3201      	adds	r2, #1
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e531      	b.n	80085be <_dtoa_r+0x40e>
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	dd07      	ble.n	8008b6e <_dtoa_r+0x9be>
 8008b5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008b62:	d0ed      	beq.n	8008b40 <_dtoa_r+0x990>
 8008b64:	f10a 0301 	add.w	r3, sl, #1
 8008b68:	f88b 3000 	strb.w	r3, [fp]
 8008b6c:	e527      	b.n	80085be <_dtoa_r+0x40e>
 8008b6e:	9b04      	ldr	r3, [sp, #16]
 8008b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b72:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d029      	beq.n	8008bce <_dtoa_r+0xa1e>
 8008b7a:	9901      	ldr	r1, [sp, #4]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	220a      	movs	r2, #10
 8008b80:	4648      	mov	r0, r9
 8008b82:	f000 f9d5 	bl	8008f30 <__multadd>
 8008b86:	45a8      	cmp	r8, r5
 8008b88:	9001      	str	r0, [sp, #4]
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	f04f 020a 	mov.w	r2, #10
 8008b92:	4641      	mov	r1, r8
 8008b94:	4648      	mov	r0, r9
 8008b96:	d107      	bne.n	8008ba8 <_dtoa_r+0x9f8>
 8008b98:	f000 f9ca 	bl	8008f30 <__multadd>
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	9b04      	ldr	r3, [sp, #16]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	9304      	str	r3, [sp, #16]
 8008ba6:	e776      	b.n	8008a96 <_dtoa_r+0x8e6>
 8008ba8:	f000 f9c2 	bl	8008f30 <__multadd>
 8008bac:	4629      	mov	r1, r5
 8008bae:	4680      	mov	r8, r0
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	4648      	mov	r0, r9
 8008bb6:	f000 f9bb 	bl	8008f30 <__multadd>
 8008bba:	4605      	mov	r5, r0
 8008bbc:	e7f0      	b.n	8008ba0 <_dtoa_r+0x9f0>
 8008bbe:	f1bb 0f00 	cmp.w	fp, #0
 8008bc2:	bfcc      	ite	gt
 8008bc4:	465e      	movgt	r6, fp
 8008bc6:	2601      	movle	r6, #1
 8008bc8:	443e      	add	r6, r7
 8008bca:	f04f 0800 	mov.w	r8, #0
 8008bce:	9901      	ldr	r1, [sp, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	4648      	mov	r0, r9
 8008bd4:	f000 fb50 	bl	8009278 <__lshift>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	9001      	str	r0, [sp, #4]
 8008bdc:	f000 fbb8 	bl	8009350 <__mcmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	dcb0      	bgt.n	8008b46 <_dtoa_r+0x996>
 8008be4:	d102      	bne.n	8008bec <_dtoa_r+0xa3c>
 8008be6:	f01a 0f01 	tst.w	sl, #1
 8008bea:	d1ac      	bne.n	8008b46 <_dtoa_r+0x996>
 8008bec:	4633      	mov	r3, r6
 8008bee:	461e      	mov	r6, r3
 8008bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bf4:	2a30      	cmp	r2, #48	@ 0x30
 8008bf6:	d0fa      	beq.n	8008bee <_dtoa_r+0xa3e>
 8008bf8:	e4e1      	b.n	80085be <_dtoa_r+0x40e>
 8008bfa:	429f      	cmp	r7, r3
 8008bfc:	d1a4      	bne.n	8008b48 <_dtoa_r+0x998>
 8008bfe:	9b05      	ldr	r3, [sp, #20]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9305      	str	r3, [sp, #20]
 8008c04:	2331      	movs	r3, #49	@ 0x31
 8008c06:	703b      	strb	r3, [r7, #0]
 8008c08:	e4d9      	b.n	80085be <_dtoa_r+0x40e>
 8008c0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c0c:	4f16      	ldr	r7, [pc, #88]	@ (8008c68 <_dtoa_r+0xab8>)
 8008c0e:	b11b      	cbz	r3, 8008c18 <_dtoa_r+0xa68>
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	4638      	mov	r0, r7
 8008c1a:	b011      	add	sp, #68	@ 0x44
 8008c1c:	ecbd 8b02 	vpop	{d8}
 8008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c24:	9b07      	ldr	r3, [sp, #28]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	f77f ae2c 	ble.w	8008884 <_dtoa_r+0x6d4>
 8008c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c30:	2001      	movs	r0, #1
 8008c32:	e64c      	b.n	80088ce <_dtoa_r+0x71e>
 8008c34:	f1bb 0f00 	cmp.w	fp, #0
 8008c38:	f77f aed8 	ble.w	80089ec <_dtoa_r+0x83c>
 8008c3c:	463e      	mov	r6, r7
 8008c3e:	9801      	ldr	r0, [sp, #4]
 8008c40:	4621      	mov	r1, r4
 8008c42:	f7ff fa2a 	bl	800809a <quorem>
 8008c46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008c4a:	f806 ab01 	strb.w	sl, [r6], #1
 8008c4e:	1bf2      	subs	r2, r6, r7
 8008c50:	4593      	cmp	fp, r2
 8008c52:	ddb4      	ble.n	8008bbe <_dtoa_r+0xa0e>
 8008c54:	9901      	ldr	r1, [sp, #4]
 8008c56:	2300      	movs	r3, #0
 8008c58:	220a      	movs	r2, #10
 8008c5a:	4648      	mov	r0, r9
 8008c5c:	f000 f968 	bl	8008f30 <__multadd>
 8008c60:	9001      	str	r0, [sp, #4]
 8008c62:	e7ec      	b.n	8008c3e <_dtoa_r+0xa8e>
 8008c64:	0800a264 	.word	0x0800a264
 8008c68:	0800a1e8 	.word	0x0800a1e8

08008c6c <_free_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4605      	mov	r5, r0
 8008c70:	2900      	cmp	r1, #0
 8008c72:	d041      	beq.n	8008cf8 <_free_r+0x8c>
 8008c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c78:	1f0c      	subs	r4, r1, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	bfb8      	it	lt
 8008c7e:	18e4      	addlt	r4, r4, r3
 8008c80:	f000 f8e8 	bl	8008e54 <__malloc_lock>
 8008c84:	4a1d      	ldr	r2, [pc, #116]	@ (8008cfc <_free_r+0x90>)
 8008c86:	6813      	ldr	r3, [r2, #0]
 8008c88:	b933      	cbnz	r3, 8008c98 <_free_r+0x2c>
 8008c8a:	6063      	str	r3, [r4, #4]
 8008c8c:	6014      	str	r4, [r2, #0]
 8008c8e:	4628      	mov	r0, r5
 8008c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c94:	f000 b8e4 	b.w	8008e60 <__malloc_unlock>
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	d908      	bls.n	8008cae <_free_r+0x42>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	1821      	adds	r1, r4, r0
 8008ca0:	428b      	cmp	r3, r1
 8008ca2:	bf01      	itttt	eq
 8008ca4:	6819      	ldreq	r1, [r3, #0]
 8008ca6:	685b      	ldreq	r3, [r3, #4]
 8008ca8:	1809      	addeq	r1, r1, r0
 8008caa:	6021      	streq	r1, [r4, #0]
 8008cac:	e7ed      	b.n	8008c8a <_free_r+0x1e>
 8008cae:	461a      	mov	r2, r3
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	b10b      	cbz	r3, 8008cb8 <_free_r+0x4c>
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	d9fa      	bls.n	8008cae <_free_r+0x42>
 8008cb8:	6811      	ldr	r1, [r2, #0]
 8008cba:	1850      	adds	r0, r2, r1
 8008cbc:	42a0      	cmp	r0, r4
 8008cbe:	d10b      	bne.n	8008cd8 <_free_r+0x6c>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	4401      	add	r1, r0
 8008cc4:	1850      	adds	r0, r2, r1
 8008cc6:	4283      	cmp	r3, r0
 8008cc8:	6011      	str	r1, [r2, #0]
 8008cca:	d1e0      	bne.n	8008c8e <_free_r+0x22>
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	6053      	str	r3, [r2, #4]
 8008cd2:	4408      	add	r0, r1
 8008cd4:	6010      	str	r0, [r2, #0]
 8008cd6:	e7da      	b.n	8008c8e <_free_r+0x22>
 8008cd8:	d902      	bls.n	8008ce0 <_free_r+0x74>
 8008cda:	230c      	movs	r3, #12
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	e7d6      	b.n	8008c8e <_free_r+0x22>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	1821      	adds	r1, r4, r0
 8008ce4:	428b      	cmp	r3, r1
 8008ce6:	bf04      	itt	eq
 8008ce8:	6819      	ldreq	r1, [r3, #0]
 8008cea:	685b      	ldreq	r3, [r3, #4]
 8008cec:	6063      	str	r3, [r4, #4]
 8008cee:	bf04      	itt	eq
 8008cf0:	1809      	addeq	r1, r1, r0
 8008cf2:	6021      	streq	r1, [r4, #0]
 8008cf4:	6054      	str	r4, [r2, #4]
 8008cf6:	e7ca      	b.n	8008c8e <_free_r+0x22>
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop
 8008cfc:	24000504 	.word	0x24000504

08008d00 <malloc>:
 8008d00:	4b02      	ldr	r3, [pc, #8]	@ (8008d0c <malloc+0xc>)
 8008d02:	4601      	mov	r1, r0
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f000 b825 	b.w	8008d54 <_malloc_r>
 8008d0a:	bf00      	nop
 8008d0c:	24000038 	.word	0x24000038

08008d10 <sbrk_aligned>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4e0f      	ldr	r6, [pc, #60]	@ (8008d50 <sbrk_aligned+0x40>)
 8008d14:	460c      	mov	r4, r1
 8008d16:	6831      	ldr	r1, [r6, #0]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	b911      	cbnz	r1, 8008d22 <sbrk_aligned+0x12>
 8008d1c:	f000 fe3e 	bl	800999c <_sbrk_r>
 8008d20:	6030      	str	r0, [r6, #0]
 8008d22:	4621      	mov	r1, r4
 8008d24:	4628      	mov	r0, r5
 8008d26:	f000 fe39 	bl	800999c <_sbrk_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d103      	bne.n	8008d36 <sbrk_aligned+0x26>
 8008d2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008d32:	4620      	mov	r0, r4
 8008d34:	bd70      	pop	{r4, r5, r6, pc}
 8008d36:	1cc4      	adds	r4, r0, #3
 8008d38:	f024 0403 	bic.w	r4, r4, #3
 8008d3c:	42a0      	cmp	r0, r4
 8008d3e:	d0f8      	beq.n	8008d32 <sbrk_aligned+0x22>
 8008d40:	1a21      	subs	r1, r4, r0
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 fe2a 	bl	800999c <_sbrk_r>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d1f2      	bne.n	8008d32 <sbrk_aligned+0x22>
 8008d4c:	e7ef      	b.n	8008d2e <sbrk_aligned+0x1e>
 8008d4e:	bf00      	nop
 8008d50:	24000500 	.word	0x24000500

08008d54 <_malloc_r>:
 8008d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d58:	1ccd      	adds	r5, r1, #3
 8008d5a:	f025 0503 	bic.w	r5, r5, #3
 8008d5e:	3508      	adds	r5, #8
 8008d60:	2d0c      	cmp	r5, #12
 8008d62:	bf38      	it	cc
 8008d64:	250c      	movcc	r5, #12
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	4606      	mov	r6, r0
 8008d6a:	db01      	blt.n	8008d70 <_malloc_r+0x1c>
 8008d6c:	42a9      	cmp	r1, r5
 8008d6e:	d904      	bls.n	8008d7a <_malloc_r+0x26>
 8008d70:	230c      	movs	r3, #12
 8008d72:	6033      	str	r3, [r6, #0]
 8008d74:	2000      	movs	r0, #0
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e50 <_malloc_r+0xfc>
 8008d7e:	f000 f869 	bl	8008e54 <__malloc_lock>
 8008d82:	f8d8 3000 	ldr.w	r3, [r8]
 8008d86:	461c      	mov	r4, r3
 8008d88:	bb44      	cbnz	r4, 8008ddc <_malloc_r+0x88>
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff ffbf 	bl	8008d10 <sbrk_aligned>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	4604      	mov	r4, r0
 8008d96:	d158      	bne.n	8008e4a <_malloc_r+0xf6>
 8008d98:	f8d8 4000 	ldr.w	r4, [r8]
 8008d9c:	4627      	mov	r7, r4
 8008d9e:	2f00      	cmp	r7, #0
 8008da0:	d143      	bne.n	8008e2a <_malloc_r+0xd6>
 8008da2:	2c00      	cmp	r4, #0
 8008da4:	d04b      	beq.n	8008e3e <_malloc_r+0xea>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	4639      	mov	r1, r7
 8008daa:	4630      	mov	r0, r6
 8008dac:	eb04 0903 	add.w	r9, r4, r3
 8008db0:	f000 fdf4 	bl	800999c <_sbrk_r>
 8008db4:	4581      	cmp	r9, r0
 8008db6:	d142      	bne.n	8008e3e <_malloc_r+0xea>
 8008db8:	6821      	ldr	r1, [r4, #0]
 8008dba:	1a6d      	subs	r5, r5, r1
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff ffa6 	bl	8008d10 <sbrk_aligned>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d03a      	beq.n	8008e3e <_malloc_r+0xea>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	442b      	add	r3, r5
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	bb62      	cbnz	r2, 8008e30 <_malloc_r+0xdc>
 8008dd6:	f8c8 7000 	str.w	r7, [r8]
 8008dda:	e00f      	b.n	8008dfc <_malloc_r+0xa8>
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	1b52      	subs	r2, r2, r5
 8008de0:	d420      	bmi.n	8008e24 <_malloc_r+0xd0>
 8008de2:	2a0b      	cmp	r2, #11
 8008de4:	d917      	bls.n	8008e16 <_malloc_r+0xc2>
 8008de6:	1961      	adds	r1, r4, r5
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	6025      	str	r5, [r4, #0]
 8008dec:	bf18      	it	ne
 8008dee:	6059      	strne	r1, [r3, #4]
 8008df0:	6863      	ldr	r3, [r4, #4]
 8008df2:	bf08      	it	eq
 8008df4:	f8c8 1000 	streq.w	r1, [r8]
 8008df8:	5162      	str	r2, [r4, r5]
 8008dfa:	604b      	str	r3, [r1, #4]
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f000 f82f 	bl	8008e60 <__malloc_unlock>
 8008e02:	f104 000b 	add.w	r0, r4, #11
 8008e06:	1d23      	adds	r3, r4, #4
 8008e08:	f020 0007 	bic.w	r0, r0, #7
 8008e0c:	1ac2      	subs	r2, r0, r3
 8008e0e:	bf1c      	itt	ne
 8008e10:	1a1b      	subne	r3, r3, r0
 8008e12:	50a3      	strne	r3, [r4, r2]
 8008e14:	e7af      	b.n	8008d76 <_malloc_r+0x22>
 8008e16:	6862      	ldr	r2, [r4, #4]
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	bf0c      	ite	eq
 8008e1c:	f8c8 2000 	streq.w	r2, [r8]
 8008e20:	605a      	strne	r2, [r3, #4]
 8008e22:	e7eb      	b.n	8008dfc <_malloc_r+0xa8>
 8008e24:	4623      	mov	r3, r4
 8008e26:	6864      	ldr	r4, [r4, #4]
 8008e28:	e7ae      	b.n	8008d88 <_malloc_r+0x34>
 8008e2a:	463c      	mov	r4, r7
 8008e2c:	687f      	ldr	r7, [r7, #4]
 8008e2e:	e7b6      	b.n	8008d9e <_malloc_r+0x4a>
 8008e30:	461a      	mov	r2, r3
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	d1fb      	bne.n	8008e30 <_malloc_r+0xdc>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	6053      	str	r3, [r2, #4]
 8008e3c:	e7de      	b.n	8008dfc <_malloc_r+0xa8>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	6033      	str	r3, [r6, #0]
 8008e42:	4630      	mov	r0, r6
 8008e44:	f000 f80c 	bl	8008e60 <__malloc_unlock>
 8008e48:	e794      	b.n	8008d74 <_malloc_r+0x20>
 8008e4a:	6005      	str	r5, [r0, #0]
 8008e4c:	e7d6      	b.n	8008dfc <_malloc_r+0xa8>
 8008e4e:	bf00      	nop
 8008e50:	24000504 	.word	0x24000504

08008e54 <__malloc_lock>:
 8008e54:	4801      	ldr	r0, [pc, #4]	@ (8008e5c <__malloc_lock+0x8>)
 8008e56:	f7ff b91e 	b.w	8008096 <__retarget_lock_acquire_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	240004fc 	.word	0x240004fc

08008e60 <__malloc_unlock>:
 8008e60:	4801      	ldr	r0, [pc, #4]	@ (8008e68 <__malloc_unlock+0x8>)
 8008e62:	f7ff b919 	b.w	8008098 <__retarget_lock_release_recursive>
 8008e66:	bf00      	nop
 8008e68:	240004fc 	.word	0x240004fc

08008e6c <_Balloc>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	69c6      	ldr	r6, [r0, #28]
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	b976      	cbnz	r6, 8008e94 <_Balloc+0x28>
 8008e76:	2010      	movs	r0, #16
 8008e78:	f7ff ff42 	bl	8008d00 <malloc>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	61e0      	str	r0, [r4, #28]
 8008e80:	b920      	cbnz	r0, 8008e8c <_Balloc+0x20>
 8008e82:	4b18      	ldr	r3, [pc, #96]	@ (8008ee4 <_Balloc+0x78>)
 8008e84:	4818      	ldr	r0, [pc, #96]	@ (8008ee8 <_Balloc+0x7c>)
 8008e86:	216b      	movs	r1, #107	@ 0x6b
 8008e88:	f000 fda6 	bl	80099d8 <__assert_func>
 8008e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e90:	6006      	str	r6, [r0, #0]
 8008e92:	60c6      	str	r6, [r0, #12]
 8008e94:	69e6      	ldr	r6, [r4, #28]
 8008e96:	68f3      	ldr	r3, [r6, #12]
 8008e98:	b183      	cbz	r3, 8008ebc <_Balloc+0x50>
 8008e9a:	69e3      	ldr	r3, [r4, #28]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ea2:	b9b8      	cbnz	r0, 8008ed4 <_Balloc+0x68>
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	fa01 f605 	lsl.w	r6, r1, r5
 8008eaa:	1d72      	adds	r2, r6, #5
 8008eac:	0092      	lsls	r2, r2, #2
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 fdb0 	bl	8009a14 <_calloc_r>
 8008eb4:	b160      	cbz	r0, 8008ed0 <_Balloc+0x64>
 8008eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008eba:	e00e      	b.n	8008eda <_Balloc+0x6e>
 8008ebc:	2221      	movs	r2, #33	@ 0x21
 8008ebe:	2104      	movs	r1, #4
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fda7 	bl	8009a14 <_calloc_r>
 8008ec6:	69e3      	ldr	r3, [r4, #28]
 8008ec8:	60f0      	str	r0, [r6, #12]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e4      	bne.n	8008e9a <_Balloc+0x2e>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	6802      	ldr	r2, [r0, #0]
 8008ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eda:	2300      	movs	r3, #0
 8008edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ee0:	e7f7      	b.n	8008ed2 <_Balloc+0x66>
 8008ee2:	bf00      	nop
 8008ee4:	0800a1f5 	.word	0x0800a1f5
 8008ee8:	0800a275 	.word	0x0800a275

08008eec <_Bfree>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	69c6      	ldr	r6, [r0, #28]
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	b976      	cbnz	r6, 8008f14 <_Bfree+0x28>
 8008ef6:	2010      	movs	r0, #16
 8008ef8:	f7ff ff02 	bl	8008d00 <malloc>
 8008efc:	4602      	mov	r2, r0
 8008efe:	61e8      	str	r0, [r5, #28]
 8008f00:	b920      	cbnz	r0, 8008f0c <_Bfree+0x20>
 8008f02:	4b09      	ldr	r3, [pc, #36]	@ (8008f28 <_Bfree+0x3c>)
 8008f04:	4809      	ldr	r0, [pc, #36]	@ (8008f2c <_Bfree+0x40>)
 8008f06:	218f      	movs	r1, #143	@ 0x8f
 8008f08:	f000 fd66 	bl	80099d8 <__assert_func>
 8008f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f10:	6006      	str	r6, [r0, #0]
 8008f12:	60c6      	str	r6, [r0, #12]
 8008f14:	b13c      	cbz	r4, 8008f26 <_Bfree+0x3a>
 8008f16:	69eb      	ldr	r3, [r5, #28]
 8008f18:	6862      	ldr	r2, [r4, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f20:	6021      	str	r1, [r4, #0]
 8008f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	0800a1f5 	.word	0x0800a1f5
 8008f2c:	0800a275 	.word	0x0800a275

08008f30 <__multadd>:
 8008f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f34:	690d      	ldr	r5, [r1, #16]
 8008f36:	4607      	mov	r7, r0
 8008f38:	460c      	mov	r4, r1
 8008f3a:	461e      	mov	r6, r3
 8008f3c:	f101 0c14 	add.w	ip, r1, #20
 8008f40:	2000      	movs	r0, #0
 8008f42:	f8dc 3000 	ldr.w	r3, [ip]
 8008f46:	b299      	uxth	r1, r3
 8008f48:	fb02 6101 	mla	r1, r2, r1, r6
 8008f4c:	0c1e      	lsrs	r6, r3, #16
 8008f4e:	0c0b      	lsrs	r3, r1, #16
 8008f50:	fb02 3306 	mla	r3, r2, r6, r3
 8008f54:	b289      	uxth	r1, r1
 8008f56:	3001      	adds	r0, #1
 8008f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f5c:	4285      	cmp	r5, r0
 8008f5e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f66:	dcec      	bgt.n	8008f42 <__multadd+0x12>
 8008f68:	b30e      	cbz	r6, 8008fae <__multadd+0x7e>
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	42ab      	cmp	r3, r5
 8008f6e:	dc19      	bgt.n	8008fa4 <__multadd+0x74>
 8008f70:	6861      	ldr	r1, [r4, #4]
 8008f72:	4638      	mov	r0, r7
 8008f74:	3101      	adds	r1, #1
 8008f76:	f7ff ff79 	bl	8008e6c <_Balloc>
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	b928      	cbnz	r0, 8008f8a <__multadd+0x5a>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb4 <__multadd+0x84>)
 8008f82:	480d      	ldr	r0, [pc, #52]	@ (8008fb8 <__multadd+0x88>)
 8008f84:	21ba      	movs	r1, #186	@ 0xba
 8008f86:	f000 fd27 	bl	80099d8 <__assert_func>
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	3202      	adds	r2, #2
 8008f8e:	f104 010c 	add.w	r1, r4, #12
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	300c      	adds	r0, #12
 8008f96:	f000 fd11 	bl	80099bc <memcpy>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f7ff ffa5 	bl	8008eec <_Bfree>
 8008fa2:	4644      	mov	r4, r8
 8008fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fa8:	3501      	adds	r5, #1
 8008faa:	615e      	str	r6, [r3, #20]
 8008fac:	6125      	str	r5, [r4, #16]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb4:	0800a264 	.word	0x0800a264
 8008fb8:	0800a275 	.word	0x0800a275

08008fbc <__hi0bits>:
 8008fbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	bf36      	itet	cc
 8008fc4:	0403      	lslcc	r3, r0, #16
 8008fc6:	2000      	movcs	r0, #0
 8008fc8:	2010      	movcc	r0, #16
 8008fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fce:	bf3c      	itt	cc
 8008fd0:	021b      	lslcc	r3, r3, #8
 8008fd2:	3008      	addcc	r0, #8
 8008fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fd8:	bf3c      	itt	cc
 8008fda:	011b      	lslcc	r3, r3, #4
 8008fdc:	3004      	addcc	r0, #4
 8008fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fe2:	bf3c      	itt	cc
 8008fe4:	009b      	lslcc	r3, r3, #2
 8008fe6:	3002      	addcc	r0, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	db05      	blt.n	8008ff8 <__hi0bits+0x3c>
 8008fec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ff0:	f100 0001 	add.w	r0, r0, #1
 8008ff4:	bf08      	it	eq
 8008ff6:	2020      	moveq	r0, #32
 8008ff8:	4770      	bx	lr

08008ffa <__lo0bits>:
 8008ffa:	6803      	ldr	r3, [r0, #0]
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	f013 0007 	ands.w	r0, r3, #7
 8009002:	d00b      	beq.n	800901c <__lo0bits+0x22>
 8009004:	07d9      	lsls	r1, r3, #31
 8009006:	d421      	bmi.n	800904c <__lo0bits+0x52>
 8009008:	0798      	lsls	r0, r3, #30
 800900a:	bf49      	itett	mi
 800900c:	085b      	lsrmi	r3, r3, #1
 800900e:	089b      	lsrpl	r3, r3, #2
 8009010:	2001      	movmi	r0, #1
 8009012:	6013      	strmi	r3, [r2, #0]
 8009014:	bf5c      	itt	pl
 8009016:	6013      	strpl	r3, [r2, #0]
 8009018:	2002      	movpl	r0, #2
 800901a:	4770      	bx	lr
 800901c:	b299      	uxth	r1, r3
 800901e:	b909      	cbnz	r1, 8009024 <__lo0bits+0x2a>
 8009020:	0c1b      	lsrs	r3, r3, #16
 8009022:	2010      	movs	r0, #16
 8009024:	b2d9      	uxtb	r1, r3
 8009026:	b909      	cbnz	r1, 800902c <__lo0bits+0x32>
 8009028:	3008      	adds	r0, #8
 800902a:	0a1b      	lsrs	r3, r3, #8
 800902c:	0719      	lsls	r1, r3, #28
 800902e:	bf04      	itt	eq
 8009030:	091b      	lsreq	r3, r3, #4
 8009032:	3004      	addeq	r0, #4
 8009034:	0799      	lsls	r1, r3, #30
 8009036:	bf04      	itt	eq
 8009038:	089b      	lsreq	r3, r3, #2
 800903a:	3002      	addeq	r0, #2
 800903c:	07d9      	lsls	r1, r3, #31
 800903e:	d403      	bmi.n	8009048 <__lo0bits+0x4e>
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	f100 0001 	add.w	r0, r0, #1
 8009046:	d003      	beq.n	8009050 <__lo0bits+0x56>
 8009048:	6013      	str	r3, [r2, #0]
 800904a:	4770      	bx	lr
 800904c:	2000      	movs	r0, #0
 800904e:	4770      	bx	lr
 8009050:	2020      	movs	r0, #32
 8009052:	4770      	bx	lr

08009054 <__i2b>:
 8009054:	b510      	push	{r4, lr}
 8009056:	460c      	mov	r4, r1
 8009058:	2101      	movs	r1, #1
 800905a:	f7ff ff07 	bl	8008e6c <_Balloc>
 800905e:	4602      	mov	r2, r0
 8009060:	b928      	cbnz	r0, 800906e <__i2b+0x1a>
 8009062:	4b05      	ldr	r3, [pc, #20]	@ (8009078 <__i2b+0x24>)
 8009064:	4805      	ldr	r0, [pc, #20]	@ (800907c <__i2b+0x28>)
 8009066:	f240 1145 	movw	r1, #325	@ 0x145
 800906a:	f000 fcb5 	bl	80099d8 <__assert_func>
 800906e:	2301      	movs	r3, #1
 8009070:	6144      	str	r4, [r0, #20]
 8009072:	6103      	str	r3, [r0, #16]
 8009074:	bd10      	pop	{r4, pc}
 8009076:	bf00      	nop
 8009078:	0800a264 	.word	0x0800a264
 800907c:	0800a275 	.word	0x0800a275

08009080 <__multiply>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	4617      	mov	r7, r2
 8009086:	690a      	ldr	r2, [r1, #16]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	429a      	cmp	r2, r3
 800908c:	bfa8      	it	ge
 800908e:	463b      	movge	r3, r7
 8009090:	4689      	mov	r9, r1
 8009092:	bfa4      	itt	ge
 8009094:	460f      	movge	r7, r1
 8009096:	4699      	movge	r9, r3
 8009098:	693d      	ldr	r5, [r7, #16]
 800909a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	eb05 060a 	add.w	r6, r5, sl
 80090a6:	42b3      	cmp	r3, r6
 80090a8:	b085      	sub	sp, #20
 80090aa:	bfb8      	it	lt
 80090ac:	3101      	addlt	r1, #1
 80090ae:	f7ff fedd 	bl	8008e6c <_Balloc>
 80090b2:	b930      	cbnz	r0, 80090c2 <__multiply+0x42>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b41      	ldr	r3, [pc, #260]	@ (80091bc <__multiply+0x13c>)
 80090b8:	4841      	ldr	r0, [pc, #260]	@ (80091c0 <__multiply+0x140>)
 80090ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090be:	f000 fc8b 	bl	80099d8 <__assert_func>
 80090c2:	f100 0414 	add.w	r4, r0, #20
 80090c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80090ca:	4623      	mov	r3, r4
 80090cc:	2200      	movs	r2, #0
 80090ce:	4573      	cmp	r3, lr
 80090d0:	d320      	bcc.n	8009114 <__multiply+0x94>
 80090d2:	f107 0814 	add.w	r8, r7, #20
 80090d6:	f109 0114 	add.w	r1, r9, #20
 80090da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80090de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80090e2:	9302      	str	r3, [sp, #8]
 80090e4:	1beb      	subs	r3, r5, r7
 80090e6:	3b15      	subs	r3, #21
 80090e8:	f023 0303 	bic.w	r3, r3, #3
 80090ec:	3304      	adds	r3, #4
 80090ee:	3715      	adds	r7, #21
 80090f0:	42bd      	cmp	r5, r7
 80090f2:	bf38      	it	cc
 80090f4:	2304      	movcc	r3, #4
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	9b02      	ldr	r3, [sp, #8]
 80090fa:	9103      	str	r1, [sp, #12]
 80090fc:	428b      	cmp	r3, r1
 80090fe:	d80c      	bhi.n	800911a <__multiply+0x9a>
 8009100:	2e00      	cmp	r6, #0
 8009102:	dd03      	ble.n	800910c <__multiply+0x8c>
 8009104:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009108:	2b00      	cmp	r3, #0
 800910a:	d055      	beq.n	80091b8 <__multiply+0x138>
 800910c:	6106      	str	r6, [r0, #16]
 800910e:	b005      	add	sp, #20
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	f843 2b04 	str.w	r2, [r3], #4
 8009118:	e7d9      	b.n	80090ce <__multiply+0x4e>
 800911a:	f8b1 a000 	ldrh.w	sl, [r1]
 800911e:	f1ba 0f00 	cmp.w	sl, #0
 8009122:	d01f      	beq.n	8009164 <__multiply+0xe4>
 8009124:	46c4      	mov	ip, r8
 8009126:	46a1      	mov	r9, r4
 8009128:	2700      	movs	r7, #0
 800912a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800912e:	f8d9 3000 	ldr.w	r3, [r9]
 8009132:	fa1f fb82 	uxth.w	fp, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	fb0a 330b 	mla	r3, sl, fp, r3
 800913c:	443b      	add	r3, r7
 800913e:	f8d9 7000 	ldr.w	r7, [r9]
 8009142:	0c12      	lsrs	r2, r2, #16
 8009144:	0c3f      	lsrs	r7, r7, #16
 8009146:	fb0a 7202 	mla	r2, sl, r2, r7
 800914a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800914e:	b29b      	uxth	r3, r3
 8009150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009154:	4565      	cmp	r5, ip
 8009156:	f849 3b04 	str.w	r3, [r9], #4
 800915a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800915e:	d8e4      	bhi.n	800912a <__multiply+0xaa>
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	50e7      	str	r7, [r4, r3]
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800916a:	3104      	adds	r1, #4
 800916c:	f1b9 0f00 	cmp.w	r9, #0
 8009170:	d020      	beq.n	80091b4 <__multiply+0x134>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	4647      	mov	r7, r8
 8009176:	46a4      	mov	ip, r4
 8009178:	f04f 0a00 	mov.w	sl, #0
 800917c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009180:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009184:	fb09 220b 	mla	r2, r9, fp, r2
 8009188:	4452      	add	r2, sl
 800918a:	b29b      	uxth	r3, r3
 800918c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009190:	f84c 3b04 	str.w	r3, [ip], #4
 8009194:	f857 3b04 	ldr.w	r3, [r7], #4
 8009198:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800919c:	f8bc 3000 	ldrh.w	r3, [ip]
 80091a0:	fb09 330a 	mla	r3, r9, sl, r3
 80091a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80091a8:	42bd      	cmp	r5, r7
 80091aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091ae:	d8e5      	bhi.n	800917c <__multiply+0xfc>
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	50a3      	str	r3, [r4, r2]
 80091b4:	3404      	adds	r4, #4
 80091b6:	e79f      	b.n	80090f8 <__multiply+0x78>
 80091b8:	3e01      	subs	r6, #1
 80091ba:	e7a1      	b.n	8009100 <__multiply+0x80>
 80091bc:	0800a264 	.word	0x0800a264
 80091c0:	0800a275 	.word	0x0800a275

080091c4 <__pow5mult>:
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	4615      	mov	r5, r2
 80091ca:	f012 0203 	ands.w	r2, r2, #3
 80091ce:	4607      	mov	r7, r0
 80091d0:	460e      	mov	r6, r1
 80091d2:	d007      	beq.n	80091e4 <__pow5mult+0x20>
 80091d4:	4c25      	ldr	r4, [pc, #148]	@ (800926c <__pow5mult+0xa8>)
 80091d6:	3a01      	subs	r2, #1
 80091d8:	2300      	movs	r3, #0
 80091da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091de:	f7ff fea7 	bl	8008f30 <__multadd>
 80091e2:	4606      	mov	r6, r0
 80091e4:	10ad      	asrs	r5, r5, #2
 80091e6:	d03d      	beq.n	8009264 <__pow5mult+0xa0>
 80091e8:	69fc      	ldr	r4, [r7, #28]
 80091ea:	b97c      	cbnz	r4, 800920c <__pow5mult+0x48>
 80091ec:	2010      	movs	r0, #16
 80091ee:	f7ff fd87 	bl	8008d00 <malloc>
 80091f2:	4602      	mov	r2, r0
 80091f4:	61f8      	str	r0, [r7, #28]
 80091f6:	b928      	cbnz	r0, 8009204 <__pow5mult+0x40>
 80091f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009270 <__pow5mult+0xac>)
 80091fa:	481e      	ldr	r0, [pc, #120]	@ (8009274 <__pow5mult+0xb0>)
 80091fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009200:	f000 fbea 	bl	80099d8 <__assert_func>
 8009204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009208:	6004      	str	r4, [r0, #0]
 800920a:	60c4      	str	r4, [r0, #12]
 800920c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009214:	b94c      	cbnz	r4, 800922a <__pow5mult+0x66>
 8009216:	f240 2171 	movw	r1, #625	@ 0x271
 800921a:	4638      	mov	r0, r7
 800921c:	f7ff ff1a 	bl	8009054 <__i2b>
 8009220:	2300      	movs	r3, #0
 8009222:	f8c8 0008 	str.w	r0, [r8, #8]
 8009226:	4604      	mov	r4, r0
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	f04f 0900 	mov.w	r9, #0
 800922e:	07eb      	lsls	r3, r5, #31
 8009230:	d50a      	bpl.n	8009248 <__pow5mult+0x84>
 8009232:	4631      	mov	r1, r6
 8009234:	4622      	mov	r2, r4
 8009236:	4638      	mov	r0, r7
 8009238:	f7ff ff22 	bl	8009080 <__multiply>
 800923c:	4631      	mov	r1, r6
 800923e:	4680      	mov	r8, r0
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff fe53 	bl	8008eec <_Bfree>
 8009246:	4646      	mov	r6, r8
 8009248:	106d      	asrs	r5, r5, #1
 800924a:	d00b      	beq.n	8009264 <__pow5mult+0xa0>
 800924c:	6820      	ldr	r0, [r4, #0]
 800924e:	b938      	cbnz	r0, 8009260 <__pow5mult+0x9c>
 8009250:	4622      	mov	r2, r4
 8009252:	4621      	mov	r1, r4
 8009254:	4638      	mov	r0, r7
 8009256:	f7ff ff13 	bl	8009080 <__multiply>
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	f8c0 9000 	str.w	r9, [r0]
 8009260:	4604      	mov	r4, r0
 8009262:	e7e4      	b.n	800922e <__pow5mult+0x6a>
 8009264:	4630      	mov	r0, r6
 8009266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926a:	bf00      	nop
 800926c:	0800a328 	.word	0x0800a328
 8009270:	0800a1f5 	.word	0x0800a1f5
 8009274:	0800a275 	.word	0x0800a275

08009278 <__lshift>:
 8009278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	6849      	ldr	r1, [r1, #4]
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009286:	68a3      	ldr	r3, [r4, #8]
 8009288:	4607      	mov	r7, r0
 800928a:	4691      	mov	r9, r2
 800928c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009290:	f108 0601 	add.w	r6, r8, #1
 8009294:	42b3      	cmp	r3, r6
 8009296:	db0b      	blt.n	80092b0 <__lshift+0x38>
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff fde7 	bl	8008e6c <_Balloc>
 800929e:	4605      	mov	r5, r0
 80092a0:	b948      	cbnz	r0, 80092b6 <__lshift+0x3e>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4b28      	ldr	r3, [pc, #160]	@ (8009348 <__lshift+0xd0>)
 80092a6:	4829      	ldr	r0, [pc, #164]	@ (800934c <__lshift+0xd4>)
 80092a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092ac:	f000 fb94 	bl	80099d8 <__assert_func>
 80092b0:	3101      	adds	r1, #1
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	e7ee      	b.n	8009294 <__lshift+0x1c>
 80092b6:	2300      	movs	r3, #0
 80092b8:	f100 0114 	add.w	r1, r0, #20
 80092bc:	f100 0210 	add.w	r2, r0, #16
 80092c0:	4618      	mov	r0, r3
 80092c2:	4553      	cmp	r3, sl
 80092c4:	db33      	blt.n	800932e <__lshift+0xb6>
 80092c6:	6920      	ldr	r0, [r4, #16]
 80092c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092cc:	f104 0314 	add.w	r3, r4, #20
 80092d0:	f019 091f 	ands.w	r9, r9, #31
 80092d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092dc:	d02b      	beq.n	8009336 <__lshift+0xbe>
 80092de:	f1c9 0e20 	rsb	lr, r9, #32
 80092e2:	468a      	mov	sl, r1
 80092e4:	2200      	movs	r2, #0
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	fa00 f009 	lsl.w	r0, r0, r9
 80092ec:	4310      	orrs	r0, r2
 80092ee:	f84a 0b04 	str.w	r0, [sl], #4
 80092f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f6:	459c      	cmp	ip, r3
 80092f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092fc:	d8f3      	bhi.n	80092e6 <__lshift+0x6e>
 80092fe:	ebac 0304 	sub.w	r3, ip, r4
 8009302:	3b15      	subs	r3, #21
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	3304      	adds	r3, #4
 800930a:	f104 0015 	add.w	r0, r4, #21
 800930e:	4560      	cmp	r0, ip
 8009310:	bf88      	it	hi
 8009312:	2304      	movhi	r3, #4
 8009314:	50ca      	str	r2, [r1, r3]
 8009316:	b10a      	cbz	r2, 800931c <__lshift+0xa4>
 8009318:	f108 0602 	add.w	r6, r8, #2
 800931c:	3e01      	subs	r6, #1
 800931e:	4638      	mov	r0, r7
 8009320:	612e      	str	r6, [r5, #16]
 8009322:	4621      	mov	r1, r4
 8009324:	f7ff fde2 	bl	8008eec <_Bfree>
 8009328:	4628      	mov	r0, r5
 800932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009332:	3301      	adds	r3, #1
 8009334:	e7c5      	b.n	80092c2 <__lshift+0x4a>
 8009336:	3904      	subs	r1, #4
 8009338:	f853 2b04 	ldr.w	r2, [r3], #4
 800933c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009340:	459c      	cmp	ip, r3
 8009342:	d8f9      	bhi.n	8009338 <__lshift+0xc0>
 8009344:	e7ea      	b.n	800931c <__lshift+0xa4>
 8009346:	bf00      	nop
 8009348:	0800a264 	.word	0x0800a264
 800934c:	0800a275 	.word	0x0800a275

08009350 <__mcmp>:
 8009350:	690a      	ldr	r2, [r1, #16]
 8009352:	4603      	mov	r3, r0
 8009354:	6900      	ldr	r0, [r0, #16]
 8009356:	1a80      	subs	r0, r0, r2
 8009358:	b530      	push	{r4, r5, lr}
 800935a:	d10e      	bne.n	800937a <__mcmp+0x2a>
 800935c:	3314      	adds	r3, #20
 800935e:	3114      	adds	r1, #20
 8009360:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009364:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009368:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800936c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009370:	4295      	cmp	r5, r2
 8009372:	d003      	beq.n	800937c <__mcmp+0x2c>
 8009374:	d205      	bcs.n	8009382 <__mcmp+0x32>
 8009376:	f04f 30ff 	mov.w	r0, #4294967295
 800937a:	bd30      	pop	{r4, r5, pc}
 800937c:	42a3      	cmp	r3, r4
 800937e:	d3f3      	bcc.n	8009368 <__mcmp+0x18>
 8009380:	e7fb      	b.n	800937a <__mcmp+0x2a>
 8009382:	2001      	movs	r0, #1
 8009384:	e7f9      	b.n	800937a <__mcmp+0x2a>
	...

08009388 <__mdiff>:
 8009388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	4689      	mov	r9, r1
 800938e:	4606      	mov	r6, r0
 8009390:	4611      	mov	r1, r2
 8009392:	4648      	mov	r0, r9
 8009394:	4614      	mov	r4, r2
 8009396:	f7ff ffdb 	bl	8009350 <__mcmp>
 800939a:	1e05      	subs	r5, r0, #0
 800939c:	d112      	bne.n	80093c4 <__mdiff+0x3c>
 800939e:	4629      	mov	r1, r5
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7ff fd63 	bl	8008e6c <_Balloc>
 80093a6:	4602      	mov	r2, r0
 80093a8:	b928      	cbnz	r0, 80093b6 <__mdiff+0x2e>
 80093aa:	4b3f      	ldr	r3, [pc, #252]	@ (80094a8 <__mdiff+0x120>)
 80093ac:	f240 2137 	movw	r1, #567	@ 0x237
 80093b0:	483e      	ldr	r0, [pc, #248]	@ (80094ac <__mdiff+0x124>)
 80093b2:	f000 fb11 	bl	80099d8 <__assert_func>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093bc:	4610      	mov	r0, r2
 80093be:	b003      	add	sp, #12
 80093c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c4:	bfbc      	itt	lt
 80093c6:	464b      	movlt	r3, r9
 80093c8:	46a1      	movlt	r9, r4
 80093ca:	4630      	mov	r0, r6
 80093cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093d0:	bfba      	itte	lt
 80093d2:	461c      	movlt	r4, r3
 80093d4:	2501      	movlt	r5, #1
 80093d6:	2500      	movge	r5, #0
 80093d8:	f7ff fd48 	bl	8008e6c <_Balloc>
 80093dc:	4602      	mov	r2, r0
 80093de:	b918      	cbnz	r0, 80093e8 <__mdiff+0x60>
 80093e0:	4b31      	ldr	r3, [pc, #196]	@ (80094a8 <__mdiff+0x120>)
 80093e2:	f240 2145 	movw	r1, #581	@ 0x245
 80093e6:	e7e3      	b.n	80093b0 <__mdiff+0x28>
 80093e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093ec:	6926      	ldr	r6, [r4, #16]
 80093ee:	60c5      	str	r5, [r0, #12]
 80093f0:	f109 0310 	add.w	r3, r9, #16
 80093f4:	f109 0514 	add.w	r5, r9, #20
 80093f8:	f104 0e14 	add.w	lr, r4, #20
 80093fc:	f100 0b14 	add.w	fp, r0, #20
 8009400:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009404:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	46d9      	mov	r9, fp
 800940c:	f04f 0c00 	mov.w	ip, #0
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009416:	f853 af04 	ldr.w	sl, [r3, #4]!
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	fa1f f38a 	uxth.w	r3, sl
 8009420:	4619      	mov	r1, r3
 8009422:	b283      	uxth	r3, r0
 8009424:	1acb      	subs	r3, r1, r3
 8009426:	0c00      	lsrs	r0, r0, #16
 8009428:	4463      	add	r3, ip
 800942a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800942e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009432:	b29b      	uxth	r3, r3
 8009434:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009438:	4576      	cmp	r6, lr
 800943a:	f849 3b04 	str.w	r3, [r9], #4
 800943e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009442:	d8e5      	bhi.n	8009410 <__mdiff+0x88>
 8009444:	1b33      	subs	r3, r6, r4
 8009446:	3b15      	subs	r3, #21
 8009448:	f023 0303 	bic.w	r3, r3, #3
 800944c:	3415      	adds	r4, #21
 800944e:	3304      	adds	r3, #4
 8009450:	42a6      	cmp	r6, r4
 8009452:	bf38      	it	cc
 8009454:	2304      	movcc	r3, #4
 8009456:	441d      	add	r5, r3
 8009458:	445b      	add	r3, fp
 800945a:	461e      	mov	r6, r3
 800945c:	462c      	mov	r4, r5
 800945e:	4544      	cmp	r4, r8
 8009460:	d30e      	bcc.n	8009480 <__mdiff+0xf8>
 8009462:	f108 0103 	add.w	r1, r8, #3
 8009466:	1b49      	subs	r1, r1, r5
 8009468:	f021 0103 	bic.w	r1, r1, #3
 800946c:	3d03      	subs	r5, #3
 800946e:	45a8      	cmp	r8, r5
 8009470:	bf38      	it	cc
 8009472:	2100      	movcc	r1, #0
 8009474:	440b      	add	r3, r1
 8009476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800947a:	b191      	cbz	r1, 80094a2 <__mdiff+0x11a>
 800947c:	6117      	str	r7, [r2, #16]
 800947e:	e79d      	b.n	80093bc <__mdiff+0x34>
 8009480:	f854 1b04 	ldr.w	r1, [r4], #4
 8009484:	46e6      	mov	lr, ip
 8009486:	0c08      	lsrs	r0, r1, #16
 8009488:	fa1c fc81 	uxtah	ip, ip, r1
 800948c:	4471      	add	r1, lr
 800948e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009492:	b289      	uxth	r1, r1
 8009494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009498:	f846 1b04 	str.w	r1, [r6], #4
 800949c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094a0:	e7dd      	b.n	800945e <__mdiff+0xd6>
 80094a2:	3f01      	subs	r7, #1
 80094a4:	e7e7      	b.n	8009476 <__mdiff+0xee>
 80094a6:	bf00      	nop
 80094a8:	0800a264 	.word	0x0800a264
 80094ac:	0800a275 	.word	0x0800a275

080094b0 <__d2b>:
 80094b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	460f      	mov	r7, r1
 80094b6:	2101      	movs	r1, #1
 80094b8:	ec59 8b10 	vmov	r8, r9, d0
 80094bc:	4616      	mov	r6, r2
 80094be:	f7ff fcd5 	bl	8008e6c <_Balloc>
 80094c2:	4604      	mov	r4, r0
 80094c4:	b930      	cbnz	r0, 80094d4 <__d2b+0x24>
 80094c6:	4602      	mov	r2, r0
 80094c8:	4b23      	ldr	r3, [pc, #140]	@ (8009558 <__d2b+0xa8>)
 80094ca:	4824      	ldr	r0, [pc, #144]	@ (800955c <__d2b+0xac>)
 80094cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80094d0:	f000 fa82 	bl	80099d8 <__assert_func>
 80094d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094dc:	b10d      	cbz	r5, 80094e2 <__d2b+0x32>
 80094de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	f1b8 0300 	subs.w	r3, r8, #0
 80094e8:	d023      	beq.n	8009532 <__d2b+0x82>
 80094ea:	4668      	mov	r0, sp
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	f7ff fd84 	bl	8008ffa <__lo0bits>
 80094f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094f6:	b1d0      	cbz	r0, 800952e <__d2b+0x7e>
 80094f8:	f1c0 0320 	rsb	r3, r0, #32
 80094fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009500:	430b      	orrs	r3, r1
 8009502:	40c2      	lsrs	r2, r0
 8009504:	6163      	str	r3, [r4, #20]
 8009506:	9201      	str	r2, [sp, #4]
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	61a3      	str	r3, [r4, #24]
 800950c:	2b00      	cmp	r3, #0
 800950e:	bf0c      	ite	eq
 8009510:	2201      	moveq	r2, #1
 8009512:	2202      	movne	r2, #2
 8009514:	6122      	str	r2, [r4, #16]
 8009516:	b1a5      	cbz	r5, 8009542 <__d2b+0x92>
 8009518:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800951c:	4405      	add	r5, r0
 800951e:	603d      	str	r5, [r7, #0]
 8009520:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009524:	6030      	str	r0, [r6, #0]
 8009526:	4620      	mov	r0, r4
 8009528:	b003      	add	sp, #12
 800952a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800952e:	6161      	str	r1, [r4, #20]
 8009530:	e7ea      	b.n	8009508 <__d2b+0x58>
 8009532:	a801      	add	r0, sp, #4
 8009534:	f7ff fd61 	bl	8008ffa <__lo0bits>
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	6163      	str	r3, [r4, #20]
 800953c:	3020      	adds	r0, #32
 800953e:	2201      	movs	r2, #1
 8009540:	e7e8      	b.n	8009514 <__d2b+0x64>
 8009542:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009546:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800954a:	6038      	str	r0, [r7, #0]
 800954c:	6918      	ldr	r0, [r3, #16]
 800954e:	f7ff fd35 	bl	8008fbc <__hi0bits>
 8009552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009556:	e7e5      	b.n	8009524 <__d2b+0x74>
 8009558:	0800a264 	.word	0x0800a264
 800955c:	0800a275 	.word	0x0800a275

08009560 <__ssputs_r>:
 8009560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	688e      	ldr	r6, [r1, #8]
 8009566:	461f      	mov	r7, r3
 8009568:	42be      	cmp	r6, r7
 800956a:	680b      	ldr	r3, [r1, #0]
 800956c:	4682      	mov	sl, r0
 800956e:	460c      	mov	r4, r1
 8009570:	4690      	mov	r8, r2
 8009572:	d82d      	bhi.n	80095d0 <__ssputs_r+0x70>
 8009574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009578:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800957c:	d026      	beq.n	80095cc <__ssputs_r+0x6c>
 800957e:	6965      	ldr	r5, [r4, #20]
 8009580:	6909      	ldr	r1, [r1, #16]
 8009582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009586:	eba3 0901 	sub.w	r9, r3, r1
 800958a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800958e:	1c7b      	adds	r3, r7, #1
 8009590:	444b      	add	r3, r9
 8009592:	106d      	asrs	r5, r5, #1
 8009594:	429d      	cmp	r5, r3
 8009596:	bf38      	it	cc
 8009598:	461d      	movcc	r5, r3
 800959a:	0553      	lsls	r3, r2, #21
 800959c:	d527      	bpl.n	80095ee <__ssputs_r+0x8e>
 800959e:	4629      	mov	r1, r5
 80095a0:	f7ff fbd8 	bl	8008d54 <_malloc_r>
 80095a4:	4606      	mov	r6, r0
 80095a6:	b360      	cbz	r0, 8009602 <__ssputs_r+0xa2>
 80095a8:	6921      	ldr	r1, [r4, #16]
 80095aa:	464a      	mov	r2, r9
 80095ac:	f000 fa06 	bl	80099bc <memcpy>
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	6126      	str	r6, [r4, #16]
 80095be:	6165      	str	r5, [r4, #20]
 80095c0:	444e      	add	r6, r9
 80095c2:	eba5 0509 	sub.w	r5, r5, r9
 80095c6:	6026      	str	r6, [r4, #0]
 80095c8:	60a5      	str	r5, [r4, #8]
 80095ca:	463e      	mov	r6, r7
 80095cc:	42be      	cmp	r6, r7
 80095ce:	d900      	bls.n	80095d2 <__ssputs_r+0x72>
 80095d0:	463e      	mov	r6, r7
 80095d2:	6820      	ldr	r0, [r4, #0]
 80095d4:	4632      	mov	r2, r6
 80095d6:	4641      	mov	r1, r8
 80095d8:	f000 f9c6 	bl	8009968 <memmove>
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	1b9b      	subs	r3, r3, r6
 80095e0:	60a3      	str	r3, [r4, #8]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	4433      	add	r3, r6
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	2000      	movs	r0, #0
 80095ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ee:	462a      	mov	r2, r5
 80095f0:	f000 fa36 	bl	8009a60 <_realloc_r>
 80095f4:	4606      	mov	r6, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d1e0      	bne.n	80095bc <__ssputs_r+0x5c>
 80095fa:	6921      	ldr	r1, [r4, #16]
 80095fc:	4650      	mov	r0, sl
 80095fe:	f7ff fb35 	bl	8008c6c <_free_r>
 8009602:	230c      	movs	r3, #12
 8009604:	f8ca 3000 	str.w	r3, [sl]
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	e7e9      	b.n	80095ea <__ssputs_r+0x8a>
	...

08009618 <_svfiprintf_r>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	4698      	mov	r8, r3
 800961e:	898b      	ldrh	r3, [r1, #12]
 8009620:	061b      	lsls	r3, r3, #24
 8009622:	b09d      	sub	sp, #116	@ 0x74
 8009624:	4607      	mov	r7, r0
 8009626:	460d      	mov	r5, r1
 8009628:	4614      	mov	r4, r2
 800962a:	d510      	bpl.n	800964e <_svfiprintf_r+0x36>
 800962c:	690b      	ldr	r3, [r1, #16]
 800962e:	b973      	cbnz	r3, 800964e <_svfiprintf_r+0x36>
 8009630:	2140      	movs	r1, #64	@ 0x40
 8009632:	f7ff fb8f 	bl	8008d54 <_malloc_r>
 8009636:	6028      	str	r0, [r5, #0]
 8009638:	6128      	str	r0, [r5, #16]
 800963a:	b930      	cbnz	r0, 800964a <_svfiprintf_r+0x32>
 800963c:	230c      	movs	r3, #12
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	b01d      	add	sp, #116	@ 0x74
 8009646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964a:	2340      	movs	r3, #64	@ 0x40
 800964c:	616b      	str	r3, [r5, #20]
 800964e:	2300      	movs	r3, #0
 8009650:	9309      	str	r3, [sp, #36]	@ 0x24
 8009652:	2320      	movs	r3, #32
 8009654:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009658:	f8cd 800c 	str.w	r8, [sp, #12]
 800965c:	2330      	movs	r3, #48	@ 0x30
 800965e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097fc <_svfiprintf_r+0x1e4>
 8009662:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009666:	f04f 0901 	mov.w	r9, #1
 800966a:	4623      	mov	r3, r4
 800966c:	469a      	mov	sl, r3
 800966e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009672:	b10a      	cbz	r2, 8009678 <_svfiprintf_r+0x60>
 8009674:	2a25      	cmp	r2, #37	@ 0x25
 8009676:	d1f9      	bne.n	800966c <_svfiprintf_r+0x54>
 8009678:	ebba 0b04 	subs.w	fp, sl, r4
 800967c:	d00b      	beq.n	8009696 <_svfiprintf_r+0x7e>
 800967e:	465b      	mov	r3, fp
 8009680:	4622      	mov	r2, r4
 8009682:	4629      	mov	r1, r5
 8009684:	4638      	mov	r0, r7
 8009686:	f7ff ff6b 	bl	8009560 <__ssputs_r>
 800968a:	3001      	adds	r0, #1
 800968c:	f000 80a7 	beq.w	80097de <_svfiprintf_r+0x1c6>
 8009690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009692:	445a      	add	r2, fp
 8009694:	9209      	str	r2, [sp, #36]	@ 0x24
 8009696:	f89a 3000 	ldrb.w	r3, [sl]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 809f 	beq.w	80097de <_svfiprintf_r+0x1c6>
 80096a0:	2300      	movs	r3, #0
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096aa:	f10a 0a01 	add.w	sl, sl, #1
 80096ae:	9304      	str	r3, [sp, #16]
 80096b0:	9307      	str	r3, [sp, #28]
 80096b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096b8:	4654      	mov	r4, sl
 80096ba:	2205      	movs	r2, #5
 80096bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c0:	484e      	ldr	r0, [pc, #312]	@ (80097fc <_svfiprintf_r+0x1e4>)
 80096c2:	f7f6 fe25 	bl	8000310 <memchr>
 80096c6:	9a04      	ldr	r2, [sp, #16]
 80096c8:	b9d8      	cbnz	r0, 8009702 <_svfiprintf_r+0xea>
 80096ca:	06d0      	lsls	r0, r2, #27
 80096cc:	bf44      	itt	mi
 80096ce:	2320      	movmi	r3, #32
 80096d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096d4:	0711      	lsls	r1, r2, #28
 80096d6:	bf44      	itt	mi
 80096d8:	232b      	movmi	r3, #43	@ 0x2b
 80096da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096de:	f89a 3000 	ldrb.w	r3, [sl]
 80096e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e4:	d015      	beq.n	8009712 <_svfiprintf_r+0xfa>
 80096e6:	9a07      	ldr	r2, [sp, #28]
 80096e8:	4654      	mov	r4, sl
 80096ea:	2000      	movs	r0, #0
 80096ec:	f04f 0c0a 	mov.w	ip, #10
 80096f0:	4621      	mov	r1, r4
 80096f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096f6:	3b30      	subs	r3, #48	@ 0x30
 80096f8:	2b09      	cmp	r3, #9
 80096fa:	d94b      	bls.n	8009794 <_svfiprintf_r+0x17c>
 80096fc:	b1b0      	cbz	r0, 800972c <_svfiprintf_r+0x114>
 80096fe:	9207      	str	r2, [sp, #28]
 8009700:	e014      	b.n	800972c <_svfiprintf_r+0x114>
 8009702:	eba0 0308 	sub.w	r3, r0, r8
 8009706:	fa09 f303 	lsl.w	r3, r9, r3
 800970a:	4313      	orrs	r3, r2
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	46a2      	mov	sl, r4
 8009710:	e7d2      	b.n	80096b8 <_svfiprintf_r+0xa0>
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	1d19      	adds	r1, r3, #4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	9103      	str	r1, [sp, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	bfbb      	ittet	lt
 800971e:	425b      	neglt	r3, r3
 8009720:	f042 0202 	orrlt.w	r2, r2, #2
 8009724:	9307      	strge	r3, [sp, #28]
 8009726:	9307      	strlt	r3, [sp, #28]
 8009728:	bfb8      	it	lt
 800972a:	9204      	strlt	r2, [sp, #16]
 800972c:	7823      	ldrb	r3, [r4, #0]
 800972e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009730:	d10a      	bne.n	8009748 <_svfiprintf_r+0x130>
 8009732:	7863      	ldrb	r3, [r4, #1]
 8009734:	2b2a      	cmp	r3, #42	@ 0x2a
 8009736:	d132      	bne.n	800979e <_svfiprintf_r+0x186>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	1d1a      	adds	r2, r3, #4
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	9203      	str	r2, [sp, #12]
 8009740:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009744:	3402      	adds	r4, #2
 8009746:	9305      	str	r3, [sp, #20]
 8009748:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800980c <_svfiprintf_r+0x1f4>
 800974c:	7821      	ldrb	r1, [r4, #0]
 800974e:	2203      	movs	r2, #3
 8009750:	4650      	mov	r0, sl
 8009752:	f7f6 fddd 	bl	8000310 <memchr>
 8009756:	b138      	cbz	r0, 8009768 <_svfiprintf_r+0x150>
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	eba0 000a 	sub.w	r0, r0, sl
 800975e:	2240      	movs	r2, #64	@ 0x40
 8009760:	4082      	lsls	r2, r0
 8009762:	4313      	orrs	r3, r2
 8009764:	3401      	adds	r4, #1
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976c:	4824      	ldr	r0, [pc, #144]	@ (8009800 <_svfiprintf_r+0x1e8>)
 800976e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009772:	2206      	movs	r2, #6
 8009774:	f7f6 fdcc 	bl	8000310 <memchr>
 8009778:	2800      	cmp	r0, #0
 800977a:	d036      	beq.n	80097ea <_svfiprintf_r+0x1d2>
 800977c:	4b21      	ldr	r3, [pc, #132]	@ (8009804 <_svfiprintf_r+0x1ec>)
 800977e:	bb1b      	cbnz	r3, 80097c8 <_svfiprintf_r+0x1b0>
 8009780:	9b03      	ldr	r3, [sp, #12]
 8009782:	3307      	adds	r3, #7
 8009784:	f023 0307 	bic.w	r3, r3, #7
 8009788:	3308      	adds	r3, #8
 800978a:	9303      	str	r3, [sp, #12]
 800978c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978e:	4433      	add	r3, r6
 8009790:	9309      	str	r3, [sp, #36]	@ 0x24
 8009792:	e76a      	b.n	800966a <_svfiprintf_r+0x52>
 8009794:	fb0c 3202 	mla	r2, ip, r2, r3
 8009798:	460c      	mov	r4, r1
 800979a:	2001      	movs	r0, #1
 800979c:	e7a8      	b.n	80096f0 <_svfiprintf_r+0xd8>
 800979e:	2300      	movs	r3, #0
 80097a0:	3401      	adds	r4, #1
 80097a2:	9305      	str	r3, [sp, #20]
 80097a4:	4619      	mov	r1, r3
 80097a6:	f04f 0c0a 	mov.w	ip, #10
 80097aa:	4620      	mov	r0, r4
 80097ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b0:	3a30      	subs	r2, #48	@ 0x30
 80097b2:	2a09      	cmp	r2, #9
 80097b4:	d903      	bls.n	80097be <_svfiprintf_r+0x1a6>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0c6      	beq.n	8009748 <_svfiprintf_r+0x130>
 80097ba:	9105      	str	r1, [sp, #20]
 80097bc:	e7c4      	b.n	8009748 <_svfiprintf_r+0x130>
 80097be:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c2:	4604      	mov	r4, r0
 80097c4:	2301      	movs	r3, #1
 80097c6:	e7f0      	b.n	80097aa <_svfiprintf_r+0x192>
 80097c8:	ab03      	add	r3, sp, #12
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	462a      	mov	r2, r5
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <_svfiprintf_r+0x1f0>)
 80097d0:	a904      	add	r1, sp, #16
 80097d2:	4638      	mov	r0, r7
 80097d4:	f7fd ff00 	bl	80075d8 <_printf_float>
 80097d8:	1c42      	adds	r2, r0, #1
 80097da:	4606      	mov	r6, r0
 80097dc:	d1d6      	bne.n	800978c <_svfiprintf_r+0x174>
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	065b      	lsls	r3, r3, #25
 80097e2:	f53f af2d 	bmi.w	8009640 <_svfiprintf_r+0x28>
 80097e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097e8:	e72c      	b.n	8009644 <_svfiprintf_r+0x2c>
 80097ea:	ab03      	add	r3, sp, #12
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	462a      	mov	r2, r5
 80097f0:	4b05      	ldr	r3, [pc, #20]	@ (8009808 <_svfiprintf_r+0x1f0>)
 80097f2:	a904      	add	r1, sp, #16
 80097f4:	4638      	mov	r0, r7
 80097f6:	f7fe f977 	bl	8007ae8 <_printf_i>
 80097fa:	e7ed      	b.n	80097d8 <_svfiprintf_r+0x1c0>
 80097fc:	0800a2ce 	.word	0x0800a2ce
 8009800:	0800a2d8 	.word	0x0800a2d8
 8009804:	080075d9 	.word	0x080075d9
 8009808:	08009561 	.word	0x08009561
 800980c:	0800a2d4 	.word	0x0800a2d4

08009810 <__sflush_r>:
 8009810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009818:	0716      	lsls	r6, r2, #28
 800981a:	4605      	mov	r5, r0
 800981c:	460c      	mov	r4, r1
 800981e:	d454      	bmi.n	80098ca <__sflush_r+0xba>
 8009820:	684b      	ldr	r3, [r1, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	dc02      	bgt.n	800982c <__sflush_r+0x1c>
 8009826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009828:	2b00      	cmp	r3, #0
 800982a:	dd48      	ble.n	80098be <__sflush_r+0xae>
 800982c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800982e:	2e00      	cmp	r6, #0
 8009830:	d045      	beq.n	80098be <__sflush_r+0xae>
 8009832:	2300      	movs	r3, #0
 8009834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009838:	682f      	ldr	r7, [r5, #0]
 800983a:	6a21      	ldr	r1, [r4, #32]
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	d030      	beq.n	80098a2 <__sflush_r+0x92>
 8009840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	0759      	lsls	r1, r3, #29
 8009846:	d505      	bpl.n	8009854 <__sflush_r+0x44>
 8009848:	6863      	ldr	r3, [r4, #4]
 800984a:	1ad2      	subs	r2, r2, r3
 800984c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800984e:	b10b      	cbz	r3, 8009854 <__sflush_r+0x44>
 8009850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009852:	1ad2      	subs	r2, r2, r3
 8009854:	2300      	movs	r3, #0
 8009856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009858:	6a21      	ldr	r1, [r4, #32]
 800985a:	4628      	mov	r0, r5
 800985c:	47b0      	blx	r6
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	d106      	bne.n	8009872 <__sflush_r+0x62>
 8009864:	6829      	ldr	r1, [r5, #0]
 8009866:	291d      	cmp	r1, #29
 8009868:	d82b      	bhi.n	80098c2 <__sflush_r+0xb2>
 800986a:	4a2a      	ldr	r2, [pc, #168]	@ (8009914 <__sflush_r+0x104>)
 800986c:	40ca      	lsrs	r2, r1
 800986e:	07d6      	lsls	r6, r2, #31
 8009870:	d527      	bpl.n	80098c2 <__sflush_r+0xb2>
 8009872:	2200      	movs	r2, #0
 8009874:	6062      	str	r2, [r4, #4]
 8009876:	04d9      	lsls	r1, r3, #19
 8009878:	6922      	ldr	r2, [r4, #16]
 800987a:	6022      	str	r2, [r4, #0]
 800987c:	d504      	bpl.n	8009888 <__sflush_r+0x78>
 800987e:	1c42      	adds	r2, r0, #1
 8009880:	d101      	bne.n	8009886 <__sflush_r+0x76>
 8009882:	682b      	ldr	r3, [r5, #0]
 8009884:	b903      	cbnz	r3, 8009888 <__sflush_r+0x78>
 8009886:	6560      	str	r0, [r4, #84]	@ 0x54
 8009888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800988a:	602f      	str	r7, [r5, #0]
 800988c:	b1b9      	cbz	r1, 80098be <__sflush_r+0xae>
 800988e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009892:	4299      	cmp	r1, r3
 8009894:	d002      	beq.n	800989c <__sflush_r+0x8c>
 8009896:	4628      	mov	r0, r5
 8009898:	f7ff f9e8 	bl	8008c6c <_free_r>
 800989c:	2300      	movs	r3, #0
 800989e:	6363      	str	r3, [r4, #52]	@ 0x34
 80098a0:	e00d      	b.n	80098be <__sflush_r+0xae>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4628      	mov	r0, r5
 80098a6:	47b0      	blx	r6
 80098a8:	4602      	mov	r2, r0
 80098aa:	1c50      	adds	r0, r2, #1
 80098ac:	d1c9      	bne.n	8009842 <__sflush_r+0x32>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0c6      	beq.n	8009842 <__sflush_r+0x32>
 80098b4:	2b1d      	cmp	r3, #29
 80098b6:	d001      	beq.n	80098bc <__sflush_r+0xac>
 80098b8:	2b16      	cmp	r3, #22
 80098ba:	d11e      	bne.n	80098fa <__sflush_r+0xea>
 80098bc:	602f      	str	r7, [r5, #0]
 80098be:	2000      	movs	r0, #0
 80098c0:	e022      	b.n	8009908 <__sflush_r+0xf8>
 80098c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c6:	b21b      	sxth	r3, r3
 80098c8:	e01b      	b.n	8009902 <__sflush_r+0xf2>
 80098ca:	690f      	ldr	r7, [r1, #16]
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	d0f6      	beq.n	80098be <__sflush_r+0xae>
 80098d0:	0793      	lsls	r3, r2, #30
 80098d2:	680e      	ldr	r6, [r1, #0]
 80098d4:	bf08      	it	eq
 80098d6:	694b      	ldreq	r3, [r1, #20]
 80098d8:	600f      	str	r7, [r1, #0]
 80098da:	bf18      	it	ne
 80098dc:	2300      	movne	r3, #0
 80098de:	eba6 0807 	sub.w	r8, r6, r7
 80098e2:	608b      	str	r3, [r1, #8]
 80098e4:	f1b8 0f00 	cmp.w	r8, #0
 80098e8:	dde9      	ble.n	80098be <__sflush_r+0xae>
 80098ea:	6a21      	ldr	r1, [r4, #32]
 80098ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098ee:	4643      	mov	r3, r8
 80098f0:	463a      	mov	r2, r7
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b0      	blx	r6
 80098f6:	2800      	cmp	r0, #0
 80098f8:	dc08      	bgt.n	800990c <__sflush_r+0xfc>
 80098fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	4407      	add	r7, r0
 800990e:	eba8 0800 	sub.w	r8, r8, r0
 8009912:	e7e7      	b.n	80098e4 <__sflush_r+0xd4>
 8009914:	20400001 	.word	0x20400001

08009918 <_fflush_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	690b      	ldr	r3, [r1, #16]
 800991c:	4605      	mov	r5, r0
 800991e:	460c      	mov	r4, r1
 8009920:	b913      	cbnz	r3, 8009928 <_fflush_r+0x10>
 8009922:	2500      	movs	r5, #0
 8009924:	4628      	mov	r0, r5
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	b118      	cbz	r0, 8009932 <_fflush_r+0x1a>
 800992a:	6a03      	ldr	r3, [r0, #32]
 800992c:	b90b      	cbnz	r3, 8009932 <_fflush_r+0x1a>
 800992e:	f7fe fa85 	bl	8007e3c <__sinit>
 8009932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0f3      	beq.n	8009922 <_fflush_r+0xa>
 800993a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800993c:	07d0      	lsls	r0, r2, #31
 800993e:	d404      	bmi.n	800994a <_fflush_r+0x32>
 8009940:	0599      	lsls	r1, r3, #22
 8009942:	d402      	bmi.n	800994a <_fflush_r+0x32>
 8009944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009946:	f7fe fba6 	bl	8008096 <__retarget_lock_acquire_recursive>
 800994a:	4628      	mov	r0, r5
 800994c:	4621      	mov	r1, r4
 800994e:	f7ff ff5f 	bl	8009810 <__sflush_r>
 8009952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009954:	07da      	lsls	r2, r3, #31
 8009956:	4605      	mov	r5, r0
 8009958:	d4e4      	bmi.n	8009924 <_fflush_r+0xc>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	059b      	lsls	r3, r3, #22
 800995e:	d4e1      	bmi.n	8009924 <_fflush_r+0xc>
 8009960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009962:	f7fe fb99 	bl	8008098 <__retarget_lock_release_recursive>
 8009966:	e7dd      	b.n	8009924 <_fflush_r+0xc>

08009968 <memmove>:
 8009968:	4288      	cmp	r0, r1
 800996a:	b510      	push	{r4, lr}
 800996c:	eb01 0402 	add.w	r4, r1, r2
 8009970:	d902      	bls.n	8009978 <memmove+0x10>
 8009972:	4284      	cmp	r4, r0
 8009974:	4623      	mov	r3, r4
 8009976:	d807      	bhi.n	8009988 <memmove+0x20>
 8009978:	1e43      	subs	r3, r0, #1
 800997a:	42a1      	cmp	r1, r4
 800997c:	d008      	beq.n	8009990 <memmove+0x28>
 800997e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009986:	e7f8      	b.n	800997a <memmove+0x12>
 8009988:	4402      	add	r2, r0
 800998a:	4601      	mov	r1, r0
 800998c:	428a      	cmp	r2, r1
 800998e:	d100      	bne.n	8009992 <memmove+0x2a>
 8009990:	bd10      	pop	{r4, pc}
 8009992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800999a:	e7f7      	b.n	800998c <memmove+0x24>

0800999c <_sbrk_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d06      	ldr	r5, [pc, #24]	@ (80099b8 <_sbrk_r+0x1c>)
 80099a0:	2300      	movs	r3, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	f7f8 f91a 	bl	8001be0 <_sbrk>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_sbrk_r+0x1a>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_sbrk_r+0x1a>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	240004f8 	.word	0x240004f8

080099bc <memcpy>:
 80099bc:	440a      	add	r2, r1
 80099be:	4291      	cmp	r1, r2
 80099c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099c4:	d100      	bne.n	80099c8 <memcpy+0xc>
 80099c6:	4770      	bx	lr
 80099c8:	b510      	push	{r4, lr}
 80099ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099d2:	4291      	cmp	r1, r2
 80099d4:	d1f9      	bne.n	80099ca <memcpy+0xe>
 80099d6:	bd10      	pop	{r4, pc}

080099d8 <__assert_func>:
 80099d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099da:	4614      	mov	r4, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	4b09      	ldr	r3, [pc, #36]	@ (8009a04 <__assert_func+0x2c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4605      	mov	r5, r0
 80099e4:	68d8      	ldr	r0, [r3, #12]
 80099e6:	b14c      	cbz	r4, 80099fc <__assert_func+0x24>
 80099e8:	4b07      	ldr	r3, [pc, #28]	@ (8009a08 <__assert_func+0x30>)
 80099ea:	9100      	str	r1, [sp, #0]
 80099ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099f0:	4906      	ldr	r1, [pc, #24]	@ (8009a0c <__assert_func+0x34>)
 80099f2:	462b      	mov	r3, r5
 80099f4:	f000 f870 	bl	8009ad8 <fiprintf>
 80099f8:	f000 f880 	bl	8009afc <abort>
 80099fc:	4b04      	ldr	r3, [pc, #16]	@ (8009a10 <__assert_func+0x38>)
 80099fe:	461c      	mov	r4, r3
 8009a00:	e7f3      	b.n	80099ea <__assert_func+0x12>
 8009a02:	bf00      	nop
 8009a04:	24000038 	.word	0x24000038
 8009a08:	0800a2e9 	.word	0x0800a2e9
 8009a0c:	0800a2f6 	.word	0x0800a2f6
 8009a10:	0800a324 	.word	0x0800a324

08009a14 <_calloc_r>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	fba1 5402 	umull	r5, r4, r1, r2
 8009a1a:	b934      	cbnz	r4, 8009a2a <_calloc_r+0x16>
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	f7ff f999 	bl	8008d54 <_malloc_r>
 8009a22:	4606      	mov	r6, r0
 8009a24:	b928      	cbnz	r0, 8009a32 <_calloc_r+0x1e>
 8009a26:	4630      	mov	r0, r6
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	220c      	movs	r2, #12
 8009a2c:	6002      	str	r2, [r0, #0]
 8009a2e:	2600      	movs	r6, #0
 8009a30:	e7f9      	b.n	8009a26 <_calloc_r+0x12>
 8009a32:	462a      	mov	r2, r5
 8009a34:	4621      	mov	r1, r4
 8009a36:	f7fe fab0 	bl	8007f9a <memset>
 8009a3a:	e7f4      	b.n	8009a26 <_calloc_r+0x12>

08009a3c <__ascii_mbtowc>:
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	b901      	cbnz	r1, 8009a42 <__ascii_mbtowc+0x6>
 8009a40:	a901      	add	r1, sp, #4
 8009a42:	b142      	cbz	r2, 8009a56 <__ascii_mbtowc+0x1a>
 8009a44:	b14b      	cbz	r3, 8009a5a <__ascii_mbtowc+0x1e>
 8009a46:	7813      	ldrb	r3, [r2, #0]
 8009a48:	600b      	str	r3, [r1, #0]
 8009a4a:	7812      	ldrb	r2, [r2, #0]
 8009a4c:	1e10      	subs	r0, r2, #0
 8009a4e:	bf18      	it	ne
 8009a50:	2001      	movne	r0, #1
 8009a52:	b002      	add	sp, #8
 8009a54:	4770      	bx	lr
 8009a56:	4610      	mov	r0, r2
 8009a58:	e7fb      	b.n	8009a52 <__ascii_mbtowc+0x16>
 8009a5a:	f06f 0001 	mvn.w	r0, #1
 8009a5e:	e7f8      	b.n	8009a52 <__ascii_mbtowc+0x16>

08009a60 <_realloc_r>:
 8009a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a64:	4607      	mov	r7, r0
 8009a66:	4614      	mov	r4, r2
 8009a68:	460d      	mov	r5, r1
 8009a6a:	b921      	cbnz	r1, 8009a76 <_realloc_r+0x16>
 8009a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a70:	4611      	mov	r1, r2
 8009a72:	f7ff b96f 	b.w	8008d54 <_malloc_r>
 8009a76:	b92a      	cbnz	r2, 8009a84 <_realloc_r+0x24>
 8009a78:	f7ff f8f8 	bl	8008c6c <_free_r>
 8009a7c:	4625      	mov	r5, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a84:	f000 f841 	bl	8009b0a <_malloc_usable_size_r>
 8009a88:	4284      	cmp	r4, r0
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	d802      	bhi.n	8009a94 <_realloc_r+0x34>
 8009a8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a92:	d8f4      	bhi.n	8009a7e <_realloc_r+0x1e>
 8009a94:	4621      	mov	r1, r4
 8009a96:	4638      	mov	r0, r7
 8009a98:	f7ff f95c 	bl	8008d54 <_malloc_r>
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	b908      	cbnz	r0, 8009aa4 <_realloc_r+0x44>
 8009aa0:	4645      	mov	r5, r8
 8009aa2:	e7ec      	b.n	8009a7e <_realloc_r+0x1e>
 8009aa4:	42b4      	cmp	r4, r6
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	bf28      	it	cs
 8009aac:	4632      	movcs	r2, r6
 8009aae:	f7ff ff85 	bl	80099bc <memcpy>
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	f7ff f8d9 	bl	8008c6c <_free_r>
 8009aba:	e7f1      	b.n	8009aa0 <_realloc_r+0x40>

08009abc <__ascii_wctomb>:
 8009abc:	4603      	mov	r3, r0
 8009abe:	4608      	mov	r0, r1
 8009ac0:	b141      	cbz	r1, 8009ad4 <__ascii_wctomb+0x18>
 8009ac2:	2aff      	cmp	r2, #255	@ 0xff
 8009ac4:	d904      	bls.n	8009ad0 <__ascii_wctomb+0x14>
 8009ac6:	228a      	movs	r2, #138	@ 0x8a
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ace:	4770      	bx	lr
 8009ad0:	700a      	strb	r2, [r1, #0]
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	4770      	bx	lr
	...

08009ad8 <fiprintf>:
 8009ad8:	b40e      	push	{r1, r2, r3}
 8009ada:	b503      	push	{r0, r1, lr}
 8009adc:	4601      	mov	r1, r0
 8009ade:	ab03      	add	r3, sp, #12
 8009ae0:	4805      	ldr	r0, [pc, #20]	@ (8009af8 <fiprintf+0x20>)
 8009ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae6:	6800      	ldr	r0, [r0, #0]
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	f000 f83f 	bl	8009b6c <_vfiprintf_r>
 8009aee:	b002      	add	sp, #8
 8009af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af4:	b003      	add	sp, #12
 8009af6:	4770      	bx	lr
 8009af8:	24000038 	.word	0x24000038

08009afc <abort>:
 8009afc:	b508      	push	{r3, lr}
 8009afe:	2006      	movs	r0, #6
 8009b00:	f000 fa08 	bl	8009f14 <raise>
 8009b04:	2001      	movs	r0, #1
 8009b06:	f7f7 fff3 	bl	8001af0 <_exit>

08009b0a <_malloc_usable_size_r>:
 8009b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b0e:	1f18      	subs	r0, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	bfbc      	itt	lt
 8009b14:	580b      	ldrlt	r3, [r1, r0]
 8009b16:	18c0      	addlt	r0, r0, r3
 8009b18:	4770      	bx	lr

08009b1a <__sfputc_r>:
 8009b1a:	6893      	ldr	r3, [r2, #8]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	b410      	push	{r4}
 8009b22:	6093      	str	r3, [r2, #8]
 8009b24:	da08      	bge.n	8009b38 <__sfputc_r+0x1e>
 8009b26:	6994      	ldr	r4, [r2, #24]
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	db01      	blt.n	8009b30 <__sfputc_r+0x16>
 8009b2c:	290a      	cmp	r1, #10
 8009b2e:	d103      	bne.n	8009b38 <__sfputc_r+0x1e>
 8009b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b34:	f000 b932 	b.w	8009d9c <__swbuf_r>
 8009b38:	6813      	ldr	r3, [r2, #0]
 8009b3a:	1c58      	adds	r0, r3, #1
 8009b3c:	6010      	str	r0, [r2, #0]
 8009b3e:	7019      	strb	r1, [r3, #0]
 8009b40:	4608      	mov	r0, r1
 8009b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <__sfputs_r>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	4614      	mov	r4, r2
 8009b50:	18d5      	adds	r5, r2, r3
 8009b52:	42ac      	cmp	r4, r5
 8009b54:	d101      	bne.n	8009b5a <__sfputs_r+0x12>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e007      	b.n	8009b6a <__sfputs_r+0x22>
 8009b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5e:	463a      	mov	r2, r7
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7ff ffda 	bl	8009b1a <__sfputc_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	d1f3      	bne.n	8009b52 <__sfputs_r+0xa>
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b6c <_vfiprintf_r>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	460d      	mov	r5, r1
 8009b72:	b09d      	sub	sp, #116	@ 0x74
 8009b74:	4614      	mov	r4, r2
 8009b76:	4698      	mov	r8, r3
 8009b78:	4606      	mov	r6, r0
 8009b7a:	b118      	cbz	r0, 8009b84 <_vfiprintf_r+0x18>
 8009b7c:	6a03      	ldr	r3, [r0, #32]
 8009b7e:	b90b      	cbnz	r3, 8009b84 <_vfiprintf_r+0x18>
 8009b80:	f7fe f95c 	bl	8007e3c <__sinit>
 8009b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b86:	07d9      	lsls	r1, r3, #31
 8009b88:	d405      	bmi.n	8009b96 <_vfiprintf_r+0x2a>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	059a      	lsls	r2, r3, #22
 8009b8e:	d402      	bmi.n	8009b96 <_vfiprintf_r+0x2a>
 8009b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b92:	f7fe fa80 	bl	8008096 <__retarget_lock_acquire_recursive>
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	071b      	lsls	r3, r3, #28
 8009b9a:	d501      	bpl.n	8009ba0 <_vfiprintf_r+0x34>
 8009b9c:	692b      	ldr	r3, [r5, #16]
 8009b9e:	b99b      	cbnz	r3, 8009bc8 <_vfiprintf_r+0x5c>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f000 f938 	bl	8009e18 <__swsetup_r>
 8009ba8:	b170      	cbz	r0, 8009bc8 <_vfiprintf_r+0x5c>
 8009baa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bac:	07dc      	lsls	r4, r3, #31
 8009bae:	d504      	bpl.n	8009bba <_vfiprintf_r+0x4e>
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	b01d      	add	sp, #116	@ 0x74
 8009bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	0598      	lsls	r0, r3, #22
 8009bbe:	d4f7      	bmi.n	8009bb0 <_vfiprintf_r+0x44>
 8009bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bc2:	f7fe fa69 	bl	8008098 <__retarget_lock_release_recursive>
 8009bc6:	e7f3      	b.n	8009bb0 <_vfiprintf_r+0x44>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bd6:	2330      	movs	r3, #48	@ 0x30
 8009bd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d88 <_vfiprintf_r+0x21c>
 8009bdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009be0:	f04f 0901 	mov.w	r9, #1
 8009be4:	4623      	mov	r3, r4
 8009be6:	469a      	mov	sl, r3
 8009be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bec:	b10a      	cbz	r2, 8009bf2 <_vfiprintf_r+0x86>
 8009bee:	2a25      	cmp	r2, #37	@ 0x25
 8009bf0:	d1f9      	bne.n	8009be6 <_vfiprintf_r+0x7a>
 8009bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf6:	d00b      	beq.n	8009c10 <_vfiprintf_r+0xa4>
 8009bf8:	465b      	mov	r3, fp
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7ff ffa2 	bl	8009b48 <__sfputs_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	f000 80a7 	beq.w	8009d58 <_vfiprintf_r+0x1ec>
 8009c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c0c:	445a      	add	r2, fp
 8009c0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c10:	f89a 3000 	ldrb.w	r3, [sl]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 809f 	beq.w	8009d58 <_vfiprintf_r+0x1ec>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c24:	f10a 0a01 	add.w	sl, sl, #1
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	9307      	str	r3, [sp, #28]
 8009c2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c30:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c32:	4654      	mov	r4, sl
 8009c34:	2205      	movs	r2, #5
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	4853      	ldr	r0, [pc, #332]	@ (8009d88 <_vfiprintf_r+0x21c>)
 8009c3c:	f7f6 fb68 	bl	8000310 <memchr>
 8009c40:	9a04      	ldr	r2, [sp, #16]
 8009c42:	b9d8      	cbnz	r0, 8009c7c <_vfiprintf_r+0x110>
 8009c44:	06d1      	lsls	r1, r2, #27
 8009c46:	bf44      	itt	mi
 8009c48:	2320      	movmi	r3, #32
 8009c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c4e:	0713      	lsls	r3, r2, #28
 8009c50:	bf44      	itt	mi
 8009c52:	232b      	movmi	r3, #43	@ 0x2b
 8009c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c58:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c5e:	d015      	beq.n	8009c8c <_vfiprintf_r+0x120>
 8009c60:	9a07      	ldr	r2, [sp, #28]
 8009c62:	4654      	mov	r4, sl
 8009c64:	2000      	movs	r0, #0
 8009c66:	f04f 0c0a 	mov.w	ip, #10
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c70:	3b30      	subs	r3, #48	@ 0x30
 8009c72:	2b09      	cmp	r3, #9
 8009c74:	d94b      	bls.n	8009d0e <_vfiprintf_r+0x1a2>
 8009c76:	b1b0      	cbz	r0, 8009ca6 <_vfiprintf_r+0x13a>
 8009c78:	9207      	str	r2, [sp, #28]
 8009c7a:	e014      	b.n	8009ca6 <_vfiprintf_r+0x13a>
 8009c7c:	eba0 0308 	sub.w	r3, r0, r8
 8009c80:	fa09 f303 	lsl.w	r3, r9, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	46a2      	mov	sl, r4
 8009c8a:	e7d2      	b.n	8009c32 <_vfiprintf_r+0xc6>
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	1d19      	adds	r1, r3, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	9103      	str	r1, [sp, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bfbb      	ittet	lt
 8009c98:	425b      	neglt	r3, r3
 8009c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c9e:	9307      	strge	r3, [sp, #28]
 8009ca0:	9307      	strlt	r3, [sp, #28]
 8009ca2:	bfb8      	it	lt
 8009ca4:	9204      	strlt	r2, [sp, #16]
 8009ca6:	7823      	ldrb	r3, [r4, #0]
 8009ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009caa:	d10a      	bne.n	8009cc2 <_vfiprintf_r+0x156>
 8009cac:	7863      	ldrb	r3, [r4, #1]
 8009cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb0:	d132      	bne.n	8009d18 <_vfiprintf_r+0x1ac>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	1d1a      	adds	r2, r3, #4
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	9203      	str	r2, [sp, #12]
 8009cba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cbe:	3402      	adds	r4, #2
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d98 <_vfiprintf_r+0x22c>
 8009cc6:	7821      	ldrb	r1, [r4, #0]
 8009cc8:	2203      	movs	r2, #3
 8009cca:	4650      	mov	r0, sl
 8009ccc:	f7f6 fb20 	bl	8000310 <memchr>
 8009cd0:	b138      	cbz	r0, 8009ce2 <_vfiprintf_r+0x176>
 8009cd2:	9b04      	ldr	r3, [sp, #16]
 8009cd4:	eba0 000a 	sub.w	r0, r0, sl
 8009cd8:	2240      	movs	r2, #64	@ 0x40
 8009cda:	4082      	lsls	r2, r0
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	3401      	adds	r4, #1
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce6:	4829      	ldr	r0, [pc, #164]	@ (8009d8c <_vfiprintf_r+0x220>)
 8009ce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cec:	2206      	movs	r2, #6
 8009cee:	f7f6 fb0f 	bl	8000310 <memchr>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d03f      	beq.n	8009d76 <_vfiprintf_r+0x20a>
 8009cf6:	4b26      	ldr	r3, [pc, #152]	@ (8009d90 <_vfiprintf_r+0x224>)
 8009cf8:	bb1b      	cbnz	r3, 8009d42 <_vfiprintf_r+0x1d6>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	3307      	adds	r3, #7
 8009cfe:	f023 0307 	bic.w	r3, r3, #7
 8009d02:	3308      	adds	r3, #8
 8009d04:	9303      	str	r3, [sp, #12]
 8009d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d08:	443b      	add	r3, r7
 8009d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d0c:	e76a      	b.n	8009be4 <_vfiprintf_r+0x78>
 8009d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d12:	460c      	mov	r4, r1
 8009d14:	2001      	movs	r0, #1
 8009d16:	e7a8      	b.n	8009c6a <_vfiprintf_r+0xfe>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f04f 0c0a 	mov.w	ip, #10
 8009d24:	4620      	mov	r0, r4
 8009d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d2a:	3a30      	subs	r2, #48	@ 0x30
 8009d2c:	2a09      	cmp	r2, #9
 8009d2e:	d903      	bls.n	8009d38 <_vfiprintf_r+0x1cc>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d0c6      	beq.n	8009cc2 <_vfiprintf_r+0x156>
 8009d34:	9105      	str	r1, [sp, #20]
 8009d36:	e7c4      	b.n	8009cc2 <_vfiprintf_r+0x156>
 8009d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e7f0      	b.n	8009d24 <_vfiprintf_r+0x1b8>
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	462a      	mov	r2, r5
 8009d48:	4b12      	ldr	r3, [pc, #72]	@ (8009d94 <_vfiprintf_r+0x228>)
 8009d4a:	a904      	add	r1, sp, #16
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7fd fc43 	bl	80075d8 <_printf_float>
 8009d52:	4607      	mov	r7, r0
 8009d54:	1c78      	adds	r0, r7, #1
 8009d56:	d1d6      	bne.n	8009d06 <_vfiprintf_r+0x19a>
 8009d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d5a:	07d9      	lsls	r1, r3, #31
 8009d5c:	d405      	bmi.n	8009d6a <_vfiprintf_r+0x1fe>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d402      	bmi.n	8009d6a <_vfiprintf_r+0x1fe>
 8009d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d66:	f7fe f997 	bl	8008098 <__retarget_lock_release_recursive>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	065b      	lsls	r3, r3, #25
 8009d6e:	f53f af1f 	bmi.w	8009bb0 <_vfiprintf_r+0x44>
 8009d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d74:	e71e      	b.n	8009bb4 <_vfiprintf_r+0x48>
 8009d76:	ab03      	add	r3, sp, #12
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	462a      	mov	r2, r5
 8009d7c:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <_vfiprintf_r+0x228>)
 8009d7e:	a904      	add	r1, sp, #16
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7fd feb1 	bl	8007ae8 <_printf_i>
 8009d86:	e7e4      	b.n	8009d52 <_vfiprintf_r+0x1e6>
 8009d88:	0800a2ce 	.word	0x0800a2ce
 8009d8c:	0800a2d8 	.word	0x0800a2d8
 8009d90:	080075d9 	.word	0x080075d9
 8009d94:	08009b49 	.word	0x08009b49
 8009d98:	0800a2d4 	.word	0x0800a2d4

08009d9c <__swbuf_r>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	460e      	mov	r6, r1
 8009da0:	4614      	mov	r4, r2
 8009da2:	4605      	mov	r5, r0
 8009da4:	b118      	cbz	r0, 8009dae <__swbuf_r+0x12>
 8009da6:	6a03      	ldr	r3, [r0, #32]
 8009da8:	b90b      	cbnz	r3, 8009dae <__swbuf_r+0x12>
 8009daa:	f7fe f847 	bl	8007e3c <__sinit>
 8009dae:	69a3      	ldr	r3, [r4, #24]
 8009db0:	60a3      	str	r3, [r4, #8]
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	071a      	lsls	r2, r3, #28
 8009db6:	d501      	bpl.n	8009dbc <__swbuf_r+0x20>
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	b943      	cbnz	r3, 8009dce <__swbuf_r+0x32>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 f82a 	bl	8009e18 <__swsetup_r>
 8009dc4:	b118      	cbz	r0, 8009dce <__swbuf_r+0x32>
 8009dc6:	f04f 37ff 	mov.w	r7, #4294967295
 8009dca:	4638      	mov	r0, r7
 8009dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	6922      	ldr	r2, [r4, #16]
 8009dd2:	1a98      	subs	r0, r3, r2
 8009dd4:	6963      	ldr	r3, [r4, #20]
 8009dd6:	b2f6      	uxtb	r6, r6
 8009dd8:	4283      	cmp	r3, r0
 8009dda:	4637      	mov	r7, r6
 8009ddc:	dc05      	bgt.n	8009dea <__swbuf_r+0x4e>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f7ff fd99 	bl	8009918 <_fflush_r>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d1ed      	bne.n	8009dc6 <__swbuf_r+0x2a>
 8009dea:	68a3      	ldr	r3, [r4, #8]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	6022      	str	r2, [r4, #0]
 8009df6:	701e      	strb	r6, [r3, #0]
 8009df8:	6962      	ldr	r2, [r4, #20]
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d004      	beq.n	8009e0a <__swbuf_r+0x6e>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	07db      	lsls	r3, r3, #31
 8009e04:	d5e1      	bpl.n	8009dca <__swbuf_r+0x2e>
 8009e06:	2e0a      	cmp	r6, #10
 8009e08:	d1df      	bne.n	8009dca <__swbuf_r+0x2e>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7ff fd83 	bl	8009918 <_fflush_r>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d0d9      	beq.n	8009dca <__swbuf_r+0x2e>
 8009e16:	e7d6      	b.n	8009dc6 <__swbuf_r+0x2a>

08009e18 <__swsetup_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4b29      	ldr	r3, [pc, #164]	@ (8009ec0 <__swsetup_r+0xa8>)
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	6818      	ldr	r0, [r3, #0]
 8009e20:	460c      	mov	r4, r1
 8009e22:	b118      	cbz	r0, 8009e2c <__swsetup_r+0x14>
 8009e24:	6a03      	ldr	r3, [r0, #32]
 8009e26:	b90b      	cbnz	r3, 8009e2c <__swsetup_r+0x14>
 8009e28:	f7fe f808 	bl	8007e3c <__sinit>
 8009e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e30:	0719      	lsls	r1, r3, #28
 8009e32:	d422      	bmi.n	8009e7a <__swsetup_r+0x62>
 8009e34:	06da      	lsls	r2, r3, #27
 8009e36:	d407      	bmi.n	8009e48 <__swsetup_r+0x30>
 8009e38:	2209      	movs	r2, #9
 8009e3a:	602a      	str	r2, [r5, #0]
 8009e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295
 8009e46:	e033      	b.n	8009eb0 <__swsetup_r+0x98>
 8009e48:	0758      	lsls	r0, r3, #29
 8009e4a:	d512      	bpl.n	8009e72 <__swsetup_r+0x5a>
 8009e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e4e:	b141      	cbz	r1, 8009e62 <__swsetup_r+0x4a>
 8009e50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e54:	4299      	cmp	r1, r3
 8009e56:	d002      	beq.n	8009e5e <__swsetup_r+0x46>
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f7fe ff07 	bl	8008c6c <_free_r>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e62:	89a3      	ldrh	r3, [r4, #12]
 8009e64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e68:	81a3      	strh	r3, [r4, #12]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	6063      	str	r3, [r4, #4]
 8009e6e:	6923      	ldr	r3, [r4, #16]
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f043 0308 	orr.w	r3, r3, #8
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	b94b      	cbnz	r3, 8009e92 <__swsetup_r+0x7a>
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e88:	d003      	beq.n	8009e92 <__swsetup_r+0x7a>
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 f883 	bl	8009f98 <__smakebuf_r>
 8009e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e96:	f013 0201 	ands.w	r2, r3, #1
 8009e9a:	d00a      	beq.n	8009eb2 <__swsetup_r+0x9a>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	60a2      	str	r2, [r4, #8]
 8009ea0:	6962      	ldr	r2, [r4, #20]
 8009ea2:	4252      	negs	r2, r2
 8009ea4:	61a2      	str	r2, [r4, #24]
 8009ea6:	6922      	ldr	r2, [r4, #16]
 8009ea8:	b942      	cbnz	r2, 8009ebc <__swsetup_r+0xa4>
 8009eaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009eae:	d1c5      	bne.n	8009e3c <__swsetup_r+0x24>
 8009eb0:	bd38      	pop	{r3, r4, r5, pc}
 8009eb2:	0799      	lsls	r1, r3, #30
 8009eb4:	bf58      	it	pl
 8009eb6:	6962      	ldrpl	r2, [r4, #20]
 8009eb8:	60a2      	str	r2, [r4, #8]
 8009eba:	e7f4      	b.n	8009ea6 <__swsetup_r+0x8e>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	e7f7      	b.n	8009eb0 <__swsetup_r+0x98>
 8009ec0:	24000038 	.word	0x24000038

08009ec4 <_raise_r>:
 8009ec4:	291f      	cmp	r1, #31
 8009ec6:	b538      	push	{r3, r4, r5, lr}
 8009ec8:	4605      	mov	r5, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	d904      	bls.n	8009ed8 <_raise_r+0x14>
 8009ece:	2316      	movs	r3, #22
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009eda:	b112      	cbz	r2, 8009ee2 <_raise_r+0x1e>
 8009edc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ee0:	b94b      	cbnz	r3, 8009ef6 <_raise_r+0x32>
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f000 f830 	bl	8009f48 <_getpid_r>
 8009ee8:	4622      	mov	r2, r4
 8009eea:	4601      	mov	r1, r0
 8009eec:	4628      	mov	r0, r5
 8009eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef2:	f000 b817 	b.w	8009f24 <_kill_r>
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d00a      	beq.n	8009f10 <_raise_r+0x4c>
 8009efa:	1c59      	adds	r1, r3, #1
 8009efc:	d103      	bne.n	8009f06 <_raise_r+0x42>
 8009efe:	2316      	movs	r3, #22
 8009f00:	6003      	str	r3, [r0, #0]
 8009f02:	2001      	movs	r0, #1
 8009f04:	e7e7      	b.n	8009ed6 <_raise_r+0x12>
 8009f06:	2100      	movs	r1, #0
 8009f08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	4798      	blx	r3
 8009f10:	2000      	movs	r0, #0
 8009f12:	e7e0      	b.n	8009ed6 <_raise_r+0x12>

08009f14 <raise>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	@ (8009f20 <raise+0xc>)
 8009f16:	4601      	mov	r1, r0
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	f7ff bfd3 	b.w	8009ec4 <_raise_r>
 8009f1e:	bf00      	nop
 8009f20:	24000038 	.word	0x24000038

08009f24 <_kill_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	@ (8009f44 <_kill_r+0x20>)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	4611      	mov	r1, r2
 8009f30:	602b      	str	r3, [r5, #0]
 8009f32:	f7f7 fdcd 	bl	8001ad0 <_kill>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	d102      	bne.n	8009f40 <_kill_r+0x1c>
 8009f3a:	682b      	ldr	r3, [r5, #0]
 8009f3c:	b103      	cbz	r3, 8009f40 <_kill_r+0x1c>
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	bd38      	pop	{r3, r4, r5, pc}
 8009f42:	bf00      	nop
 8009f44:	240004f8 	.word	0x240004f8

08009f48 <_getpid_r>:
 8009f48:	f7f7 bdba 	b.w	8001ac0 <_getpid>

08009f4c <__swhatbuf_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	460c      	mov	r4, r1
 8009f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f54:	2900      	cmp	r1, #0
 8009f56:	b096      	sub	sp, #88	@ 0x58
 8009f58:	4615      	mov	r5, r2
 8009f5a:	461e      	mov	r6, r3
 8009f5c:	da0d      	bge.n	8009f7a <__swhatbuf_r+0x2e>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f64:	f04f 0100 	mov.w	r1, #0
 8009f68:	bf14      	ite	ne
 8009f6a:	2340      	movne	r3, #64	@ 0x40
 8009f6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f70:	2000      	movs	r0, #0
 8009f72:	6031      	str	r1, [r6, #0]
 8009f74:	602b      	str	r3, [r5, #0]
 8009f76:	b016      	add	sp, #88	@ 0x58
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
 8009f7a:	466a      	mov	r2, sp
 8009f7c:	f000 f848 	bl	800a010 <_fstat_r>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	dbec      	blt.n	8009f5e <__swhatbuf_r+0x12>
 8009f84:	9901      	ldr	r1, [sp, #4]
 8009f86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f8e:	4259      	negs	r1, r3
 8009f90:	4159      	adcs	r1, r3
 8009f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f96:	e7eb      	b.n	8009f70 <__swhatbuf_r+0x24>

08009f98 <__smakebuf_r>:
 8009f98:	898b      	ldrh	r3, [r1, #12]
 8009f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f9c:	079d      	lsls	r5, r3, #30
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	d507      	bpl.n	8009fb4 <__smakebuf_r+0x1c>
 8009fa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	2301      	movs	r3, #1
 8009fae:	6163      	str	r3, [r4, #20]
 8009fb0:	b003      	add	sp, #12
 8009fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb4:	ab01      	add	r3, sp, #4
 8009fb6:	466a      	mov	r2, sp
 8009fb8:	f7ff ffc8 	bl	8009f4c <__swhatbuf_r>
 8009fbc:	9f00      	ldr	r7, [sp, #0]
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7fe fec6 	bl	8008d54 <_malloc_r>
 8009fc8:	b948      	cbnz	r0, 8009fde <__smakebuf_r+0x46>
 8009fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fce:	059a      	lsls	r2, r3, #22
 8009fd0:	d4ee      	bmi.n	8009fb0 <__smakebuf_r+0x18>
 8009fd2:	f023 0303 	bic.w	r3, r3, #3
 8009fd6:	f043 0302 	orr.w	r3, r3, #2
 8009fda:	81a3      	strh	r3, [r4, #12]
 8009fdc:	e7e2      	b.n	8009fa4 <__smakebuf_r+0xc>
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	6020      	str	r0, [r4, #0]
 8009fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fee:	b15b      	cbz	r3, 800a008 <__smakebuf_r+0x70>
 8009ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f81d 	bl	800a034 <_isatty_r>
 8009ffa:	b128      	cbz	r0, 800a008 <__smakebuf_r+0x70>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f023 0303 	bic.w	r3, r3, #3
 800a002:	f043 0301 	orr.w	r3, r3, #1
 800a006:	81a3      	strh	r3, [r4, #12]
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	431d      	orrs	r5, r3
 800a00c:	81a5      	strh	r5, [r4, #12]
 800a00e:	e7cf      	b.n	8009fb0 <__smakebuf_r+0x18>

0800a010 <_fstat_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d07      	ldr	r5, [pc, #28]	@ (800a030 <_fstat_r+0x20>)
 800a014:	2300      	movs	r3, #0
 800a016:	4604      	mov	r4, r0
 800a018:	4608      	mov	r0, r1
 800a01a:	4611      	mov	r1, r2
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	f7f7 fdb7 	bl	8001b90 <_fstat>
 800a022:	1c43      	adds	r3, r0, #1
 800a024:	d102      	bne.n	800a02c <_fstat_r+0x1c>
 800a026:	682b      	ldr	r3, [r5, #0]
 800a028:	b103      	cbz	r3, 800a02c <_fstat_r+0x1c>
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	bd38      	pop	{r3, r4, r5, pc}
 800a02e:	bf00      	nop
 800a030:	240004f8 	.word	0x240004f8

0800a034 <_isatty_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d06      	ldr	r5, [pc, #24]	@ (800a050 <_isatty_r+0x1c>)
 800a038:	2300      	movs	r3, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	f7f7 fdb6 	bl	8001bb0 <_isatty>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_isatty_r+0x1a>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_isatty_r+0x1a>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	240004f8 	.word	0x240004f8

0800a054 <_init>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr

0800a060 <_fini>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr
